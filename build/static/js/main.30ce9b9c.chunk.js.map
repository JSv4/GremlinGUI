{"version":3,"sources":["assets/background2.jpg","Redux/app_actions.jsx","Api/request.jsx","Api/authRequest.jsx","Api/api.jsx","Redux/actions.jsx","Redux/node_actions.jsx","Redux/edge_actions.jsx","Redux/pipeline_actions.jsx","Redux/auth_actions.jsx","Redux/job_actions.jsx","Redux/reducers.jsx","Components/PipelineDigraph/components/Modals/AddPipelineModal.jsx","Components/Shared/ConfirmModal.jsx","Components/Layouts/Layouts.jsx","Components/Scripts/ScriptModal.jsx","Components/Scripts/CreateNewScriptModal.jsx","Components/Shared/Templates/ScriptTemplates.jsx","Components/PipelineDigraph/components/Modals/NewJobModal.jsx","Components/Forms/FormSchemas.jsx","Components/Forms/Validators.jsx","Components/Users/NewUserModal.jsx","Components/Users/UserRow.jsx","Components/Shared/Wrappers.jsx","Components/Users/UserTable.jsx","Components/Users/UserTab.jsx","Components/Scripts/ScriptRow.jsx","Components/Shared/Placeholders.jsx","Components/Shared/Controls.jsx","Components/Scripts/ScriptTable.jsx","Components/Scripts/ScriptGridTab.jsx","Utils/maths.js","Components/Settings/SettingsTab.jsx","Components/Shared/LogModal.jsx","Components/Shared/JsonViewer.jsx","Components/Shared/TransformScriptBuilderModal.jsx","Components/Editors/JsonEditor.jsx","Components/Editors/CodeEditor.jsx","Components/Shared/PythonViewer.jsx","Components/Documents/ReadOnlyDocumentList.jsx","Components/Shared/SidebarTabs.jsx","Components/Shared/StatusLabels.jsx","Components/Shared/JobSettings.jsx","Components/Documents/DocumentItem.jsx","Components/Documents/DocumentList.jsx","Components/Shared/DetailsWidgets.jsx","Components/PipelineDigraph/components/DetailPanel/NodeDetailPanel.jsx","Components/PipelineDigraph/components/Modals/PipelineMetaModal.jsx","Components/PipelineDigraph/components/DetailPanel/PipelineDetailPanel.jsx","Components/PipelineDigraph/components/DetailPanel/DetailPanel.jsx","Components/PipelineDigraph/components/Controls/PipelineTable.jsx","Components/PipelineDigraph/components/Controls/PipelineRow.jsx","Components/PipelineDigraph/components/Controls/NodeListItem.jsx","Components/PipelineDigraph/components/Controls/SelectWindow.jsx","Components/PipelineDigraph/components/Controls/PrimaryPipelineControls.jsx","Components/PipelineDigraph/components/Controls/PipelineTrayControls.jsx","Components/PipelineDigraph/components/Nodes/PipelineNode.jsx","Components/DigraphToo/Canvas/CustomCanvasWidget.jsx","Components/DigraphToo/DigraphView.jsx","Components/Digraph/Digraph.jsx","Components/PipelineDigraph/PipelineDigraphTab.jsx","Components/JobDigraph/components/Controls/JobRow.jsx","Components/JobDigraph/components/Controls/JobTable.jsx","Components/JobDigraph/components/SidebarPanels/NodeResultPanel.jsx","Components/JobDigraph/components/SidebarPanels/JobResultPanel.jsx","Components/JobDigraph/components/SidebarPanels/JobLaunchPanel.jsx","Components/JobDigraph/components/SidebarPanels/ResultPanel.jsx","Components/JobDigraph/components/Nodes/ResultNode.jsx","Components/JobDigraph/components/Controls/TrayControls.jsx","Components/JobDigraph/components/Controls/PrimaryJobControls.jsx","Components/JobDigraph/JobDigraphTab.jsx","Components/Home/HomeTab.jsx","Containers/AsyncApp.jsx","Containers/withWindowDimensions.jsx","Components/LawyerUI/ResultsModal.jsx","Components/LawyerUI/Jobs/JobRow.jsx","Components/LawyerUI/Jobs/JobTable.jsx","Components/LawyerUI/ResultsSegment.jsx","Components/LawyerUI/LandingSegment.jsx","Components/LawyerUI/Jobs/JobControl.jsx","Components/LawyerUI/JobStatusStep.jsx","Components/LawyerUI/JobDetailsStep.jsx","Components/Shared/SupportedFileTypes.jsx","Components/Pipelines/PipelineCard.jsx","Components/Shared/NoResultsItem.jsx","Components/Pipelines/PipelineView.jsx","Components/LawyerUI/DocumentSelectionStep.jsx","Components/LawyerUI/JobWizardSegment.jsx","Containers/LawyerHome.jsx","Routes/RoleProtectedRoute.jsx","Components/Users/RecoverAccountModal.jsx","Containers/Login.jsx","Components/DigraphToo/State/SelectLinkState.js","Components/DigraphToo/State/CustomState.js","Components/DigraphToo/Links/GremlinLinkModel.js","Components/DigraphToo/Links/GremlinPortModel.js","Components/DigraphToo/Nodes/Script/JSCustomNodeModel.js","Components/DigraphToo/Nodes/Script/JSCustomNodeWidget.jsx","Redux/configureStore.jsx","Components/DigraphToo/Nodes/Script/JSCustomNodeFactory.js","Components/DigraphToo/Links/GremlinLinkFactory.js","Components/DigraphToo/Actions/GremlinDeleteItemsAction.js","index.js","DigraphEngine/DigraphEngine.js"],"names":["module","exports","showSuccessToast","message","dispatch","getState","a","toast","success","position","POSITION","TOP_CENTER","showErrorToast","error","changeTab","selectedTabIndex","type","Promise","resolve","dataAxios","axios","create","baseURL","timeout","createAuthRefreshInterceptor","failedRequest","post","refresh","Cookies","get","then","tokenRefreshResponse","console","log","set","data","access","response","config","headers","downloadResult","resultId","token","request","responseType","getFullResultById","testNewTransformForStepResult","input_transform","put","getSummaryResultsForJob","selectedJobId","changePasswordRequest","old_password","new_password","recoverUsernameRequest","email","authRequest","resetPasswordRequest","username","createNewUser","userObjData","changeUserPermissions","userId","role","deleteUserRequest","delete","getUsers","selectedPage","searchString","uploadDocumentRequest","file","job","FormData","append","name","_boundary","deleteDocumentRequest","documentId","downloadDocument","getDocumentsForJob","jobId","getJobStepLogs","stepId","getJobLogs","runJobToNode","endNodeId","createJobRequest","jobObj","updateJobRequest","patch","id","getJobs","getJobById","deleteJobRequest","downloadJob","downloadPythonScript","scriptId","uploadPythonScript","deletePythonScript","createScript","script","human_name","replace","toUpperCase","getAllPythonScripts","getPythonScriptById","getPythonScriptDetails","updateScript","scriptObj","exportPipelineYAML","pipelineId","uploadPipelineYAML","deletePipeline","createPipeline","pipelineObj","createTestJobForPipeline","getPipelineById","getFullPipelineById","getPipelineScripts","requestCreatePipelineEdge","node","requestDeletePipelineEdge","edgeId","getPipelines","searchText","updatePipeline","getPipelineStepById","pipelineStepId","deletePipelineStep","getPipelineSteps","getPipelineStepsForPipeline","updatePipelineStep","pipelineStepObj","createPipelineStep","newPipelineStepObj","getSystemStats","loginForJWTToken","password","requestUserDetails","uploadDocument","auth","loggedIn","loading","jobs","status","deleteDocument","fetchDocuments","selectDocumentPage","clearDocuments","receiveDocuments","downloadSelectedDocument","docId","filename","blob","Blob","link","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","removeChild","documents","runTestJobToNode","targetNodeId","test_job","fetchTestDocuments","document_page","downloadSelectedResult","clearResults","fetchSummaryResultsForJob","removeScript","updateSingleScript","updatedScript","receiveScripts","receivedAt","Date","now","fetchScripts","receiveScriptDetails","fetchSystemStats","user","stats","clearStats","clearSelectedPipelineNode","receivePipelineSteps","removePipelineStep","addPipelineNode","newPipelineStep","requestAddPipelineNode","step_settings","parent_pipeline","pipelines","selectedPipelineId","JSON","stringify","requestDeletePipelineStep","fetchPipelineSteps","handleUpdatePipelineStep","updatedPipelineStep","requestRefreshPipelineStep","addEdge","edge","setPipelineSearchString","pipelineSearchText","loadFullPipeline","updatedPipeline","items","nodes","edges","selectPipeline","updateSinglePipeline","clearPipelines","receivePipelines","fetchPipelines","pipelineNameFilter","unselectPipeline","tryLogout","remove","refreshToken","setUserNameFilter","receiveUsers","fetchUsers","users","searchRole","selectJob","unselectJob","refreshSelectedJob","updatedJob","downloadJobResultsById","createJob","newJob","fetchJobs","setJobSearchString","selectJobPage","updateJob","updatedJobObj","deleteJob","requestJobStepLogs","rootReducer","combineReducers","state","selectedJobLog","jobStepLogs","logs_loading","count","total_pages","action","Object","assign","results","oldJob","_","find","index","findIndex","splice","newJobStepLogs","result_logs","pages","page_size","newDocument","filter","item","documents_loading","results_loading","digraph_loading","transform_loading","test_transforms","testJobLog","testJobStepLogs","test_documents","document_count","document_pages","test_results","result_count","result_page","result_pages","updatedResult","Array","isArray","push","transformed_data","transformed_input","newPipeline","sortBy","oldPipeline","pipelinesteps","stepsAreFetching","lastUpdated","selectedPipelineStepId","oldNode","selectedEdgeId","oldEdge","updatedEdge","scripts","detailsLoading","selectedScriptData","selectedScriptId","newScript","oldScript","documentsAreFetching","revisedDocuments","updatedDoc","selectedResultId","newResult","oldResult","application","newJobName","showNewJobModal","showScriptModal","showNewScriptModal","showPipelineModal","showNewPipelineModal","showInviteUserModal","showLoginModal","jobNameFilter","scriptNameFilter","filterByErrorJobs","filterByStartedJobs","filterByQueuedJobs","filterByFinishedJobs","activeDigraph","buildMode","system","user_count","doc_count","parsed_doc_count","queued_job_count","running_job_count","error_job_count","script_count","pipeline_count","loginError","AddPipelineModal","props","useState","newName","setNewName","description","setDescription","Modal","open","visible","size","Label","corner","color","icon","onClick","toggleCreateModal","Header","Content","Description","Segment","padded","Form","Field","onChange","target","value","placeholder","Actions","Button","handleCreatePipeline","handleNewPipelineModalToggle","Icon","ConfirmModal","basic","toggleModal","content","inverted","noAction","yesAction","CenteredIconDiv","subheader","header","style","height","display","flexDirection","justifyContent","alignItems","marginBottom","as","textAlign","Subheader","InputResultTabs","panelOneLabel","panelOne","panelTwoLabel","panelTwo","panes","menuItem","render","Tab","Pane","attached","menu","pointing","HeaderContainer","loadingText","Grid","marginTop","Dimmer","active","Loader","Row","paddingBottom","Column","width","Container","fluid","fileTypeSchema","$schema","$id","title","default","doc_types","additionalProperties","required","properties","examples","additionalItems","minimum","pattern","ScriptModal","setSelectedTab","modalTab","setState","toggleConfirmModal","showConfirmModal","toggleDeleteModal","showDeleteModal","onConfirmSave","handleUpdateScript","localScriptObj","onConfirmDelete","handleDeleteScript","handleClearScript","handleScriptModalToggle","onDescriptionChange","updatedScriptObj","onToggleMode","mode","onPackageListChange","required_packages","onSetupScriptChange","setup_script","onNameChange","newScriptObj","onSchemaChange","newInputObj","required_inputs","onFileTypeChange","newFileType","Ajv","validate","supported_file_types","onTypeChange","newType","onScriptChange","newValue","tick","locked","handleRefreshScript","serverScriptObj","settings","showCodeEditor","showJobMeta","showDescriptionEditor","showPackageEditor","showSetupScriptEditor","showSettings","showSetupLog","jsonEditorCollapsed","showFileTypes","timer","setInterval","this","clearInterval","collapseStringsAfter","displayObjectSize","enableClipboard","theme","iconStyle","indentWidth","displayDataTypes","windowHeight","padding","borderRadius","margin","LoadingIndicator","text","schemaJson","parse","e","fileTypesJson","detailsAreFetching","maxHeight","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","useSoftTabs","showLineNumbers","tabSize","Input","Dropdown","options","key","selection","TextArea","rows","collapsed","src","collapseStringsAfterLength","onEdit","updated_src","onDelete","onAdd","extraLines","enableSearch","setup_log","follow","caseInsensitive","installer_log","install_error","raised","install_error_code","onOpen","onModalOpen","flex","circular","floated","toggle","Menu","vertical","Item","flexGrow","nextProps","prevState","Component","defaultProps","CreateNewScriptModal","scriptType","setScriptType","objectType","handleCreate","PipelineChoiceRow","Table","pipeline","handleSelectPipeline","selected","backgroundColor","Cell","total_steps","NewJobModal","createInitialSchema","inputs","pipe","schema","prop","jsf","option","optionName","ignoreMissingRefs","useExamplesValue","prototype","hasOwnProperty","call","generate","activePipelines","handleNewJobModalToggle","length","handleUpdateNewJobName","Divider","horizontal","celled","HeaderCell","Body","map","handleCreateJob","job_inputs","newUserForm_Schema","hint","enum","enumNames","newUserForm_Ui_Schema","resetPassword_Schema","new_password2","resetPassword_Ui_Schema","newJob_Schema","notification_email","newJob_Ui_Schema","validateNewUserForm","formData","errors","test","String","toLowerCase","addError","validateResetPassword","NewUserModal","handleChange","handleSubmit","handleInviteUser","uiSchema","RoleDropdown","handleChangeUserPermissions","roles","disabled","trigger","UserRow","setShowDeleteModal","Confirm","confirmButton","onCancel","onConfirm","styled","div","VerticallyCenteredDiv","HorizontallyCenteredDiv","HorizontallyJustifiedDiv","UserTable","overflow","selectable","structured","children","UserCreateAndSearchBar","onSubmit","handleFetchUsers","handleSetUserNameFilter","filterValue","handleToggleInviteUserModal","UserTab","page","selectedUser","handleDeleteUser","showInviteModal","i","colSpan","handleCreateUser","Pagination","activePage","onPageChange","handleUserPageChange","totalPages","SupportedTypes","extensions","ext","ScriptRow","showDeleteConfirm","setShowDeleteConfirm","overflowWrap","cursor","textDecoration","substring","Image","onDownload","SidebarLoadingPlaceholder","LoadingText","Placeholder","rectangular","CreateAndSearchBar","onCreate","onImport","buttongroup","buttons","positive","Or","Group","marginRight","JobDigraphButtonPanel","digraphEngine","stopPropagation","zoomIn","zoomOut","zoomToFit","JobControl","handleUpdateJob","stretched","started","progress","completed_tasks","task_count","toFixed","updatedObject","queued","columns","finished","Message","JobStatusCol","ScriptTable","ScriptGridTab","getScriptsForPipelines","step","uploadScriptArchive","event","preventDefault","files","handleUploadScript","fileInputRef","React","createRef","wholeNumberRows","numToTruncate","intDecimalPlaces","numPower","Math","pow","truncator","nameFilterValue","scriptFuse","Fuse","threshold","keys","filteredScripts","search","handleScriptSelect","toggleEditModal","handleDownloadScript","ref","hidden","handleChangeScriptNameFilter","handleNewScriptModalToggle","current","SettingsTab","handleResetValuesChange","resetChangePasswordForm","expandPasswordReset","handleResetValuesSubmit","old_password2","handleChangePassword","togglePasswordReset","toggleChangePasswordModal","showChangePasswordModal","Card","List","extra","Accordion","Title","menuPosition","minHeight","LogModal","handleModalToggle","JsonViewer","hideJson","groupArraysAfter","overflowY","jsonObj","groupArraysAfterLength","TransformScriptBuilderModal","myResult","pipelineStep","toggleModalVisible","handleTestTransformForResult","transform","updateTransform","onClose","input_data","raw_input_data","divided","labelPosition","negative","updatedStep","ConfirmChange","JsonEditor","updateJson","onSave","json","showSaveSettingsConfirm","expanded","editorProps","Popup","toolTip","on","primary","CodeEditor","showSaveConfirm","updateCode","code","onCodeChange","additionalActions","paddingTop","PythonViewer","hidePython","readOnly","ReadOnlyDocumentList","setVisible","handleChangePage","doc","verticalAlign","extracted","relaxed","PageChangeIntrospector","NodeInputTab","transform_script","transformed_input_data","loading_text","input_data_label","transform_script_label","transformed_input_data_label","NodeOutputTab","output_data","JobDocumentReadOnlyTab","pageCount","handleDownloadDocument","JobInputReadOnlyTab","StepStatusRibbons","JobStatusLabels","StepStatusLabel","JobSettings","packageSettings","newJobInputs","updatedObj","jobSettings","jobSettingsStr","nextState","newSrc","PureComponent","DocumentItem","DocumentList","onUpload","onDrop","useCallback","acceptedFiles","from","forEach","reader","FileReader","onabort","onerror","onload","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","grid","multiple","paddingRight","paddingLeft","handleSelectDocumentPage","SummaryJobResultStats","selectedJob","centered","Statistic","Value","DateTimeStats","label","dateString","timeString","JobResultStats","startTime","startDate","endTime","endDate","toggleDeleteConfirm","handleDownloadJob","loadAndShowLog","StartStopStats","NodeResultActions","result","handleDownloadResult","Buttons","has_file","pipeline_node","PipelinePanelHeader","selectedPipeline","wordWrap","production","NodePanelHeader","selectedNode","JobPanelHeader","SummaryNodeResultStats","imageUrl","wordBreak","NodeResultStats","DataInputPane","jobSettingsJson","DocumentInputPane","handleDocumentDelete","handleUploadDocument","handleDocumentPageChange","NodeDetailPanel","handleTabChange","activeIndex","setShowLogModal","showLogModal","toggleShowTransformBuilderModal","showTransformBuilder","onSaveScript","onSaveInputs","settingsJsonString","onSaveName","handleFetchTestJobStepLog","newNodeName","showNamePopup","namePopupTrigger","prevProps","selectedNodeResult","handleFetchResultData","sidebarTab","buildModeStyle","start_time","dStart","toLocaleTimeString","toLocaleDateString","stop_time","dEnd","node_output_data","start_state","parseInt","tabs","toggleTestMode","PipelineMetaModel","newDescription","setNewDescription","image","PipelineDetailPanel","onPipelineDescriptionOrNameChange","handleUpdatePipeline","onProductionStatusChange","oldPipelineObj","showMetaModal","showInputs","testJobLogsLoading","supported_files","ProductionButton","pipelineSchema","jobLogsLoading","handleUpdateTestJob","handleTestDocumentPageChange","handleDeleteTestDocument","handleUploadTestDocument","DetailPanel","testJobResult","selectedScript","handleDeleteJob","setSidebarTab","handleFetchTestJobLog","PipelineTable","PipelineRow","handleDownloadPipeline","NodeListItem","onSelect","supportedExtensions","Meta","EmptyListItem","SelectWindow","setAddModalVisible","showNewNameView","setShowNewNameView","selectNode","setSearchString","nodeName","onAddNode","Comment","PrimaryPipelineControls","downloadPipeline","downloadTestResult","contextRef","useRef","addModalVisible","context","offset","ceil","PipelineTrayControls","selectedTab","selectTab","PipelineNodeControls","PipelineControls","connect","myId","loaderObj","nodeId","p","background","CustomCanvasWidget","DigraphView","className","engine","getEngine","showStyle","marginLeft","transition","hideStyle","goBackShowStyle","left","top","goBackHideStyle","controlsShowStyle","zIndex","controlsHideStyle","trayControlsHiddenStyle","bottom","right","trayControlsShownStyle","collapseButtonHiddenStyle","collapseButtonShownStyle","playControlsStyle","headerWidgetStyle","Digraph","resetZoom","detailPanel","controls","moveXandYTo","Sidebar","Pushable","animation","direction","showSidebar","Pusher","exitDigraph","showSidebarToggle","toggleSidebar","onCanvasClick","trayControls","playControls","headerWidget","PipelineDigraphTab","openSidebar","closeSidebar","tabNum","handleUploadPipeline","myJob","refreshSummaryTestResults","refreshTestDocuments","handleRefreshTestJob","getLogs","job_log","log_fetching","running","handleToggleBuildMode","createPipelineEdge","handleCreatePipelineEdge","fromNodeId","toNodeId","onNodeMove","x_coord","y_coord","handleMovePipelineNode","onPipelineScale","scale","handleScalePipeline","onPipelineMove","x_offset","y_offset","handleMovePipeline","handleFetchScripts","refreshSelectedPipelineDigraph","crumbs","Breadcrumb","Section","handleUnselectPipeline","breadcrumbs","table","handlePipelineModalToggle","handleDeletePipeline","setPipelineNameFilter","handleAddPipelineNode","handleDownloadJobResult","nodeClass","PipelineNode","JobRow","showConfirm","setShowConfirm","handleSelectJobRow","num_docs","JobTable","NodeResultPanel","handleFetchJobStepLog","list","script_id","pipelinestep","JobResultPanel","handleFetchJobLog","jobResult","JobLaunchPanel","ResultPanel","myScript","nodeStyle","TrayControls","NodeResultControls","StartTrayControls","JobTrayControls","PrimaryJobControls","startJob","startedJob","JobDigraphTab","refreshResultDigraphData","handleSelectJob","all","renderPipeline","handleFetchJobs","handleUnselectJob","loadAndShowNodeLog","toggleLogModal","ZoomCanvas","scaleLevel","zoomedDigraph","digraph","tabIndex","showLog","setLocked","handleSelectJobPage","handleSetJobSearchString","ResultNode","AdminHomeTab","handleRefreshSystemStats","AsyncApp","logMove","lastNodeMoves","x","y","lastTime","syncStaleNodeMoves","handleClearLogs","setNewJobName","show","handleShowSuccessToast","handleShowErrorToast","newTabIndex","handleLogout","handleCreateTestJob","clearTestData","requestTestJobStepLog","tryTestNewTransformForStepResult","uploadTestDocument","documentPage","requestCreateTestJobForPipeline","updateTestDocuments","handleRunTestJobToNode","updateTestJob","pageNo","newRole","requestChangeUserPermissions","userName","userDetails","changePassword","requestDeleteUserRequest","SetUserNameFilter","filterString","handleSelectPipelineRow","exception","requestUploadPipelineYAML","requestCreatePipeline","requestDeletePipeline","successId","removePipeline","requestUpdatePipeline","requestDownloadPipelineYAML","clearAllValues","handleSelectResult","selectResult","handleFetchFullResultData","fetchFullResult","handleFetchSummaryResults","SetScriptNameFilter","setScriptNameFilter","requestDownloadPythonScript","requestUploadPythonScript","selectScript","refreshScriptById","requestDeleteScript","handleCreateScript","requestCreateScript","handleNodeSelect","handleNodeUnselect","handleCreatePipelineStep","step_number","createNewPipelineStep","RefreshPipelineModal","refreshPipelineStepsForSelectedPipeline","targetPipelineId","reactDiagramId","edgeObj","linkInjectGremlinId","handleDeletePipelineEdge","deletePipelineEdge","handleCreateNode","repaint","err","handleDeletePipelineNode","pipelineNodeId","handleRefreshPipelineStep","handleRequestPipelineStepDelete","requestHomeViewDataRefresh","registerNodeMoveListener","registerNodeSelectedListener","registerNodeUnselectedListener","registerNodeDeleteListener","registerLinkCreateListener","args","Number","isInteger","entity","sourcePort","parent","targetPort","start_node","end_node","registerLinkDeleteListener","DisplayPane","handleFetchTestResultData","handlePipelineStepSelect","SetPipelineNameFilter","handleFilterUserName","SidebarButtons","clearPipeline","simple","onHide","dimmed","WrappedComponent","updateWindowDimensions","innerWidth","innerHeight","addEventListener","removeEventListener","windowWidth","isMobileSized","JobResult","ResultsModal","stackable","ResultsSegment","setHomeView","handleSetJobsSearchString","LandingSegment","handleLandingJobSearch","setResultView","setWizardView","JobStatusStep","JobDetailsStep","handleJobFormChange","SupportedFileTypes","labels","PipelineCard","fileTypes","maxLength","owner_email","owner","NoResultsItem","Line","Paragraph","Extra","PipelineView","refreshPipelines","handleSetPipelineSearchString","itemsPerRow","DocumentSelectionStep","NavButtons","prevButton","nextButton","reverseStep","advanceStep","StepDisplay","Step","JobWizardSegment","steps","0","handlePipelinePageChange","1","2","handleDeleteDocument","3","LawyerHome","handleRefreshDocuments","handleRefreshSelectedJob","toggleResultModal","showResultModal","obj","view","setStep","handleStartSelectedJob","handleStartWizardOver","pipelineSearchString","RoleProtectedRoute","componentOptions","to","pathname","RecoverAccountModal","resetState","handleRecoverUsername","handleResetPassword","setTimeout","selectPassword","selectUser","backgroundImage","require","divStyle","backgroundSize","Login","handleLoginClick","tryLogin","fetchedUserDetails","history","recoverUsername","resetPassword","clear","userNameValue","passwordValue","handleKeyPress","charCode","toggleRecoveryModal","showRecoveryModal","alignContent","bottomPadding","alignSelf","maxWidth","iconPosition","SelectLinkState","registerAction","Action","InputType","MOUSE_DOWN","fire","getMouseElement","isLocked","eject","getModel","clearSelection","setSelected","AbstractDisplacementState","CustomState","childStates","SelectingState","dragCanvas","DragCanvasState","dragNewLink","DragNewLinkState","dragItems","MoveItemsState","allowLooseLinks","selectLink","element","getActionEventBus","getModelForEvent","PortModel","transitionWithEvent","LinkModel","State","GremlinLinkModel","DefaultLinkModel","GremlinPortModel","DefaultPortModel","JSCustomNodeModel","addPort","in","ob","NodeModel","JSCustomNodeWidget","cardStyle","minWidth","myNode","port","getPort","preloadedState","JSCustomNodeFactory","model","AbstractReactFactory","LinkFactory","DefaultLinkFactory","GremlinDeleteItemsAction","nodeDeleteHandler","linkDeleteHandler","keyCodes","modifiers","ctrlKey","shiftKey","altKey","metaKey","KEY_DOWN","keyCode","indexOf","getSelectedEntities","repaintCanvas","store","createStore","applyMiddleware","thunkMiddleware","components","listener","handleNodeMove","handleNodeUnselected","handleNodeDelete","handleLinkCreate","registerLinkUpdateListener","handleLinkUpdate","handleLinkDelete","selectedPipelineObj","links","handleCreateLink","initializeEngine","createEngine","registerDefaultDeleteItemsAction","registerDefaultZoomCanvasAction","maxNumberPointsPerLink","getNodeFactories","registerFactory","getLinkFactories","GremlinLinkFactory","getStateMachine","pushState","nodeDelete","linkDelete","initializeModel","DiagramModel","setGridSize","registerListener","eventDidFire","function","adjustGridOffset","adjustGridZoom","handleLinksChanged","realignGrid","setModel","isCreated","linkCreate","linkTargetChanged","handleNodeSelectionChange","isSelected","handleNodeMoved","linkId","gremlinId","getLinkFromReactDiagramId","offsetX","getOffsetX","offsetY","getOffsetY","zoom","getZoomLevel","setProperty","gridSize","getOptions","getNodeFromGremlinId","getNodes","getLinkFromGremlinId","getLinks","sourceNode","targetNode","setSourcePort","setTargetPort","addLink","setPosition","addNode","handleDeleteNode","gremlin_id","handleDeleteLink","setZoomLevel","clearLinks","clearNodes","fireAction","homeOptions","path","component","exact","getElementById"],"mappings":"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","file":"static/js/main.30ce9b9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background2.7b81fb4c.jpg\";","import { toast } from 'react-toastify';\n\n/*\n* Application UI Global State\n* Action constants\n*/\nexport const UPDATE_NEW_JOB_NAME = 'UPDATE_NEW_JOB_NAME';\nexport const NEW_JOB_MODAL_TOGGLE = 'NEW_JOB_MODAL_TOGGLE';\nexport const SCRIPT_MODAL_TOGGLE = 'SCRIPT_MODAL_TOGGLE';\nexport const NEW_SCRIPT_MODAL_TOGGLE = 'NEW_SCRIPT_MODAL_TOGGLE';\nexport const PIPELINE_MODAL_TOGGLE = 'PIPELINE_MODAL_TOGGLE';\nexport const NEW_PIPELINE_MODAL_TOGGLE = 'NEW_PIPELINE_MODAL_TOGGLE';\nexport const INVITE_USER_MODAL_TOGGLE = 'INVITE_USER_MODAL_TOGGLE';\nexport const LOGIN_MODAL_TOGGLE = 'LOGIN_MODAL_TOGGLE';\nexport const SELECT_TAB = 'SELECT_TAB';\nexport const UPDATE_JOB_NAME_FILTER = 'UPDATE_JOB_NAME_FILTER';\nexport const UPDATE_SCRIPT_NAME_FILTER = 'UPDATE_SCRIPT_NAME_FILTER';\nexport const UPDATE_PIPELINE_NAME_FILTER = 'UPDATE_PIPELINE_NAME_FILTER';\nexport const SHOW_ERROR_JOBS = \"SHOW_ERROR_JOBS\";\nexport const SHOW_STARTED_JOBS = \"SHOW_STARTED_JOBS\";\nexport const SHOW_QUEUED_JOBS = \"SHOW_QUEUED_JOBS\";\nexport const SHOW_FINISHED_JOBS = \"SHOW_FINISHED_JOBS\";\nexport const TOGGLE_BUILD_MODE = \"TOGGLE_BUILD_MODE\";\n\n/*\n* Application State\n* Action creators\n*/\n\nexport const showSuccessToast = (message) => async (dispatch, getState) => {\n    toast.success(message, {\n      position: toast.POSITION.TOP_CENTER\n    });\n  }\n  \n  export const showErrorToast = (message) => async (dispatch, getState) => {\n    toast.error(message, {\n      position: toast.POSITION.TOP_CENTER\n    });\n  }\n  \n  export const changeTab = (selectedTabIndex) => dispatch => {\n    dispatch({\n      type: SELECT_TAB,\n      selectedTabIndex\n    });\n    return Promise.resolve(true);\n  }\n  \n  export function toggleNewJobModal() {\n    return {\n      type: NEW_JOB_MODAL_TOGGLE\n    }\n  }\n  \n  export function toggleNewPipelineModal() {\n    return {\n      type: NEW_PIPELINE_MODAL_TOGGLE\n    }\n  }\n  \n  export function togglePipelineModal() {\n    return {\n      type: PIPELINE_MODAL_TOGGLE\n    }\n  }\n  \n  export function toggleNewScriptModal() {\n    return {\n      type: NEW_SCRIPT_MODAL_TOGGLE\n    }\n  }\n  \n  export function toggleScriptModal() {\n    return {\n      type: SCRIPT_MODAL_TOGGLE\n    }\n  }\n  \n  export function toggleInviteUserModal() {\n    return {\n      type: INVITE_USER_MODAL_TOGGLE\n    }\n  }\n  \n  export function setNewJobName(newJobName) {\n    return {\n      type: UPDATE_NEW_JOB_NAME,\n      newJobName\n    }\n  }\n  export function setJobNameFilter(filter){\n    return {\n      type: UPDATE_JOB_NAME_FILTER,\n      filter\n    }\n  }\n  \n  export function setScriptNameFilter(filter){\n    return {\n      type: UPDATE_SCRIPT_NAME_FILTER,\n      filter\n    }\n  }\n  \n  export function filterByErrorJobs(filter) {\n    return {\n      type: SHOW_ERROR_JOBS,\n      filter\n    }\n  }\n  \n  export function filterByStartedJobs(filter) {\n    return {\n      type: SHOW_STARTED_JOBS,\n      filter\n    }\n  }\n  \n  export function filterByQueuedJobs(filter) {\n    return {\n      type: SHOW_QUEUED_JOBS,\n      filter\n    }\n  }\n  \n  export function filterByFinishedJobs(filter) {\n    return {\n      type: SHOW_FINISHED_JOBS,\n      filter\n    }\n  }\n  \n  export const toggleBuildMode = () => dispatch => {\n    dispatch({\n      type: TOGGLE_BUILD_MODE,\n    });\n    return Promise.resolve(true);\n  }","import Cookies from 'js-cookie';\nimport axios from 'axios';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\n\n// Nice tutorial on setting up a custom axios instance and adding in interceptors\n// https://www.techynovice.com/setting-up-JWT-token-refresh-mechanism-with-axios/\n// Ended up finding it easier to use axios-auth-refresh as it packages up relevant logic.\nconst dataAxios = axios.create({\n  baseURL: 'https://gremlin.extract.legal/api/',\n  timeout: 10000,\n});\n// const dataAxios = axios.create({\n//   baseURL: 'http://localhost:8000/api/',\n//   timeout: 10000,\n// });\n \n// // Function that will be called to refresh authorization\nconst refreshAuthLogic = failedRequest => axios.post('https://gremlin.extract.legal/auth/token/refresh/', {\n  refresh: Cookies.get(\"refreshToken\")\n}).then(tokenRefreshResponse => {\n  console.log(\"FailedRequest\", failedRequest);\n  console.log(\"Trigger Refresh\", tokenRefreshResponse);  \n  Cookies.set('token', tokenRefreshResponse.data.access);\n  failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.access;\n  return Promise.resolve();\n});\n\n// Function that will be called to refresh authorization\n// const refreshAuthLogic = failedRequest => axios.post('http://localhost:8000/auth/token/refresh/', {\n//   refresh: Cookies.get(\"refreshToken\")\n// }).then(tokenRefreshResponse => {\n//   console.log(\"FailedRequest\", failedRequest);\n//   console.log(\"Trigger Refresh\", tokenRefreshResponse);  \n//   Cookies.set('token', tokenRefreshResponse.data.access);\n//   failedRequest.response.config.headers['Authorization'] = 'Bearer ' + tokenRefreshResponse.data.access;\n//   return Promise.resolve();\n// });\n \n// Instantiate the interceptor (you can chain it as it returns the axios instance)\ncreateAuthRefreshInterceptor(dataAxios, refreshAuthLogic);\n\nexport default dataAxios;","import axios from 'axios';\n\n//167.172.26.136\nexport default axios.create({\n  baseURL: 'https://gremlin.extract.legal/auth/',\n  timeout: 10000,\n});\n\n// export default axios.create({\n//     baseURL: 'http://localhost:8000/auth/',\n//     timeout: 10000,\n//   });","import request from './request';\nimport authRequest from './authRequest';\n\n//########################## RESULTS API CALLS ##########################\nexport const deleteResultRequest = (requestId, token) => {\n  return request.delete(`/requests/${requestId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const downloadResult = (resultId, token) => {\n  return request.get(`/Results/${resultId}/download/`, {\n    responseType: 'blob',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getFileResultsRequest = (selectedJobId, selectedPage, token) => {\n  return request.get(`/FileResults/?job__id=${selectedJobId}&page=${selectedPage}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n//Bobby\nexport const getJobResultsRequest = (selectedJobId, selectedPage, token) => {\n  return request.get(`/Results/?job__id=${selectedJobId}&page=${selectedPage}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getResultsRequest = (selectedPage, searchString, token) => {\n  return request.get(`/Results/?page=${selectedPage}&text_search=${searchString}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getFullResultById = (resultId, token) => {\n  return request.get(`/Results/${resultId}/get_full_obj/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const testNewTransformForStepResult = (resultId, input_transform, token) => {\n  return request.put(`/Results/${resultId}/test_transform_script/`, \n    { input_transform },\n    {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getSummaryResultsForJob = (selectedJobId, token) => {\n  return request.get(`/Jobs/${selectedJobId}/summary_results/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getFullResultsForJob = (selectedJobId, token) => {\n  return request.get(`/Jobs/${selectedJobId}/full_results/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n//########################## USER API CALLS ##############################\nexport const changePasswordRequest = (old_password, new_password, token) => {\n  return request.post(`/ChangePassword/`,  \n    { old_password, new_password },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 30000\n    });\n}\n\nexport const recoverUsernameRequest = (email) => {\n  return authRequest.post(`/RecoverUsername/`,  \n    { email },\n    {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n}\n\nexport const resetPasswordRequest = (username) => {\n  return authRequest.post(`/ResetPassword/`,  \n    { username },\n    {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n}\n\nexport const createNewUser = (userObjData, token) => {\n  return request.put(`/InviteUser/`,  \n    { ...userObjData },\n    {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n}\n\n// Elevate or decrease user permissions (but backend won't let you demote admins unless you go through Django)\nexport const changeUserPermissions = (userId, role, token) => {\n  return request.put(`/Users/${userId}/change_permissions/`, \n  {\n    role\n  },  \n  {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const deleteUserRequest = (userId, token) => {\n  return request.delete(`/Users/${userId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getUsers = (selectedPage, searchString, role, token) => {\n  return request.get(`/Users/?text_search=${searchString}&role=${role}&page=${selectedPage}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    timeout: 30000\n  });\n}\n\n//\n\n//########################## DOCUMENT API CALLS ##########################\n\n//Nice tutorial re: this approach and structuring: https://medium.com/@fakiolinho/handle-blobs-requests-with-axios-the-right-way-bb905bdb1c04\nexport const uploadDocumentRequest = (file, job, token) => {\n\n  const data = new FormData();\n  data.append('file', file);\n  data.append('name', file.name);\n  data.append('rawText','');\n\n  //note for later... if jobs were an array, just append a new batch field for each job you want to associate. Don't pass array\n  if(job) data.append('job', job); \n\n  return request.post(`/Documents/`, data, {\n    headers: {\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000,\n  });\n};\n\nexport const deleteDocumentRequest = (documentId, token) => {\n  return request.delete(`/Documents/${documentId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const downloadDocument = (documentId, token) => {\n  return request.get(`/Documents/${documentId}/download/`, {\n    responseType: 'blob',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getDocumentsForJob = (jobId, selectedPage, token) => {\n  return request.get(`/Documents/?id=&name=&extracted=&job=${jobId}&page=${selectedPage}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    timeout: 30000\n  });\n}\n\n//########################## JOB API CALLS ##########################\n\n// For a given step of this job, get the script logs\nexport const getJobStepLogs = (jobId, stepId, token) => {\n  return request.get(\n    `/PipelineSteps/${stepId}/JobLogs/${jobId}/`,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\n// Get logs for overall job pipeline execution (all of the Gremlin sys logs)\nexport const getJobLogs = (jobId, token) => {\n  return request.get(\n    `/Jobs/${jobId}/logs/`,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const runJobToNode = (jobId, endNodeId, token) => {\n  return request.get(`/Jobs/${jobId}/RunToNode/${endNodeId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const createJobRequest = (jobObj, token) => {\n\n  return request.post(\n    '/Jobs/',\n    {...jobObj},\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const updateJobRequest = (jobObj, token) => {\n  return request.patch(\n    `/Jobs/${jobObj.id}/`,\n    {...jobObj},\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const getJobs = (selectedPage, searchString, token) => {\n  return request.get(`/Jobs/?page=${selectedPage}&text_search=${searchString}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getJobById = (jobId, token) => {\n  return request.get(`/Jobs/${jobId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const deleteJobRequest = (jobId, token) => {\n  return request.delete(`/Jobs/${jobId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const deleteAllResultsForJob = (jobId, token) => {\n  return request.post(`/Jobs/${jobId}/reset_job/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const downloadJob = (jobId, token) => {\n  return request.get(`/Jobs/${jobId}/download/`, {\n    responseType: 'blob',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n//##################### PYTHON SCRIPT API CALLS ######################\n\nexport const downloadPythonScript = (scriptId, token) => {\n  return request.get(`/PythonScripts/${scriptId}/exportArchive/`, {\n    responseType: 'blob',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n//Nice tutorial re: this approach and structuring: https://medium.com/@fakiolinho/handle-blobs-requests-with-axios-the-right-way-bb905bdb1c04\nexport const uploadPythonScript = (file, token) => {\n\n  const data = new FormData();\n  data.append('file', file);\n\n  return request.post(`/UploadScript/`, data, {\n    headers: {\n      'Content-Disposition': `attachment; filename=${file.name}`,\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000,\n  });\n};\n\nexport const deletePythonScript = (scriptId, token) => {\n  return request.delete(`/PythonScripts/${scriptId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const createScript = (name, type, script, token) => {\n  return request.post(\n    '/PythonScripts/',\n    {\n      human_name: name,\n      name: name.replace(\" \",\"_\").toUpperCase(),\n      type,\n      script\n    },\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const getAllPythonScripts = (token) => {\n  return request.get(`/PythonScripts/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPythonScriptById = (scriptId, token) => {\n  return request.get(`/PythonScripts/${scriptId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPythonScriptDetails = (token, id) => {\n  return request.get(`/PythonScripts/${id}/GetDetails/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const updateScript = (scriptObj, token) => {\n  return request.put(\n    `/PythonScripts/${scriptObj.id}/UpdateDetails/`,\n    {\n      ...scriptObj\n    },\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\n//##################### PIPELINE API CALLS ######################\n\nexport const exportPipelineYAML = (pipelineId, token) => {\n  return request.get(\n    `/Pipelines/${pipelineId}/ExportToYAML/`,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const uploadPipelineYAML = (file, token) => {\n\n  const data = new FormData();\n  data.append('file', file);\n\n  return request.post(`/UploadPipeline/`, data, {\n    headers: {\n      'Content-Disposition': `attachment; filename=${file.name}`,\n      'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000,\n  });\n};\n\n\nexport const deletePipeline = (pipelineId, token) => {\n  return request.delete(`/Pipelines/${pipelineId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const createPipeline = (pipelineObj, token) => {\n  return request.post(\n    '/Pipelines/',\n    pipelineObj,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const createTestJobForPipeline = (pipelineId, token) => {\n  return request.get(\n    `/Pipelines/${pipelineId}/get_test_job/`,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\n// Just gets the pipeline object with related model fields as ids only\nexport const getPipelineById = (pipelineId, token) => {\n  return request.get(`/Pipelines/${pipelineId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n// Get the pipeline object with links and node objs. This can be immediately ingested into\n// the digraph engine. \nexport const getFullPipelineById = (pipelineId, token) => {\n  return request.get(`/Pipelines/${pipelineId}/get_full_pipeline/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPipelineScripts = (pipelineId, token) => {\n  return request.get(`/Pipelines/${pipelineId}/scripts/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const requestCreatePipelineEdge = (node, token) => {\n  console.log(\"CreatePipelineEdges: \", node);  \n  return request.post(`/PipelineEdges/`, node,\n  {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n} \n\nexport const requestDeletePipelineEdge = (edgeId, token) => {\n  return request.delete(`/PipelineEdges/${edgeId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPipelines = (searchText, selectedPage, token) => {\n  return request.get(`/Pipelines/?text_search=${searchText}&page=${selectedPage}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const updatePipeline = (pipelineObj, token) => {\n  return request.patch(`/Pipelines/${pipelineObj.id}/`,\n    {\n      ...pipelineObj\n    },\n    {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 30000\n    }\n  );\n}\n\n//##################### PIPELINE STEP API CALLS ######################\n\nexport const getPipelineStepById = (pipelineStepId, token) => {\n  return request.get(`/PipelineSteps/${pipelineStepId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  })\n}\n\nexport const testStepTransform = (input_data, input_transform,  token) => {\n  return request.put(`/PipelineSteps/test_transform_script/`, \n  { input_data, input_transform },\n  {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  })\n}\n  \nexport const deletePipelineStep = (pipelineStepId, token) => {\n  return request.delete(`/PipelineSteps/${pipelineStepId}/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPipelineSteps = (token) => {\n  return request.get(`/PipelineSteps/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const getPipelineStepsForPipeline = (pipelineId, token) => {\n  return request.get(`/PipelineSteps/?id=&name=&parent_pipeline=${pipelineId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\nexport const updatePipelineStep = (pipelineStepObj, token) => {\n  return request.patch(\n    `/PipelineSteps/${pipelineStepObj.id}/`,\n    {\n      ...pipelineStepObj\n    },\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\nexport const createPipelineStep = (newPipelineStepObj, token) => {\n  return request.post(\n    '/PipelineSteps/',\n    {...newPipelineStepObj},\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    }\n  );\n}\n\n//########################## SYSTEM STATS## ##########################\nexport const getSystemStats = (token) => {\n  return request.get(`/SystemStats/`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    timeout: 30000\n  });\n}\n\n//########################## AUTH API CALLS ##########################\n\nexport const loginForJWTToken = (username, password) => {\n  return authRequest.post(\n    `/token/`,\n    {username, password},\n    {\n      headers: {\n        'Content-Type': `application/json`\n      },\n      timeout: 10000,\n    });\n}\n\n// Not actually using this... better approach was to use an axios intercept which can automatically\n// retry requests that fail due to a 401 after refreshing the relevant token. Leaving this in case \n// needed for something. \nexport const refreshJWTToken = (refresh) => {\n  return authRequest.post(\n    `/token/refresh/`,\n    {refresh},\n    {\n      headers: {\n        'Content-Type': `application/json`\n      },\n      timeout: 10000,\n    });\n}\n\nexport const requestUserDetails = (token) => {\n  return request.get(\n    `/User/me/`,\n    {\n      headers: {\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${token}`\n      },\n      timeout: 10000,\n    });\n}\n","import Cookies from 'js-cookie'\n\nimport { \n  showErrorToast,\n} from './app_actions';\n\n/*\n* API Call Imports\n*/\nimport {\n  uploadDocumentRequest, \n  deleteDocumentRequest,\n  downloadDocument,\n  getDocumentsForJob,\n\n  getSummaryResultsForJob,\n  getResultsRequest,\n  getFullResultById,\n  downloadResult,\n  \n  getJobStepLogs,\n  getJobLogs,\n  getJobById,\n  runJobToNode,\n  updateJobRequest,\n\n  getAllPythonScripts,\n  getPythonScriptById,\n  downloadPythonScript,\n  uploadPythonScript,\n  deletePythonScript,\n  getPythonScriptDetails,\n  createScript,\n  updateScript,\n  getPipelineScripts,\n  createTestJobForPipeline,\n  testNewTransformForStepResult,\n  getSystemStats\n} from '../Api/api';\n\n/*\n * Test Job\n * Action constants\n */\n\nexport const RECEIVE_TEST_JOB = 'RECEIVE_TEST_JOB';\nexport const RELOAD_TEST_JOB = 'RELOAD_TEST_JOB';\nexport const RECEIVE_TEST_DOCUMENTS = 'RECEIVE_TEST_DOCUMENTS';\nexport const RECEIVE_TEST_RESULTS = 'RECEIVE_TEST_RESULTS';\nexport const UPDATE_TEST_JOB = 'UPDATE_TEST_JOB';\nexport const UPDATE_TEST_JOB_RESULT = 'UPDATE_TEST_JOB_RESULT';\nexport const CLEAR_TEST_DATA = 'CLEAR_TEST_DATA';\nexport const SET_TEST_DOCUMENT_PAGE = 'SET_TEST_DOCUMENT_PAGE';\nexport const SET_TEST_RESULT_PAGE = 'SET_TEST_RESULT_PAGE';\nexport const SET_TEST_JOB_LOG_LOADING = 'SET_TEST_JOB_LOG_LOADING';\nexport const ADD_TEST_JOB_STEP_LOG = 'ADD_TEST_JOB_STEP_LOG';\nexport const SET_TEST_JOB_LOG = 'SET_TEST_JOB_LOG';\nexport const CLEAR_TEST_JOB_LOGS = 'CLEAR_TEST_JOB_LOGS';\nexport const SET_TEST_LOADING = 'SET_TEST_LOADING';\nexport const SET_TEST_TRANSFORM_LOADING = 'SET_TEST_TRANSFORM_LOADING';\nexport const SET_TEST_RESULTS_LOADING = 'SET_TEST_RESULTS_LOADING';\nexport const SET_TEST_DOCUMENTS_LOADING = 'SET_TEST_DOCUMENTS_LOADING';\n\n/*\n* Documents\n* Action constants\n*/\nexport const ADD_DOCUMENT = 'ADD_DOCUMENT';\nexport const RECEIVE_DOCUMENTS = 'RECEIVE_DOCUMENTS'; \nexport const UPDATE_DOCUMENT = 'UPDATE_DOCUMENT';\nexport const REMOVE_DOCUMENT = 'REMOVE_DOCUMENT';\nexport const CLEAR_DOCUMENTS = 'CLEAR_DOCUMENTS';\nexport const CHANGE_DOCUMENT_PAGE = 'CHANGE_DOCUMENT_PAGE';\nexport const SET_DOCUMENTS_LOADING = 'SET_DOCUMENTS_LOADING';\n\n/*\n * Results\n * Action constants\n */\nexport const ADD_RESULT = 'ADD_RESULT';\nexport const RECEIVE_RESULTS = 'RECEIVE_RESULTS';\nexport const UPDATE_RESULT = 'UPDATE_RESULT';\nexport const REMOVE_RESULT = 'REMOVE_RESULT';\nexport const CLEAR_RESULTS = 'CLEAR_RESULTS';\nexport const SELECT_RESULT = 'SELECT_RESULT';\nexport const CLEAR_SELECTED_RESULT = 'CLEAR_SELECTED_RESULT';\nexport const CHANGE_RESULT_PAGE = 'CHANGE_RESULT_PAGE';\nexport const SET_RESULTS_LOADING = 'SET_RESULTS_LOADING';\nexport const RECEIVE_TEST_TRANSFORM = 'RECEIVE_TEST_TRANSFORM';\nexport const SET_RESULTS_SEARCH_STRING = 'SET_RESULTS_SEARCH_STRING';\n\n/*\n * File Results\n * Action constants\n */\nexport const RECEIVE_FILE_RESULTS = 'RECEIVE_FILE_RESULTS';\nexport const CLEAR_FILE_RESULTS = 'CLEAR_FILE_RESULTS';\nexport const CHANGE_FILE_RESULT_PAGE = 'CHANGE_FILE_RESULT_PAGE';\nexport const SET_FILE_RESULTS_LOADING = 'SET_FILE_RESULTS_LOADING';\n\n/*\n* Python Scripts\n* Action constants\n*/\nexport const ADD_SCRIPT = 'ADD_SCRIPT';\nexport const RECEIVE_SCRIPTS = 'RECIEVE_SCRIPTS';\nexport const UPDATE_SCRIPT = 'UPDATE_SCRIPT';\nexport const REMOVE_SCRIPT = 'REMOVE_SCRIPT';\nexport const CLEAR_SCRIPTS = 'CLEAR_SCRIPTS';\nexport const SELECT_SCRIPT = 'SELECT_SCRIPT';\nexport const CLEAR_SELECTED_SCRIPT = 'CLEAR_SELECTED_SCRIPT';\nexport const SET_SCRIPTS_LOADING = 'SET_SCRIPTS_LOADING';\nexport const SET_SCRIPT_DETAILS_LOADING = 'SET_SCRIPT_DETAILS_LOADING';\nexport const RECEIVE_SCRIPT_DETAILS = 'RECEIVE_SCRIPT_DETAILS';\nexport const REQUEST_SCRIPT_DETAILS = 'REQUEST_SCRIPT_DETAILS';\n\n/*\n* System\n* Action creators\n*/\nexport const SET_STATS_LOADING = 'SET_STATS_LOADING';\nexport const RECEIVE_STATS = 'RECEIVE_STATS';\nexport const CLEAR_STATS = 'CLEAR_STATS';\n\n/*\n* DOCUMENT\n* Action creators\n*/\nexport const uploadDocument = (file) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      dispatch({\n        type: SET_DOCUMENTS_LOADING,\n        loading:true\n      })\n      let response = await uploadDocumentRequest(file, getState().jobs.selectedJobId, Cookies.get('token'));\n      if (response.status===200) {\n        dispatch({\n          type: SET_DOCUMENTS_LOADING,\n          loading: false\n        });\n      }\n    } \n    catch (error) {\n      if (error.response) {\n        dispatch(showErrorToast(error.response.data.message));\n      } else {\n        dispatch(showErrorToast('Something went wrong while uploading this file'));\n      }\n    }\n  }\n  return Promise.resolve();\n}\n\nexport const deleteDocument = (documentId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n    \n      let token = Cookies.get('token');\n      let response = await deleteDocumentRequest(documentId, token);\n      if (response.status===204) {\n        dispatch(fetchDocuments);\n        return Promise.resolve(true);      \n      }\n      else {\n        dispatch(showErrorToast(`Unable to delete document with ID ${documentId}`));\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(`Error trying to delete document with ID #${documentId}`, error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const selectDocumentPage = (selectedPage) => dispatch => {\n  dispatch({\n    type: CHANGE_DOCUMENT_PAGE,\n    selectedPage\n  });\n  return Promise.resolve();\n}\n\nexport const clearDocuments = () => dispatch => {\n  dispatch({\n    type: CLEAR_DOCUMENTS,\n  });\n  return Promise.resolve();\n}\n\nexport const receiveDocuments = (response) => dispatch => {\n  dispatch({\n    type: RECEIVE_DOCUMENTS,\n    response: response,\n  });\n  return Promise.resolve();\n}\n\nexport const downloadSelectedDocument = (docId) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await downloadDocument(docId, token)\n                              \n      if(response.status === 200) {\n          // Try to find out the filename from the content disposition `filename` value\n          var filename = response.headers['filename'];\n\n          // The actual download\n          var blob = new Blob([response.data], { type: response.headers['content-type'] });\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.download = filename;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n      }\n    }\n    catch (error) {\n      dispatch(showErrorToast(\"Error downloading selected document: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve();\n}\n\nexport const fetchDocuments = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_DOCUMENTS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      const {selectedJobId} = getState().jobs;\n      const {selectedPage} = getState().documents;\n\n      let response = await getDocumentsForJob(selectedJobId, selectedPage, token);\n      if(response.status===200) {\n        dispatch(receiveDocuments(response.data));\n        return Promise.resolve(true);\n      }\n    }    \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching documents: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\n/* \n * TEST JOB\n * Action creators\n */\n\nexport const setTestDocumentsLoading = (loading) => async dispatch => {\n  dispatch({\n    type: SET_TEST_RESULTS_LOADING,\n    loading,\n  });\n  return true;\n}\n\nexport const setTestResultsLoading = (loading) => async dispatch => {\n  dispatch({\n    type: SET_TEST_DOCUMENTS_LOADING,\n    loading,\n  });\n  return true;\n}\n\n\nexport const runTestJobToNode = (targetNodeId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    \n    dispatch({\n      type: SET_TEST_LOADING,\n      loading: true,\n    });  \n    \n    try {\n  \n        let token = Cookies.get('token');\n        let response = await runJobToNode(getState().test_job.test_job.id, targetNodeId, token);       \n        console.log(\"Run job to node response: \", response);\n\n        if(response.status === 204) {\n            return true;\n        }\n      }\n      catch (error) { \n        dispatch(showErrorToast(\"Error start job to step: \"+error));\n        dispatch({\n          type: SET_TEST_LOADING,\n          loading: false,\n        });\n      }\n    }\n    else {\n      dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return false;\n  }\n  \n\nexport const requestCreateTestJobForPipeline = (pipelineId) => async(dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    \n    dispatch({\n      type: SET_TEST_LOADING,\n      loading: true,\n    });\n    \n    try {\n      let token = Cookies.get('token');\n      let response = await createTestJobForPipeline(pipelineId, token);      \n      if(response.status === 200) {\n        await dispatch({\n          type: RECEIVE_TEST_JOB,\n          test_job: response.data\n        });\n        return response.data;\n      }\n    }\n    catch (error) { \n      dispatch(showErrorToast(`Error creating test job for pipeline ID #${pipelineId}: ${error}`));\n      dispatch({\n        type: SET_TEST_LOADING,\n        loading: true,\n      });\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return false;\n}\n\nexport const refreshTestJob = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    \n    dispatch({\n      type: SET_TEST_LOADING,\n      loading: true,\n    });\n    \n    try {\n      let token = Cookies.get('token');\n      let response = await getJobById(getState().test_job.test_job.id, token);   \n      if (response.status === 200) {\n        dispatch({\n          type: RECEIVE_TEST_JOB,\n          test_job: response.data\n        });\n        return Promise.resolve(true);\n      } \n      else{\n        dispatch(showErrorToast(\"Unable to refresh test job: \", getState().test_job.test_job.id));\n      }  \n    } \n    catch (error) {      \n      dispatch(showErrorToast(\"Error trying to update selected job: \"+error));\n      dispatch({\n        type: SET_TEST_LOADING,\n        loading: false,\n      });\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const fetchTestDocuments = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_TEST_DOCUMENTS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      const jobId = getState().test_job.test_job.id;\n      const {document_page} = getState().test_job;\n\n      let response = await getDocumentsForJob(jobId, document_page, token);\n      if(response.status===200) {\n        dispatch({\n              type: RECEIVE_TEST_DOCUMENTS,\n              response: response,\n        });\n        return Promise.resolve(true);\n      }\n    }    \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching test documents: \"+error));\n      dispatch({\n        type: SET_TEST_DOCUMENTS_LOADING,\n        loading: false\n      });\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const uploadTestDocument = (file) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    \n    try {\n\n      dispatch({\n        type: SET_TEST_DOCUMENTS_LOADING,\n        loading: true\n      })\n\n      let response = await uploadDocumentRequest(file, getState().test_job.test_job.id, Cookies.get('token'));\n      if (response.status===200) {\n        \n        dispatch({\n          type: SET_TEST_DOCUMENTS_LOADING,\n          loading: false\n        })\n\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      if (error.response) {\n        dispatch(showErrorToast(error.response.data.message));\n      } else {\n        dispatch(showErrorToast('Something went wrong while uploading test file'));\n      }\n    }\n  }\n  return Promise.resolve(false);\n}\n\nexport const updateTestJob = (updatedJobObj) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    \n    dispatch({\n      type: SET_TEST_LOADING,\n      updatedJob: true\n    });\n\n    try {\n      let token = Cookies.get('token');\n      let response = await updateJobRequest(updatedJobObj, token);   \n      if (response.status === 200) {\n        dispatch({\n          type: UPDATE_TEST_JOB,\n          updatedJob: response.data\n        });\n        return Promise.resolve(true);\n      } \n      else{\n        dispatch(showErrorToast(\"Unable to refresh test job with Id: \", getState().job.id));\n      }  \n    } \n    catch (error) {      \n      dispatch(showErrorToast(\"Error trying to update test job: \"+error));\n      dispatch({\n        type: SET_TEST_LOADING,\n        updatedJob: false\n      });\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport function setTestResultPage(selectedPage) {\n  return {\n    type: SET_TEST_RESULT_PAGE,\n    selectedPage\n  }\n}\n\nexport const setTestDocumentPage = (selectedPage) => dispatch => {\n  dispatch({\n    type: SET_TEST_DOCUMENT_PAGE,\n    selectedPage\n  });\n  return Promise.resolve(true);\n}\n\nexport const clearTestData = () => async (dispatch) => {\n  dispatch({\n    type: CLEAR_TEST_DATA,\n  });\n  return true;\n}\n\nexport const requestTestJobLog = () => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      let token = Cookies.get('token');\n      let jobId = getState().test_job.id;\n\n      dispatch({\n        type: SET_TEST_JOB_LOG_LOADING,\n        loading: true\n      })\n\n      let response = await getJobLogs(jobId, token);\n\n      if(response.status===200) {\n        dispatch({\n          type: SET_TEST_JOB_LOG,\n          log: response.data.log,\n        });\n      }\n      return Promise.resolve(true);\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch test job log: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const requestTestJobStepLog = (jobId, stepId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      \n      dispatch({\n        type: SET_TEST_JOB_LOG_LOADING,\n        loading: true\n      })\n\n      let token = Cookies.get('token');\n      let response = await getJobStepLogs(jobId, stepId, token);\n      if(response.status===200) {\n        dispatch({\n          type: ADD_TEST_JOB_STEP_LOG,\n          log: response.data.log,\n          stepId\n        });\n      }\n      return Promise.resolve(true);\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch test job step log: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport function clearTestJobLogs() {\n  return {\n    type: CLEAR_TEST_JOB_LOGS,\n  }\n}\n\n/*\n* RESULTS\n* action creators\n*/\n\nexport const tryTestNewTransformForStepResult = (resultId, transform) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    \n    dispatch({\n      type: SET_TEST_TRANSFORM_LOADING,\n      loading: true\n    });\n    \n    try {\n      \n      let token = Cookies.get('token');\n      let response = await testNewTransformForStepResult(resultId, transform, token);\n      console.log(\"Response is: \", response);\n      if(response.status===200) {\n        dispatch({\n          type: RECEIVE_TEST_TRANSFORM,\n          resultId,\n          transformed_input: response.data.output_data\n        });\n      }\n      return Promise.resolve(true);\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to test transform: \"+error));\n      dispatch({\n        type: SET_TEST_TRANSFORM_LOADING,\n        loading: false\n      });\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n} \n\nexport const selectResultPage = (selectedPage) => async (dispatch) => {\n  return dispatch({\n    type: CHANGE_RESULT_PAGE,\n    selectedPage\n  });\n};\n\nexport function selectResult(selectedResultId) {\n  return {\n    type: SELECT_RESULT,\n    selectedResultId\n  }\n}\n\nexport const downloadSelectedResult = (resultId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await downloadResult(resultId, token);\n                              \n      if(response.status === 200) {\n          // Try to find out the filename from the content disposition `filename` value\n          var filename = response.headers['filename'];\n\n          // The actual download\n          var blob = new Blob([response.data], { type: response.headers['content-type'] });\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.download = filename;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n      }\n    }\n    catch (error) { \n      dispatch(showErrorToast(\"Error trying to download result: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve();\n}\n\nexport const clearResults = () => async (dispatch) => {\n  dispatch({\n    type: CLEAR_RESULTS,\n  });\n  return true;\n}\n\nexport const fetchResults = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      \n      dispatch({\n        type: SET_RESULTS_LOADING,\n        loading:true\n      })\n\n      const { selectedPage, searchString,  } = getState().results;\n      \n      let token = Cookies.get('token');\n      let response = await getResultsRequest(selectedPage, searchString, token);\n\n      // If we got the right response, handle results and return promise that resolves to true\n      if(response.status===200) {\n        dispatch({\n          type: RECEIVE_RESULTS,\n          response,\n        });\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch results: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n} \n\nexport const fetchSummaryResultsForJob = (jobId) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n      \n      dispatch({\n        type: SET_RESULTS_LOADING,\n        loading:true\n      });\n\n      let token = Cookies.get('token');\n      let response = await getSummaryResultsForJob(jobId, token);\n      \n      if(response.status===200) {\n        dispatch({\n          type: RECEIVE_RESULTS,\n          response,\n        });\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch results: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const fetchFullResult = (resultId) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n      \n      dispatch({\n        type: SET_RESULTS_LOADING,\n        loading: true\n      })\n\n      let token = Cookies.get('token');\n      let response = await getFullResultById(resultId, token);\n      if(response.status===200) {\n        dispatch({\n          type: UPDATE_RESULT,\n          updatedResult: response.data,\n        });\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch full result: \"+error));\n      dispatch({\n        type: SET_RESULTS_LOADING,\n        loading: false\n      })\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const setResultsSearchString = (searchString) => async (dispatch) => {\n  return dispatch({\n    type: SET_RESULTS_SEARCH_STRING,\n    searchString\n  });\n};\n\n/*\n* python script creators\n*/\n\nexport const requestDeleteScript = (scriptId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await deletePythonScript(scriptId, token);\n      if(response.status===204){\n        dispatch(removeScript(scriptId));\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(`Error trying to delete script with ID #${scriptId}: `+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport function removeScript(scriptId){\n  return {\n    type: REMOVE_SCRIPT,\n    scriptId\n  };\n}\n\nexport const requestCreateScript = (name, type, script) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await createScript(name, type, script, token);\n\n      if (response.status===201) {\n        dispatch({\n          type: ADD_SCRIPT,\n          newScript: response.data\n        });\n        return Promise.resolve(true);\n      }\n      else {\n        dispatch(showErrorToast(\"Unable to create new script with name: \"+name));\n      }\n      return Promise.resolve(false);  \n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error creating new script: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n}\n\nexport const requestUpdateScript = (scriptObj) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_SCRIPTS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      let response = await updateScript(scriptObj, token);\n\n      if (response.status===200) {\n        dispatch(updateSingleScript(response.data));\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) { \n      dispatch(showErrorToast(\"Error updating script: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n\n  dispatch({\n    type: SET_SCRIPTS_LOADING,\n    loading: false\n  });\n\n  return Promise.resolve(false);\n}\n\n// Given script json, merge its fields into existing script obj in store, overwriting fields with fresh data\n// but leaving existing fields untouched (And existant) where new obj doesn't have that field (so that we \n// can continue to handle script detail fetching as it works now where we initially load a json of all script\n// summaries BUT, when we click on a script to show the user the details, we load the more data expensive \n// details and \nexport function updateSingleScript(updatedScript) {\n  return {\n    type: UPDATE_SCRIPT,\n    updatedScript\n  };\n}\n\nexport function receiveScripts(response) {\n  return {\n    type: RECEIVE_SCRIPTS,\n    response,\n    receivedAt: Date.now()\n  };\n}\n\nexport const refreshScriptById = (scriptId) => async(dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      let token = Cookies.get('token');\n      let response = await getPythonScriptById(scriptId, token);\n      console.log(\"Response from refreshScriptById: \", response);\n\n      if (response.status===200) {\n        dispatch(updateSingleScript(response.data));\n        return Promise.resolve(true);\n      }  \n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching scripts: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const fetchPipelineScripts = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_SCRIPTS_LOADING,\n        loading:true\n      })\n\n      let token = Cookies.get('token');\n      let response = await getPipelineScripts(getState().pipelines.selectedPipelineId, token);\n\n      if (response.status===200) {\n        dispatch(receiveScripts(response));\n        return Promise.resolve(true);\n      }  \n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching scripts for pipeline: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n\n  dispatch({\n    type: SET_SCRIPTS_LOADING,\n    loading:false\n  })\n  return Promise.resolve(false);\n}\n\nexport const fetchScripts = () => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_SCRIPTS_LOADING,\n        loading:true\n      })\n\n      let token = Cookies.get('token');\n      let response = await getAllPythonScripts(token);\n      if (response.status===200) {\n        dispatch(receiveScripts(response));\n        return Promise.resolve(true);\n      }  \n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching scripts: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n\n  dispatch({\n    type: SET_SCRIPTS_LOADING,\n    loading:false\n  })\n  return Promise.resolve(false);\n}\n\nexport const selectScript = (selectedScriptId) => dispatch => {\n  dispatch({\n    type: SELECT_SCRIPT,\n    selectedScriptId\n  });\n  return Promise.resolve(true);\n}\n\nexport const clearSelectedScript = () => dispatch => {\n  dispatch({\n    type: CLEAR_SELECTED_SCRIPT,\n  });\n  return Promise.resolve(true);\n}\n\nexport function receiveScriptDetails(response) {\n  return {\n    type: RECEIVE_SCRIPT_DETAILS,\n    response,\n  }\n}\n\nexport const requestDownloadPythonScript = (scriptId) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await downloadPythonScript(scriptId, token);\n                              \n      if(response.status === 200) {\n          // Try to find out the filename from the content disposition `filename` value\n          var filename = response.headers['filename'];\n\n          // The actual download\n          var blob = new Blob([response.data], { type: response.headers['content-type'] });\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.download = filename;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          return Promise.resolve(true);\n      }\n    }\n    catch (error) { \n      dispatch(showErrorToast(`Error trying to export script ID${scriptId}: ${error}`));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\n// Try to upload a script archive. NOTE - on success the selected script will be changed to id of new script.\nexport const requestUploadPythonScript = (file) => async (dispatch, getState) => {\n\n  if (getState().auth.loggedIn) {\n    try {\n      dispatch({\n        type: SET_SCRIPTS_LOADING,\n        loading:true\n      })\n      let response = await uploadPythonScript(file, Cookies.get('token'));\n      if (response.status===200) {\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      if (error.response) {\n        dispatch(showErrorToast(error.response.data.message));\n      } else {\n        dispatch(showErrorToast('Something went wrong while uploading this script'));\n      }\n    }\n  }\n  dispatch({\n    type: SET_SCRIPTS_LOADING,\n    loading: false\n  });\n  return Promise.resolve(false);\n}\n\nexport const fetchSelectedScriptDetails = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_SCRIPT_DETAILS_LOADING,\n        loading:true\n      });\n\n      let token = Cookies.get('token');\n      let response = await getPythonScriptDetails(token, getState().scripts.selectedScriptId);\n      if (response.status===200) {\n        dispatch(receiveScriptDetails(response));\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching script details: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n\n  dispatch({\n    type: SET_SCRIPT_DETAILS_LOADING,\n    loading:false\n  });\n\n}\n\n\n\n/*\n* SYSTEM STATUS\n* action creators\n*/\nexport const fetchSystemStats = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn && getState().auth.user.role !== 'LAWYER') {\n    try {\n      \n      dispatch({\n        type: SET_STATS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      let response = await getSystemStats(token);\n      console.log(\"Stats response\", response);\n      if (response.status===200) {\n        dispatch({\n          type: RECEIVE_STATS, \n          stats: response.data\n        })\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching script details: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not authorized!\"));\n  }\n  \n  dispatch({\n    type: SET_STATS_LOADING,\n    loading: false\n  });\n\n  return Promise.resolve(false);\n}\n\nexport const clearStats = () => dispatch => {\n  dispatch({\n    type: CLEAR_STATS\n  });\n  return Promise.resolve(true);\n}\n\nexport const setStatsLoading = (loading) => dispatch => {\n  dispatch({\n    type: SET_STATS_LOADING,\n    loading\n  });\n  return Promise.resolve(true);\n}\n\n","import Cookies from 'js-cookie'\n\nimport { \n  showErrorToast,\n} from './app_actions';\n\nimport {\n    getPipelineSteps,\n    getPipelineStepsForPipeline,\n    updatePipelineStep,\n    getPipelineStepById,\n    createPipelineStep,\n    deletePipelineStep,\n} from '../Api/api';\n\n/*\n* Pipeline Steps\n* Action constants\n*/\nexport const ADD_PIPELINENODE = 'ADD_PIPELINENODE';\nexport const RECEIVE_PIPELINENODES = 'RECIEVE_PIPELINENODES';\nexport const UPDATE_PIPELINENODE = 'UPDATE_PIPELINENODE';\nexport const REMOVE_PIPELINENODE = 'REMOVE_PIPELINENODE';\nexport const CLEAR_PIPELINENODES = 'CLEAR_PIPELINENODES';\nexport const SELECT_PIPELINENODE = 'SELECT_PIPELINENODE';\nexport const CLEAR_SELECTED_PIPELINENODE = 'CLEAR_SELECTED_PIPELINENODE';\nexport const SET_PIPELINENODES_LOADING = 'SET_PIPELINENODES_LOADING';\n\n\nexport const selectPipelineStep = (selectedPipelineStepId) => dispatch => {\n    dispatch({\n        type: SELECT_PIPELINENODE,\n        selectedPipelineStepId\n    });\n    return Promise.resolve(true);\n}\n  \nexport const clearSelectedPipelineNode = () => dispatch => {\n    dispatch({\n        type: CLEAR_SELECTED_PIPELINENODE\n    });\n    return Promise.resolve(true);\n}\n\nexport function clearPipelineStep() {\n    return {\n        type: CLEAR_PIPELINENODES,\n    }\n}\n\nexport function receivePipelineSteps(response) {\n    return {\n        type: RECEIVE_PIPELINENODES,\n        response,\n    }\n}\n\nexport function removePipelineStep(pipelineStepId) {\n    return {\n        type: REMOVE_PIPELINENODE,\n        pipelineStepId: pipelineStepId\n    }\n}\n\nexport const addPipelineNode = (node) => async (dispatch) => {\n    console.log(\"addPipelineNode\");\n    await dispatch({\n        type: ADD_PIPELINENODE,\n        newPipelineStep: node,\n    });\n    return node;\n}\n\nexport const requestAddPipelineNode = (name, script, step_settings) => async (dispatch, getState) => {\n    console.log(\"requestAddPipelineNode\", name, script, step_settings)\n    if (getState().auth.loggedIn) {\n        try {\n            let token = Cookies.get('token');\n            let response = await createPipelineStep({name, script, parent_pipeline: getState().pipelines.selectedPipelineId, step_settings: JSON.stringify(step_settings)}, token);\n            console.log(\"requestAddPipelineNode response:\", response);\n            if (response.status === 201) {\n                console.log(\"Success\");\n                let data = await dispatch(addPipelineNode(response.data));\n                console.log(\"Successfully added addPipelineNode and response is\", data);\n                return data;\n            }\n        }\n        catch (error) {\n            dispatch(showErrorToast(\"Error adding node to pipeline: \"+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return false;\n}\n\n//TODO - this is duplicative with above and neither isreally multipurpose. Replace with a single method that accepts object.\nexport const createNewPipelineStep = (name, scriptId, pipelineId, step_settings, step_number) => async (dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n        try {\n\n        let token = Cookies.get('token');\n        let response = await createPipelineStep({name, script: scriptId, parent_pipeline: pipelineId, step_settings: JSON.stringify(step_settings), step_number}, token);\n\n        if (response.status === 201) {\n            dispatch(fetchPipelineSteps()); //can't just add the step because other pipeline steps may have been changed. Need to refetch.\n        }\n        } \n        catch (error) {\n        dispatch(showErrorToast(\"Error creating new pipeline step: \"+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return Promise.resolve();\n}\n\nexport const requestDeletePipelineStep = (pipelineStepId) => async (dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n        try {\n        let token = Cookies.get('token');\n        let deleteResponse = await deletePipelineStep(pipelineStepId, token);\n        if (deleteResponse.status===204) {\n            dispatch(removePipelineStep(pipelineStepId));\n            return Promise.resolve();\n        }\n        } \n        catch (error) {\n        dispatch(showErrorToast(\"Error deleting pipeline step: \"+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n\n    return Promise.resolve();\n}\n\nexport const fetchPipelineStepsForPipeline = (targetPipelineId) => async(dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n        try {\n\n        dispatch({\n            type: SET_PIPELINENODES_LOADING,\n            loading:true\n        })\n\n        let token = Cookies.get('token');\n        let response = await getPipelineStepsForPipeline(targetPipelineId, token);\n        if (response.status===200) {\n            dispatch(receivePipelineSteps(response));\n        }\n        return Promise.resolve(true);\n\n        } \n        catch (error) { \n        dispatch(showErrorToast(\"Error fetching pipeline steps: \"+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return Promise.resolve(false);\n}\n\n\nexport const fetchPipelineSteps = () => async (dispatch, getState) => {\n\n    if (getState().auth.loggedIn) {\n        try {\n\n        dispatch({\n            type: SET_PIPELINENODES_LOADING,\n            loading:true\n        })\n\n        let token = Cookies.get('token');\n        let response = await getPipelineSteps(token);\n        if (response.status===200) {\n            dispatch(receivePipelineSteps(response));\n        }\n        return Promise.resolve(true);\n\n        } \n        catch (error) { \n        dispatch(showErrorToast(\"Error fetching pipeline steps: \"+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return Promise.resolve(false);\n}\n\nexport function handleUpdatePipelineStep(updatedPipelineStep){\n    return {\n        type: UPDATE_PIPELINENODE,\n        updatedPipelineStep\n    }\n}\n\nexport const requestRefreshPipelineStep = (pipelineStepId) => async (dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n        try {\n        let token = Cookies.get('token');\n        let response = await getPipelineStepById(pipelineStepId, token);\n        if (response.status===200) {\n            dispatch(handleUpdatePipelineStep(response.data));      \n        }\n        } \n        catch (error) { \n        dispatch(showErrorToast(`Error trying to refresh pipeline step with ID #${pipelineStepId}: `+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n}\n\nexport function refreshSelectedPipelineStep() {\n    return (dispatch, getState) => {\n        dispatch(requestRefreshPipelineStep(getState().pipelinesteps.selectedPipelineStepId));\n    }\n}\n\n//Pass the serialized settings for a job to the server. \nexport const requestUpdatePipelineStep = (pipelineStepObj) => async (dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n        try {\n            let token = Cookies.get('token');\n            let response = await updatePipelineStep(pipelineStepObj, token);\n\n            console.log(\"Pipeline step updated: \", response.data);\n\n            if (response.status===200) {\n                dispatch(handleUpdatePipelineStep(response.data));\n                return Promise.resolve(true);  \n            }\n            \n        } \n        catch (error) {\n        dispatch(showErrorToast(`Error trying to update settings for pipelinestep with ID #${pipelineStepObj.id}: `+error));\n        }\n    }\n    else {\n        dispatch(showErrorToast(\"Not logged in!\"));\n    }\n    return Promise.resolve(false);\n}\n","import Cookies from 'js-cookie'\n\nimport { \n  showErrorToast,\n} from './app_actions';\n\nimport {\n    requestCreatePipelineEdge,\n    requestDeletePipelineEdge,\n  } from '../Api/api';\n\n/*\n* Edge\n* Action constants\n*/\nexport const SELECT_EDGE = 'SELECT_EDGE';\nexport const UNSELECT_EDGE = 'UNSELECT_EDGE';\nexport const ADD_EDGE = 'ADD_EDGE';\nexport const RECEIVE_EDGES = 'RECEIVE_EDGES'; \nexport const UPDATE_EDGE = 'UPDATE_EDGE';\nexport const REMOVE_EDGE = 'REMOVE_EDGE';\nexport const CLEAR_EDGES = 'CLEAR_EDGE';\nexport const SET_EDGES_LOADING = 'SET_EDGES_LOADING';\n\n\nexport const removeEdge = (edgeId) => dispatch => {\n  console.log(\"Deleted edge: \",edgeId);\n  dispatch({\n    type: REMOVE_EDGE,\n    edgeId\n  });\n  return Promise.resolve(true);\n}\n\nexport const addEdge = (edge) => dispatch => {\n  dispatch({\n    type: ADD_EDGE,\n    edge\n  });\n  return Promise.resolve(true);\n}\n\nexport const createPipelineEdge = (edgeObj) => async (dispatch, getState) => {\n    console.log(\"createPipelineEdge\", edgeObj);\n    if (getState().auth.loggedIn) {\n      try {\n        let token = Cookies.get('token');\n        let response = await requestCreatePipelineEdge (edgeObj, token);\n\n        if (response.status===201) {\n          dispatch(addEdge(response.data));\n          return Promise.resolve(response.data);\n        }\n      }\n      catch (error) {\n        dispatch(showErrorToast(\"Error linking nodes: \"+error));\n      }\n    }\n    return Promise.resolve(false);\n  }\n  \n  export const deletePipelineEdge = (edgeId) => async (dispatch, getState) => {\n    if (getState().auth.loggedIn) {\n      try {\n        let token = Cookies.get('token');\n        let response = await requestDeletePipelineEdge(edgeId, token);\n        console.log(\"Response:\", response);\n        if (response.status===204) {\n          console.log(\"Deleted!\");\n          dispatch({\n            type: REMOVE_EDGE,\n            edgeId\n          });\n        }\n        else {\n          console.log(\"Not deleted\");\n        }\n      }\n      catch (error) {\n        dispatch(showErrorToast(\"Error deleting link: \"+error));\n      }\n  }\n    return Promise.resolve(false);\n  }","import Cookies from 'js-cookie'\n\nimport { \n  showErrorToast,\n} from './app_actions';\n\nimport {\n    uploadPipelineYAML,\n    updatePipeline,\n    createPipeline,\n    getPipelines,\n    getPipelineById,\n    getFullPipelineById,\n    exportPipelineYAML,\n    deletePipeline\n} from '../Api/api';\n\nimport { RECEIVE_PIPELINENODES } from './node_actions';\nimport { RECEIVE_EDGES } from './edge_actions'; \n\n/*\n* Pipelines\n* Action constants\n*/\n\nexport const ADD_PIPELINE = 'ADD_PIPELINE';\nexport const RECEIVE_PIPELINES = 'RECIEVE_PIPELINES';\nexport const RECEIVE_FULL_PIPELINE = 'RECEIVE_FULL_PIPELINE';\nexport const UPDATE_PIPELINE = 'UPDATE_PIPELINE';\nexport const REMOVE_PIPELINE = 'REMOVE_PIPELINE';\nexport const CLEAR_PIPELINES = 'CLEAR_PIPELINES';\nexport const SELECT_PIPELINE = 'SELECT_PIPELINE';\nexport const UNSELECT_PIPELINE = 'UNSELECT_PIPELINE';\nexport const SET_PIPELINES_LOADING = 'SET_PIPELINES_LOADING';\nexport const CHANGE_PIPELINE_PAGE = 'CHANGE_PIPELINE_PAGE';\nexport const SET_PIPELINE_SEARCH_STRING = 'SET_PIPELINE_NAME_FILTER';\n\n /*\n * PIPELINE\n * action creators\n */\n \n export const requestDeletePipeline = (pipelineId) => async (dispatch, getState) => {\n   if (getState().auth.loggedIn) {\n     try {\n       let token = Cookies.get('token');\n       let response = await deletePipeline(pipelineId, token);\n       if (response.status===204) {\n         return Promise.resolve(pipelineId);\n       }\n     } \n     catch (error) {\n       dispatch(showErrorToast(`Error trying to delete pipeline with ID #${pipelineId}: ${error}`));\n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n   return Promise.resolve(false);\n }\n \n export const requestDownloadPipelineYAML = (pipelineId) => async (dispatch, getState) => {\n   \n   if (getState().auth.loggedIn) {\n     try {\n       let token = Cookies.get('token');\n       let response = await exportPipelineYAML(pipelineId, token);\n                               \n       if(response.status === 200) {\n           // Try to find out the filename from the content disposition `filename` value\n           var filename = response.headers['filename'];\n \n           // The actual download\n           var blob = new Blob([response.data], { type: response.headers['content-type'] });\n           var link = document.createElement('a');\n           link.href = window.URL.createObjectURL(blob);\n           link.download = filename;\n           document.body.appendChild(link);\n           link.click();\n           document.body.removeChild(link);\n \n           return Promise.resolve(true);\n       }\n     }\n     catch (error) { \n       dispatch(showErrorToast(`Error trying to export pipeline ID${pipelineId}: ${error}`));\n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n   return Promise.resolve(false);\n }\n \n export const removePipeline = (pipelineId) => dispatch => {\n   dispatch({\n     type: REMOVE_PIPELINE,\n     pipelineId\n   });\n   return Promise.resolve(true);\n }\n \n export const selectPipelinePage = (selectedPage) => async (dispatch) => {\n   return dispatch({\n     type: CHANGE_PIPELINE_PAGE,\n     selectedPage\n   });\n };\n \n export const setPipelineSearchString = (pipelineSearchText) => async (dispatch) => {\n   return dispatch({\n     type: SET_PIPELINE_SEARCH_STRING,\n     pipelineSearchText\n   });\n };\n \n export const loadFullPipeline = (id) => async (dispatch, getState) => { \n   console.log(\"loadFullPipeline\");\n    if (getState().auth.loggedIn) {\n     try {\n       let token = Cookies.get('token');\n       let response = await getFullPipelineById(id, token);\n       console.log(\"response is: \", response);\n       if (response.status===200) {\n         dispatch({\n           type: UPDATE_PIPELINE,\n           updatedPipeline: response.data,\n         });\n         dispatch({\n           type: RECEIVE_PIPELINENODES,\n           items: response.data.nodes\n         });\n         dispatch({\n           type: RECEIVE_EDGES,\n           items: response.data.edges\n         });\n         return Promise.resolve(true); \n       }\n     }\n     catch (error) {\n       console.log(\"Can't load\", error);\n       dispatch(showErrorToast(`Error loading pipeline #${id}`));\n     }\n   }\n   return Promise.resolve(false);\n }\n \n export const selectPipeline = (selectedPipelineId) => async dispatch => {\n    dispatch({\n      type: SELECT_PIPELINE,\n      selectedPipelineId\n    });\n   return true\n }\n \n export const updateSinglePipeline = (updatedPipeline) => async dispatch => {\n   dispatch({\n     type: UPDATE_PIPELINE,\n     updatedPipeline\n   });\n   return true;\n }\n \n export function clearPipelines() {\n   return {\n     type: CLEAR_PIPELINES,\n   }\n }\n \n export function receivePipelines(response) {\n   return {\n     type: RECEIVE_PIPELINES,\n     response,\n     receivedAt: Date.now()\n   }\n }\n \n export const requestCreatePipeline = (pipelineObj) => async (dispatch, getState) => {\n   if (getState().auth.loggedIn) {\n     try {\n       let token = Cookies.get('token');\n       let response = await createPipeline(pipelineObj, token);\n       if (response.status===201) {\n         dispatch({\n           type: ADD_PIPELINE,\n           newPipeline: response.data\n         });\n       }\n     } \n     catch (error) {\n       dispatch(showErrorToast(\"Error creating pipeline: \"+error));\n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n }\n \n export const fetchPipelines = () => async (dispatch, getState) => {\n   \n   if (getState().auth.loggedIn) {\n     try {\n \n       dispatch({\n         type: SET_PIPELINES_LOADING,\n         loading: true\n       });\n \n       let token = Cookies.get('token');\n       let response = await getPipelines(getState().pipelines.pipelineNameFilter, \n                                         getState().pipelines.selectedPage,\n                                         token);\n       if (response.status===200) {\n         dispatch(receivePipelines(response));\n         return Promise.resolve(true);\n       }\n     } \n     catch (error) {\n       dispatch(showErrorToast(\"Error fetching pipelines: \"+error));\n       dispatch({\n         type: SET_PIPELINES_LOADING,\n         loading: false\n       })  \n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n \n   return Promise.resolve(false);\n \n }\n \n // This is basically the same as requestUpdatePipelineStep except it takes the scaleObj parameters, mergers them \n // into the selectedDigraph (which I know we can do view data (not nodes and edges)) in anticipating of update. If the network\n // request for the update fails, this is rolled back.\n export const requestScalePipeline = (scaleObj) => async(dispatch, getState) => {\n   // todo - do something\n }\n \n // This is basically the same as requestUpdatePipeline except it takes the moveObj parameters, mergers them \n // into the selectedDigraph (which I know we can do for x, y coords) in anticipating of update. If the network\n // request for the update fails, this is rolled back.\n export const requestMovePipeline = (offsetValues) => async(dispatch, getState) => {\n   // todo - do something\n }\n \n export const requestUpdatePipeline = (pipelineObj) => async (dispatch, getState) => {\n   \n   if (getState().auth.loggedIn) {\n     try {\n \n       dispatch({\n         type: SET_PIPELINES_LOADING,\n         loading:true\n       });\n \n       let token = Cookies.get('token');\n       let response = await updatePipeline(pipelineObj, token);\n \n       if (response.status===200) {\n         dispatch(updateSinglePipeline(pipelineObj));\n         return Promise.resolve(true);\n       }\n     } \n     catch (error) {\n       dispatch(showErrorToast(\"Error updating pipeline: \"+error));\n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n \n   dispatch({\n     type: SET_PIPELINES_LOADING,\n     loading: false\n   });\n \n   return Promise.resolve(false);\n }\n \n export const refreshPipeline = (pipelineId) => async (dispatch, getState) => {\n   if (getState().auth.loggedIn) {\n     try {\n       let token = Cookies.get('token');\n       let response = await getPipelineById(pipelineId, token);\n       if(response.status===200){\n         dispatch(updateSinglePipeline(response.data));\n         return Promise.resolve(false);\n       }\n     } \n     catch (error) {\n       dispatch(showErrorToast(\"Error refreshing pipeline: \"+error));\n     }\n   }\n   else {\n     dispatch(showErrorToast(\"Not logged in!\"));\n   }\n   return Promise.resolve(false);\n }\n \n // Try to upload a script archive. NOTE - on success the selected script will be changed to id of new script.\n export const requestUploadPipelineYAML = (file) => async (dispatch, getState) => {\n \n   if (getState().auth.loggedIn) {\n     try {\n       \n       dispatch({\n         type: SET_PIPELINES_LOADING,\n         loading:true\n       });\n \n       let response = await uploadPipelineYAML(file, Cookies.get('token'));\n \n       if (response.status===200) {\n         dispatch({\n           type: ADD_PIPELINE,\n           newPipeline: response.data\n         });\n         return Promise.resolve(true);\n       }\n     } \n     catch (error) {\n \n       dispatch({\n         type: SET_PIPELINES_LOADING,\n         loading:false\n       });\n \n       if (error.response) {\n         dispatch(showErrorToast(error.response.data.message));\n       } else {\n         dispatch(showErrorToast('Something went wrong while uploading this pipeline'));\n       }\n     }\n   }\n   return Promise.resolve(false);\n }\n \n \n /*\n * PIPELINE STEP \n * action creators\n */\n \n export const unselectPipeline = () => dispatch => {\n   dispatch({\n     type: UNSELECT_PIPELINE\n   });\n   return Promise.resolve(true);\n }\n ","import Cookies from 'js-cookie'\n\nimport { \n  showSuccessToast,\n  showErrorToast\n} from './app_actions';\n\nimport {\n    loginForJWTToken,\n    refreshJWTToken,\n    requestUserDetails,\n    changePasswordRequest,\n    resetPasswordRequest,\n    recoverUsernameRequest,\n    createNewUser,\n    deleteUserRequest,\n    changeUserPermissions,\n    getUsers\n  } from '../Api/api';\n\n/*\n* Authorization / User\n* Action constants\n*/\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAIURE';\nexport const LOGOUT = 'LOGOUT';\nexport const RECEIVE_USER = 'RECEIVE_USER';\nexport const ADD_USER = 'ADD_USER';\nexport const RECEIVE_USERS = 'RECEIVE_USERS'; \nexport const REMOVE_USER = 'REMOVE_USER';\nexport const CLEAR_USERS = 'CLEAR_USERS';\nexport const CHANGE_USER_PAGE = 'CHANGE_USER_PAGE';\nexport const SET_USERS_LOADING = 'SET_USERS_LOADING';\nexport const SET_USER_NAME_FILTER = 'SET_USER_NAME_FILTER';\nexport const SET_USER_ROLE_FILTER = 'SET_USER_ROLE_FILTER';\n\n/*\n* AUTH\n* action creators\n*/\n\nexport const tryRefresh = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n\n    try {\n      let refreshToken = Cookies.get('refreshToken');\n      let results = await refreshJWTToken(refreshToken);\n      \n      //Refresh success\n      if (results.data.hasOwnProperty('access')) {   \n        Cookies.set('token', results.data.access);\n        return Promise.resolve(true);\n      }\n      //If we didn't get a new access token, something is wrong. Logout and tell user.\n      else{\n        \n        dispatch({\n          type: LOGIN_FAILURE,\n          error: results\n        })\n    \n        //remove cookies\n        Cookies.remove('token');\n        Cookies.remove('refreshToken');\n    \n        dispatch(showErrorToast(\"Try logging out and logging in again. Auth credentials are invalid.\"));\n      }\n    }\n\n    // On refresh failure, log the user out and show them a message.\n    catch (error) {\n    \n      dispatch({\n        type: LOGIN_FAILURE,\n        error\n      });\n\n      Cookies.remove('token');\n      Cookies.remove('refreshToken');\n\n      dispatch(showErrorToast(\"Try logging out and logging in again. Auth credentials are invalid.\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const tryLogin = (username, password) => async dispatch => {\n  try {\n\n    let results = await loginForJWTToken(username, password);\n\n    //Login success\n    if (results.data.hasOwnProperty('access') & results.data.hasOwnProperty('refresh')) {\n      \n      dispatch({\n        type: LOGIN_SUCCESS,\n        username\n      });\n\n      Cookies.set('token', results.data.access);\n      Cookies.set('refreshToken', results.data.refresh);\n\n    }\n    //Login failure\n    else{\n      \n      dispatch({\n        type: LOGIN_FAILURE,\n        error: results\n      })\n\n      //remove cookies\n      Cookies.remove('token');\n      Cookies.remove('refreshToken');\n    }\n    return Promise.resolve(true);\n  } \n  catch (error) {\n    \n    //Remove any JWT tokens from cookies.\n    Cookies.remove('token');\n    Cookies.remove('refreshToken');\n\n    dispatch(showErrorToast(\"Error trying to login.\"));\n\n    dispatch({\n      type: LOGIN_FAILURE,\n      error\n    })\n  }\n  return Promise.resolve(false);\n}\n\nexport const getUserDetails = () => async dispatch => {\n  try {\n\n    let token = Cookies.get('token');\n    let result = await requestUserDetails(token);\n\n    //Login success\n    if (result.status===200) {\n      \n      dispatch({\n        type: RECEIVE_USER,\n        user: result.data\n      });\n    \n    }\n    else{\n      \n      dispatch({\n        type: LOGIN_FAILURE,\n        error: result\n      })\n\n      //remove cookies\n      Cookies.remove('token');\n      Cookies.remove('refreshToken');\n    }\n  } \n  catch (error) {\n    \n    //Remove any JWT tokens from cookies.\n    Cookies.remove('token');\n    Cookies.remove('refreshToken');\n\n    dispatch(showErrorToast(\"Error trying to login.\"));\n\n    dispatch({\n      type: LOGIN_FAILURE,\n      error\n    })\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(true);\n}\n\nexport function tryLogout() {\n  \n  //Remove any JWT tokens from cookies.\n  Cookies.remove('token');\n  Cookies.remove('refreshToken');\n\n  return {\n    type: LOGOUT,\n    password: '',\n    username: '',\n    loggedIn: false,\n    token: '',\n    refreshToken: ''\n  }\n}\n\nexport const changePassword = (old_password, new_password) => async(dispatch, getState) => {\n  console.log(\"changePassword\");\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await changePasswordRequest(old_password, new_password, token);\n      if (response.status===204) {\n        dispatch(showSuccessToast(`Password successfully changed.`));\n        return Promise.resolve(true);      \n      }\n      else {\n        dispatch(showErrorToast(`Unable to change password.`));\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(`Error trying to change password.`));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const resetPassword = (username) => async(dispatch, getState) => {\n  try {\n  \n    let response = await resetPasswordRequest(username);\n    if (response.status===200) {\n      dispatch(showSuccessToast(`Please check the e-mail associated with account \"${username}\"`));\n      return Promise.resolve(true);      \n    }\n    else {\n      dispatch(showErrorToast(`Unable to reset password for: ${username}`));\n    }\n  } \n  catch (error) {\n    dispatch(showErrorToast(`Error trying to reset password: ${error.response.data.message}`));\n  }\n  return Promise.resolve(false);\n}\n\nexport const recoverUsername = (email) => async (dispatch, getState) => {\n  try {\n  \n    let response = await recoverUsernameRequest(email);\n    if (response.status===200) {\n      dispatch(showSuccessToast(`Please check your e-mail, ${email}`));\n      return Promise.resolve(true);      \n    }\n    else {\n      dispatch(showErrorToast(`Unable to recover username for given email: ${email}`));\n    }\n  } \n  catch (error) {\n    dispatch(showErrorToast(`Error trying to recover username with values: ${error.response.data.message}`));\n  }\n  return Promise.resolve(false);\n}\n\nexport const inviteNewUser = (userDetails) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n    \n      let token = Cookies.get('token');\n      let response = await createNewUser(userDetails, token);\n      console.log(\"Invite new user response: \", response);\n      if (response.status===200) {\n        dispatch(fetchUsers());\n        return Promise.resolve(true);      \n      }\n      else {\n        dispatch(showErrorToast(`Unable to invite user with values: ${userDetails}`));\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(`Unable to create this user: ${error.response.data.message}`));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const requestDeleteUserRequest = (userId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n    \n      let token = Cookies.get('token');\n      console.log(`Trying to delete user ID ${userId}`);\n      let response = await deleteUserRequest(userId, token);\n      console.log(\"Respose\", response);\n      if (response.status===204) {\n        console.log(\"Delete success\");\n        return dispatch(fetchUsers());\n      }\n      else {\n        dispatch(showErrorToast(`Unable to delete user with ID ${userId}`));\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(`Error trying to delete user with ID #${userId}`, error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const selectUserPage = (selectedPage) => async (dispatch) => {\n  return dispatch({\n    type: CHANGE_USER_PAGE,\n    selectedPage\n  });\n};\n\nexport const setUserNameFilter = (searchText) => async (dispatch) => {\n  return dispatch({\n    type: SET_USER_NAME_FILTER,\n    searchText\n  });\n};\n\nexport const setUserRoleFilter = (searchRole) => async (dispatch) => {\n  return dispatch({\n    type: SET_USER_ROLE_FILTER,\n    searchRole\n  });\n};\n\nexport const clearUsers = () => async (dispatch) => {\n  return dispatch({\n    type: CLEAR_USERS,\n  });\n}\n\nexport const receiveUsers = (response) => async (dispatch) => {\n  return dispatch({\n    type: RECEIVE_USERS,\n    response: response,\n  });\n}\n\nexport const requestChangeUserPermissions = (userId, role) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_USERS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      let response = await changeUserPermissions(userId, role, token);\n\n      if(response.status===200) {\n        dispatch({\n          type: SET_USERS_LOADING,\n          loading: false\n        });\n        return Promise.resolve(true);\n      }\n    }    \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching users: \" + error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const fetchUsers = () => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_USERS_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      const {selectedPage, searchText, searchRole} = getState().users;\n\n      let response = await getUsers(selectedPage, searchText, searchRole, token);\n\n      if(response.status===200) {\n        dispatch(receiveUsers(response.data));\n        return Promise.resolve(true);\n      }\n    }    \n    catch (error) {\n      dispatch(showErrorToast(\"Error fetching users: \" + error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n","import Cookies from 'js-cookie'\n\nimport { \n  showErrorToast,\n} from './app_actions';\n\n/*\n* API Call Imports\n*/\nimport {\n  deleteJobRequest,\n  downloadJob,\n  getJobStepLogs,\n  getJobLogs,\n  getJobs,\n  createJobRequest,\n  getJobById,\n  updateJobRequest,\n} from '../Api/api';\n\n/*\n* Jobs\n* Action constants\n*/\nexport const ADD_JOB = 'ADD_JOB';\nexport const RECEIVE_JOBS = 'RECIEVE_JOBS';\nexport const UPDATE_JOB = 'UPDATE_JOB';\nexport const REMOVE_JOB = 'REMOVE_JOB';\nexport const CLEAR_JOBS = 'CLEAR_JOBS';\nexport const SELECT_JOB = 'SELECT_JOB';\nexport const UNSELECT_JOB = 'UNSELECT_JOB';\nexport const CLEAR_SELECTED_JOB = 'CLEAR_SELECTED_JOB';\nexport const CHANGE_JOB_PAGE = 'CHANGE_JOB_PAGE';\nexport const SET_JOB_SEARCH_STRING = 'SET_JOB_SEARCH_STRING';\nexport const SET_JOBS_LOADING = 'SET_JOBS_LOADING';\nexport const SET_JOB_LOG_LOADING = 'SET_JOB_LOG_LOADING';\nexport const CLEAR_JOB_LOGS = 'CLEAR_JOB_LOGS';\nexport const ADD_JOB_STEP_LOG = 'ADD_JOB_STEP_LOG';\nexport const SET_JOB_LOG = 'SET_JOB_LOG';\n\n/*\n* JOB\n* Action creators\n*/\n\nexport const selectJob = (selectedJobId) => async dispatch => {\n  dispatch({\n    type: SELECT_JOB,\n    selectedJobId\n  });\n  return true;\n}\n\nexport const unselectJob = () => dispatch => {\n    dispatch({\n      type: UNSELECT_JOB,\n    });\n    return Promise.resolve(true);\n  }\n\nexport const clearJobs = () => dispatch => {\n  dispatch({\n    type: CLEAR_JOBS\n  });\n  return Promise.resolve(true);\n}\n\nexport const refreshSelectedJob = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await getJobById(getState().jobs.selectedJobId, token);   \n      if (response.status === 200) {\n        dispatch({\n          type: UPDATE_JOB,\n          updatedJob: response.data\n        });\n        return Promise.resolve(true);\n      } \n      else{\n        dispatch(showErrorToast(\"Unable to update job with ID #\", getState().jobs.selectedJobId));\n      }  \n    } \n    catch (error) {      \n      dispatch(showErrorToast(\"Error trying to update selected job\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const downloadJobResultsById = (jobId) => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await downloadJob(jobId, token);\n                              \n      if(response.status === 200) {\n          // Try to find out the filename from the content disposition `filename` value\n          var filename = response.headers['filename'];\n\n          // The actual download\n          var blob = new Blob([response.data], { type: response.headers['content-type'] });\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          link.download = filename;\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n\n          return Promise.resolve(true);\n      }\n    }\n    catch (error) { \n      dispatch(showErrorToast(\"Error trying to download selected job's results\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const createJob = (jobObj) => async(dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await createJobRequest(jobObj, token);      \n      \n      if(response.status === 201) {\n        dispatch({\n          type: ADD_JOB,\n          newJob: response.data\n        });\n        return Promise.resolve(response.data);\n      }\n    }\n    catch (error) { \n      dispatch(showErrorToast(\"Error creating job\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const fetchJobs = () => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_JOBS_LOADING,\n        loading: true\n      });\n      \n      let { selectedPage, searchString } = getState().jobs;\n      let token = Cookies.get('token');\n      let response = await getJobs(selectedPage, searchString, token);       \n      \n      if(response.status && response.status === 200) {\n        dispatch({\n            type: RECEIVE_JOBS,\n            response\n          });\n          return Promise.resolve(true);\n      } \n    }\n    catch (error) { \n      dispatch(showErrorToast(\"Error getting jobs\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const setJobSearchString = (searchString) => async (dispatch) => {\n  return dispatch({\n    type: SET_JOB_SEARCH_STRING,\n    searchString\n  });\n};\n\nexport const selectJobPage = (selectedPage) => async (dispatch) => {\n  return dispatch({\n    type: CHANGE_JOB_PAGE,\n    selectedPage\n  });\n};\n\nexport const updateJob = (updatedJobObj) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      let token = Cookies.get('token');\n      let response = await updateJobRequest(updatedJobObj, token);   \n      if (response.status === 200) {\n        dispatch({\n          type: UPDATE_JOB,\n          updatedJob: response.data\n        });\n        return Promise.resolve(true);\n      } \n      else{\n        dispatch(showErrorToast(\"Unable to update job\"));\n      }  \n    } \n    catch (error) {      \n      dispatch(showErrorToast(\"Error updating job.\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const deleteJob = (jobId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n    \n      let token = Cookies.get('token');\n      let response = await deleteJobRequest(jobId, token);\n        \n      if(response.status === 204) {        \n        dispatch({\n          type: REMOVE_JOB,\n          jobId\n        });\n        return Promise.resolve(true);\n      }\n    }\n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to delete job: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}\n\nexport const requestSelectedJobLog = () => async (dispatch, getState) => {\n  \n  if (getState().auth.loggedIn) {\n    try {\n\n      dispatch({\n        type: SET_JOB_LOG_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      let jobId = getState().jobs.selectedJobId;\n\n      let response = await getJobLogs(jobId, token);\n\n      if(response.status===200) {\n        dispatch({\n          type: SET_JOB_LOG,\n          log: response.data.log,\n        });\n      }\n      return Promise.resolve(true);\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch log: \"+error));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false); \n}\n\nexport function clearJobLogs() {\n  return {\n    type: CLEAR_JOB_LOGS,\n  }\n}\n\nexport const requestJobStepLogs = (jobId, stepId) => async (dispatch, getState) => {\n  if (getState().auth.loggedIn) {\n    try {\n      \n      dispatch({\n        type: SET_JOB_LOG_LOADING,\n        loading: true\n      });\n\n      let token = Cookies.get('token');\n      let response = await getJobStepLogs(jobId, stepId, token);\n      if(response.status===200) {\n        dispatch({\n          type: ADD_JOB_STEP_LOG,\n          log: response.data.log,\n          stepId\n        });\n        return Promise.resolve(true);\n      }\n    } \n    catch (error) {\n      dispatch(showErrorToast(\"Error trying to fetch logs for job.\"));\n    }\n  }\n  else {\n    dispatch(showErrorToast(\"Not logged in!\"));\n  }\n  return Promise.resolve(false);\n}","import { combineReducers } from 'redux';\nimport _ from 'lodash';\n\n// Haven't moved all of these actions to their own .js files yet.\n// They'll stay here for now. Low priority until after release. \nimport { \n  // Document actions\n  ADD_DOCUMENT,\n  RECEIVE_DOCUMENTS, \n  UPDATE_DOCUMENT,\n  REMOVE_DOCUMENT,\n  CLEAR_DOCUMENTS,\n  CHANGE_DOCUMENT_PAGE,\n  SET_DOCUMENTS_LOADING,\n\n  // Result actions\n  ADD_RESULT,\n  RECEIVE_RESULTS,\n  UPDATE_RESULT,\n  REMOVE_RESULT,\n  CLEAR_RESULTS,\n  SELECT_RESULT,\n  SET_RESULTS_SEARCH_STRING,\n  CLEAR_SELECTED_RESULT,\n  CHANGE_RESULT_PAGE,\n  SET_RESULTS_LOADING,\n \n  // Script actions\n  CLEAR_SELECTED_SCRIPT,\n  SET_SCRIPTS_LOADING,\n  SET_SCRIPT_DETAILS_LOADING,\n  REQUEST_SCRIPT_DETAILS,\n  RECEIVE_SCRIPT_DETAILS,\n  ADD_SCRIPT,\n  RECEIVE_SCRIPTS,\n  UPDATE_SCRIPT,\n  REMOVE_SCRIPT,\n  CLEAR_SCRIPTS,\n  SELECT_SCRIPT,\n\n  // Test suite actions\n  SET_TEST_TRANSFORM_LOADING,\n  RECEIVE_TEST_TRANSFORM,\n  RECEIVE_TEST_JOB,\n  RECEIVE_TEST_DOCUMENTS,\n  RECEIVE_TEST_RESULTS,\n  UPDATE_TEST_JOB,\n  CLEAR_TEST_DATA,\n  SET_TEST_LOADING,\n  SET_TEST_DOCUMENTS_LOADING,\n  SET_TEST_RESULTS_LOADING,\n  SET_TEST_DOCUMENT_PAGE,\n  SET_TEST_RESULT_PAGE,\n  SET_TEST_JOB_LOG_LOADING,\n  SET_TEST_JOB_LOG,\n  UPDATE_TEST_JOB_RESULT,\n  ADD_TEST_JOB_STEP_LOG,\n  CLEAR_TEST_JOB_LOGS,\n\n  // Dash / aggregate actions\n  RECEIVE_STATS,\n  SET_STATS_LOADING,\n  CLEAR_STATS\n } from './actions';\n\nimport {\n  ADD_PIPELINE,\n  RECEIVE_PIPELINES,\n  RECEIVE_FULL_PIPELINE,\n  UPDATE_PIPELINE,\n  REMOVE_PIPELINE,\n  CLEAR_PIPELINES,\n  SELECT_PIPELINE,\n  UNSELECT_PIPELINE,\n  SET_PIPELINES_LOADING,\n  CHANGE_PIPELINE_PAGE,\n  SET_PIPELINE_SEARCH_STRING\n} from './pipeline_actions';\n\n import {\n  ADD_PIPELINENODE,\n  RECEIVE_PIPELINENODES,\n  UPDATE_PIPELINENODE,\n  REMOVE_PIPELINENODE,\n  CLEAR_PIPELINENODES,\n  SELECT_PIPELINENODE,\n  CLEAR_SELECTED_PIPELINENODE,\n  SET_PIPELINENODES_LOADING\n } from './node_actions';\n\n import {\n  LOGOUT,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  RECEIVE_USER,\n  ADD_USER,\n  RECEIVE_USERS,\n  REMOVE_USER,\n  CLEAR_USERS,\n  CHANGE_USER_PAGE,\n  SET_USERS_LOADING,\n  SET_USER_NAME_FILTER,\n  SET_USER_ROLE_FILTER\n } from './auth_actions';\n\n import {\n  RECEIVE_JOBS,\n  UPDATE_JOB,\n  CLEAR_JOBS,\n  SELECT_JOB,\n  UNSELECT_JOB,\n  CLEAR_SELECTED_JOB,\n  SET_JOB_LOG_LOADING,\n  ADD_JOB_STEP_LOG,\n  SET_JOB_LOG,\n  CLEAR_JOB_LOGS,\n  SET_JOBS_LOADING,\n  SET_JOB_SEARCH_STRING,\n  CHANGE_JOB_PAGE,\n } from './job_actions';\n\n import {\n  SELECT_EDGE,\n  UNSELECT_EDGE,\n  ADD_EDGE,\n  RECEIVE_EDGES,\n  UPDATE_EDGE,\n  REMOVE_EDGE,\n  CLEAR_EDGES,\n  SET_EDGES_LOADING,\n } from './edge_actions';\n\n import {\n  UPDATE_NEW_JOB_NAME,\n  NEW_JOB_MODAL_TOGGLE,\n  SCRIPT_MODAL_TOGGLE,\n  NEW_SCRIPT_MODAL_TOGGLE,\n  PIPELINE_MODAL_TOGGLE,\n  NEW_PIPELINE_MODAL_TOGGLE,\n  INVITE_USER_MODAL_TOGGLE,\n  LOGIN_MODAL_TOGGLE,\n  SELECT_TAB,\n  UPDATE_JOB_NAME_FILTER,\n  UPDATE_SCRIPT_NAME_FILTER,\n  UPDATE_PIPELINE_NAME_FILTER,\n  SHOW_ERROR_JOBS,\n  SHOW_STARTED_JOBS,\n  SHOW_QUEUED_JOBS,\n  SHOW_FINISHED_JOBS,\n  TOGGLE_BUILD_MODE\n } from './app_actions';\n\n function jobs(\n  state = {\n    loading: false,\n    items: [],\n    selectedJobId: -1,\n    selectedJobLog: \"\",\n    jobStepLogs: {},\n    logs_loading: false,\n    count: 0,\n    selectedPage:1,\n    total_pages:1,\n    searchString:'',\n  }, action) {\n    switch (action.type) {\n      case RECEIVE_JOBS:\n        return Object.assign({}, state, {\n          items: action.response.data.results,\n          count: action.response.data.count,\n          total_pages: action.response.data.total_pages,\n          loading: false\n        });\n      case UPDATE_JOB:\n        var oldJob = _.find(state.items, {id: action.updatedJob.id});\n        var items = [...state.items];\n        var index = _.findIndex(items, {id: action.updatedJob.id});\n        items.splice(index, 1, {...oldJob, ...action.updatedJob});\n        return Object.assign({}, state, {\n          loading:false,\n          items\n        });\n      case CLEAR_JOBS:\n        return Object.assign({}, state, {\n          loading: false,\n          items: [],\n          selectedJobId: -1,\n          selectedJobLog: \"\",\n          jobStepLogs: {},\n          logs_loading: false,\n          count: 0,\n          selectedPage:1,\n          total_pages:1,\n          searchString:'',\n        })\n      case UNSELECT_JOB:\n        return Object.assign({}, state, {\n          selectedJobId: -1,\n        })\n      case SELECT_JOB:\n        return Object.assign({}, state, {\n          selectedJobId: action.selectedJobId,\n        })\n      case CLEAR_SELECTED_JOB:\n        return Object.assign({}, state, {\n          selectedJobId: -1,\n        })\n      case SET_JOBS_LOADING:\n        return Object.assign({}, state, {\n          loading: action.loading\n        })\n      case SET_JOB_LOG_LOADING:\n        return Object.assign({}, state, {\n          logs_loading: action.loading\n        })\n      case SET_JOB_LOG:\n        return Object.assign({}, state, {\n          selectedJobLog: action.log,\n          logs_loading: false\n        })\n      case ADD_JOB_STEP_LOG:\n        let newJobStepLogs = {...state.result_logs};\n        newJobStepLogs[action.stepId] = action.log;\n        return Object.assign({}, state, {\n          jobStepLogs: newJobStepLogs,\n          logs_loading: false\n        });\n      case CLEAR_JOB_LOGS:\n        return Object.assign({}, state, {\n          jobStepLogs: {},\n          selectedJobLog: \"\"\n        });\n      case SET_JOB_SEARCH_STRING:\n        return Object.assign({}, state, {\n          searchString: action.searchString\n        });\n      case CHANGE_JOB_PAGE:\n        return Object.assign({}, state, {\n          selectedPage: action.selectedPage\n        })\n      default:\n        return state\n    }\n}\n\nfunction test_job(\n  state = {\n    loading: false,\n    logs_loading: false,\n    documents_loading: false, \n    results_loading: false,\n    digraph_loading: false,\n    transform_loading: false,\n    test_transforms: {},\n    test_job: null,\n    testJobLog: \"\",\n    testJobStepLogs: [],\n    test_documents: [],\n    document_count: 0,\n    document_page: 1,\n    document_pages: 1,\n    test_results: [],\n    result_count: 0,\n    result_page: 1,\n    result_pages: 1,\n  }, \n  action) {\n    switch (action.type) {\n      case RECEIVE_TEST_JOB:\n        return Object.assign({}, state, {\n          loading: false,\n          test_job: action.test_job\n        });\n      case RECEIVE_TEST_DOCUMENTS:\n        return Object.assign({}, state, {\n          documents_loading: false,\n          test_documents: action.response.data.results,\n          document_pages: action.response.data.total_pages,\n          document_count: action.response.data.count,\n        });\n      case RECEIVE_TEST_RESULTS:\n        return Object.assign({}, state, {\n          results_loading: false,\n          test_results: action.response.data\n        });\n      case UPDATE_TEST_JOB_RESULT:    \n        var test_results = [...state.test_results.filter(function(item) {return item.id !== action.updatedResult.id})];\n        console.log(\"Filtered test_results: \", test_results);\n        console.log(Array.isArray(test_results));\n        test_results.push(action.updatedResult);\n        return Object.assign({}, state, {\n          test_results,\n          results_loading: false,\n        });\n      case UPDATE_TEST_JOB:\n        return Object.assign({}, state, {\n          test_job: action.updatedJob,\n          loading: false\n        });\n      case CLEAR_TEST_DATA:\n        return Object.assign({}, state, {\n          loading: false,\n          logs_loading: false,\n          documents_loading: false, \n          results_loading: false,\n          transform_loading: false,\n          test_transforms: {},\n          test_job: null,\n          testJobLog: \"\",\n          testJobStepLogs: [],\n          test_documents: [],\n          document_count: 0,\n          document_page: 1,\n          document_pages: 1,\n          test_results: [],\n          result_count: 0,\n          result_page: 1,\n          result_pages: 1,\n        });\n\n      case SET_TEST_LOADING:\n        return Object.assign({}, state, {\n          loading: action.loading\n        });\n      case SET_TEST_RESULTS_LOADING:\n        return Object.assign({}, state, {\n          results_loading: action.loading\n        });\n\n      case SET_TEST_DOCUMENTS_LOADING:\n        return Object.assign({}, state, {\n          documents_loading: action.loading\n        });\n\n      case SET_TEST_DOCUMENT_PAGE:\n        return Object.assign({}, state, {\n          document_page: action.selectedPage\n        });\n\n      case SET_TEST_RESULT_PAGE:\n        return Object.assign({}, state, {\n          result_page: action.selectedPage\n        });\n\n      case SET_TEST_JOB_LOG_LOADING:\n        return Object.assign({}, state, {\n          logs_loading: action.loading\n        });\n\n      case SET_TEST_JOB_LOG:\n        return Object.assign({}, state, {\n          testJobLog: action.log,\n          logs_loading: false\n        });\n\n      case ADD_TEST_JOB_STEP_LOG:\n        let newJobStepLogs = {...state.testJobStepLogs};\n        newJobStepLogs[action.stepId] = action.log;\n        return Object.assign({}, state, {\n          testJobStepLogs: newJobStepLogs,\n          logs_loading: false\n        });\n\n      case CLEAR_TEST_JOB_LOGS:\n        return Object.assign({}, state, {\n          logs_loading: false,\n          testJobLog: \"\",\n          testJobStepLogs: [],\n        });\n\n      case SET_TEST_TRANSFORM_LOADING:\n        return Object.assign({}, state, {\n          transform_loading: action.loading\n        });\n\n      case RECEIVE_TEST_TRANSFORM:\n    \n        let transformed_data = { ...state.test_transforms };\n        transformed_data[action.resultId] = action.transformed_input;\n        console.log(\"New test transforms: \", transformed_data);\n      \n        return Object.assign({}, state, {\n          transform_loading: false,\n          test_transforms: transformed_data\n        });\n      default:\n        return state;\n    }\n  }\n\nfunction documents(\n  state = {\n    loading: false,\n    items: [],\n    pages: 1,\n    count: 0,\n    page_size: 10,\n    selectedPage: 1,\n  },\n  action) {\n  switch (action.type) {\n    case ADD_DOCUMENT:\n      return Object.assign({}, state, {\n        items: [...state.items, action.newDocument]\n      })\n    case RECEIVE_DOCUMENTS:\n      return Object.assign({}, state, {\n        loading: false,\n        documentsAreFetching: false,\n        items: action.response.results,\n        pages: action.response.total_pages,\n        count: action.response.count,\n        page_size: action.response.page_size\n      })\n    case UPDATE_DOCUMENT:\n      let revisedDocuments = state.items.filter(function(item) {return item.id !== action.updatedDoc.id}); //remove old job object with updated job object's id.\n      revisedDocuments.push(action.updatedDoc);\n      return Object.assign({}, state, {\n        items: revisedDocuments,\n    })\n    case REMOVE_DOCUMENT:\n      return Object.assign({}, state, {\n        items: state.items.filter(function(item) {return item.id !== action.documentId})\n    })\n    case CLEAR_DOCUMENTS:\n      return Object.assign({}, state, {\n        loading: false,\n        items: [],\n        pages: 1,\n        count: 0,\n        page_size: 10,\n        selectedPage: 1,\n      })\n    case CHANGE_DOCUMENT_PAGE:\n      return Object.assign({}, state, {\n        selectedPage: action.selectedPage\n      })\n    case SET_DOCUMENTS_LOADING:\n      return Object.assign({}, state, {\n        loading: action.loading\n      })\n    default:\n      return state\n  }\n}\n\nfunction results(state = {\n  loading: false,\n  items: [],\n  pages: 1,\n  count: 0,\n  selectedPage: 1,\n  selectedResultId: -1,\n  searchString:'',\n}, action) {\n  switch(action.type) {\n    case ADD_RESULT:\n      return Object.assign({}, state, {\n        items: [...state.items, action.newResult]\n      });\n\n    case RECEIVE_RESULTS: \n      return Object.assign({}, state, {\n        loading: false,\n        items: action.response.data,\n      });\n\n    case UPDATE_RESULT:\n      var oldResult = _.find(state.items, {id: action.updatedResult.id});\n      var items = [...state.items];\n      var index = _.findIndex(items, {id: action.updatedResult.id});\n      items.splice(index, 1, {...oldResult, ...action.updatedResult});\n      return Object.assign({}, state, {\n        loading:false,\n        items\n      });\n\n    case REMOVE_RESULT: \n      var items = [...state.items];\n      var index = _.findIndex(items, {id: action.resultId});\n      items.splice(index, 1);\n      return Object.assign({}, state, {\n        items\n      });\n\n    case CLEAR_RESULTS:\n\n      return Object.assign({}, state, {\n        loading: false,\n        items: [],\n        pages: 1,\n        count: 0,\n        selectedPage: 1,\n        selectedResultId: -1,\n        searchString:''\n      });\n\n    case SELECT_RESULT:\n      return Object.assign({}, state, {\n        selectedResultId: action.selectedResultId\n      });\n\n    case CLEAR_SELECTED_RESULT:\n      return Object.assign({}, state, {\n        selectedResultId: -1\n      });\n\n    case CHANGE_RESULT_PAGE:\n      return Object.assign({}, state, {\n        selectedPage: action.selectedPage\n      });\n\n    case SET_RESULTS_LOADING:\n      return Object.assign({}, state, {\n        loading: action.loading\n      });\n\n    case SET_RESULTS_SEARCH_STRING:\n      return Object.assign({}, state, {\n        searchString: action.searchString\n      })\n\n    default:\n      return state;\n  }\n}\n\nfunction pipelines(\n  state = {\n    loading: false,\n    items: [],\n    pipelineSearchText: \"\",\n    selectedPipelineId: -1,\n    pages:1,\n    count:0, \n    page_size:5,\n    selectedPage:1\n  }, action) {\n    switch (action.type) {\n      case ADD_PIPELINE:\n        return Object.assign({}, state, {\n          items: [...state.items, action.newPipeline],\n          loading: false\n        })\n      case RECEIVE_PIPELINES:\n        return Object.assign({}, state, {\n          loading: false,\n          items: _.sortBy(action.response.data.results, 'id'),\n          count: action.response.data.count,\n          page_size: action.response.data.page_size\n        });\n\n      case UPDATE_PIPELINE:\n        var oldPipeline = _.find(state.items, {id: action.updatedPipeline.id});\n        var items = [...state.items];\n        var index = _.findIndex(items, {id: action.updatedPipeline.id});\n        items.splice(index, 1, {...oldPipeline, ...action.updatedPipeline});\n        return Object.assign({}, state, {\n          loading: false,\n          items\n        });\n\n      case REMOVE_PIPELINE:\n        var items = [...state.items];\n        var index = _.findIndex(items, {id: action.pipelineId});\n        items.splice(index, 1);\n        return Object.assign({}, state, {\n          items\n        });\n\n      case CHANGE_PIPELINE_PAGE:\n        return Object.assign({}, state, {\n          selectedPage: action.selectedPage\n        });\n\n      case SET_PIPELINE_SEARCH_STRING:\n        return Object.assign({}, state, {\n          pipelineSearchText: action.pipelineSearchText\n        });\n\n      case CLEAR_PIPELINES:\n        return Object.assign({}, state, {\n          items: [],\n          loading: false,\n          pipelineSearchText:\"\",\n          selectedPipelineId: -1,\n          pages:1,\n          count:0, \n          page_size:5,\n          selectedPage:1\n        })\n      case SELECT_PIPELINE:\n        return Object.assign({}, state, {\n          selectedPipelineId: action.selectedPipelineId,\n        })\n      case UNSELECT_PIPELINE:\n        return Object.assign({}, state, {\n          selectedPipelineId: -1,\n        })\n      case SET_PIPELINES_LOADING:\n        return Object.assign({}, state, {\n          loading: action.loading\n        })\n      default:\n        return state\n    }\n  }\n\n  function edges(\n    state = {\n      items: [],\n      loading: true,\n      selectedEdgeId:-1\n    }, action) {\n      switch(action.type) {\n        \n        case UNSELECT_EDGE:\n\n          return Object.assign({}, state, {\n            selectedEdgeId:-1\n          });\n\n        case SELECT_EDGE:\n          \n          return Object.assign({}, state, {\n            selectedEdgeId: action.id\n          });\n        \n        case RECEIVE_EDGES: \n          \n          console.log(\"Received edges\", action);\n\n          return Object.assign({}, state, {\n            items: action.items,\n            loading: false\n          });\n\n        case ADD_EDGE:\n\n          return Object.assign({}, state, {\n            items: [...state.items, action.edge],\n            loading: false\n          });\n\n        case UPDATE_EDGE:\n\n          // Find old item, merge in new values, and then replace it at same index position (last part is critical, otherwise display views show lists jumping around)\n          var oldEdge = _.find(state.items, {id: action.updatedEdge.id});\n          var items = [...state.items];\n          var index = _.findIndex(items, {id: action.updatedEdge.id});\n          items.splice(index, 1, {...oldEdge, ...action.updatedEdge});\n        \n          return Object.assign({}, state, {\n            items,\n            loading: false\n          });\n\n        case REMOVE_EDGE:\n\n          var items = [...state.items];\n          var index = _.findIndex(items, {id: action.edgeId});\n          items.splice(index, 1);\n          \n          return Object.assign({}, state, {\n            items,\n            loading: false\n          });\n\n        case CLEAR_EDGES:\n\n          return Object.assign({}, state, {\n            items: [],\n            loading: true,\n            selectedEdgeId:-1\n          });\n\n        case SET_EDGES_LOADING:\n\n          return Object.assign({}, state, {\n            loading: action.loading,\n          });\n\n        default:\n          return state\n      }\n  }\n\n  function pipelinesteps(\n    state = {\n      stepsAreFetching: false,\n      items: [],\n      lastUpdated: null,\n      selectedPipelineStepId:-1,\n    }, action) {\n      switch (action.type) {\n        case ADD_PIPELINENODE:\n          return Object.assign({}, state, {\n            items: [...state.items, action.newPipelineStep]\n          })\n        case RECEIVE_PIPELINENODES:\n          return Object.assign({}, state, {\n            loading: false,\n            items: action.items,\n          })\n        case UPDATE_PIPELINENODE:\n          var oldNode = _.find(state.items, {id: action.updatedPipelineStep.id});\n          var items = [...state.items];\n          var index = _.findIndex(items, {id: action.updatedPipelineStep.id});\n          items.splice(index, 1, {...oldNode, ...action.updatedPipelineStep});\n          return Object.assign({}, state, {\n            items: items,\n          });\n        case REMOVE_PIPELINENODE:\n          var items = [...state.items];\n          var index = _.findIndex(items, {id: action.pipelineStepId});\n          items.splice(index, 1);\n\n          return Object.assign({}, state, {\n            items\n          });\n        case CLEAR_PIPELINENODES:\n          return Object.assign({}, state, {\n            items: [],\n            loading: false\n          })\n        case SELECT_PIPELINENODE:\n          return Object.assign({}, state, {\n            selectedPipelineStepId: action.selectedPipelineStepId,\n          })\n        case CLEAR_SELECTED_PIPELINENODE:\n          return Object.assign({}, state, {\n            selectedPipelineStepId: -1,\n          })\n        case SET_PIPELINENODES_LOADING:\n          return Object.assign({}, state, {\n            loading: action.loading\n          })\n        default:\n          return state\n      }\n    }\n\n\nfunction scripts(\n  state = {\n    loading: false,\n    detailsLoading: false,\n    items: [],\n    selectedScriptData: null,\n    selectedScriptId: -1,\n  }, action) {\n    switch (action.type) {\n      case ADD_SCRIPT:\n        return Object.assign({}, state, {\n          items: [...state.items, action.newScript]\n        })\n      case RECEIVE_SCRIPTS:\n        return Object.assign({}, state, {\n          loading: false,\n          items: action.response.data,\n        })\n      case UPDATE_SCRIPT:\n\n        // Find old item, merge in new values, and then replace it at same index position (last part is critical, otherwise display views show lists jumping around)\n        var oldScript = _.find(state.items, {id: action.updatedScript.id});\n        var items = [...state.items];\n        var index = _.findIndex(items, {id: action.updatedScript.id});\n        items.splice(index, 1, {...oldScript, ...action.updatedScript});\n      \n        return Object.assign({}, state, {\n          items,\n          loading: false\n        });\n      \n      case REMOVE_SCRIPT:\n        var items = [...state.items];\n        var index = _.findIndex(items, {id: action.scriptId});\n        items.splice(index, 1);\n\n        return Object.assign({}, state, {\n          items\n        });\n\n      case CLEAR_SCRIPTS:\n        return Object.assign({}, state, {\n          items: [],\n        })\n      case SELECT_SCRIPT:\n        return Object.assign({}, state, {\n          selectedScriptId: action.selectedScriptId,\n        })\n      case CLEAR_SELECTED_SCRIPT:\n        return Object.assign({}, state, {\n          loading: false,\n          selectedScriptData: null,\n          selectedScriptId: -1\n        })\n      case SET_SCRIPTS_LOADING:\n        return Object.assign({}, state, {\n          loading: action.loading\n        })\n      case SET_SCRIPT_DETAILS_LOADING:\n        return Object.assign({}, state, {\n          detailsLoading: action.loading\n        })\n      case REQUEST_SCRIPT_DETAILS:\n        return Object.assign({}, state, {\n          detailsLoading: true,\n          selectedScriptData: null\n        })\n      case RECEIVE_SCRIPT_DETAILS:\n        return Object.assign({}, state, {\n          detailsLoading: false,\n          selectedScriptData: action.response.data\n        })\n      default:\n        return state\n    }\n  }\n\n\nfunction application(state = {\n  newJobName:\"\",\n  showNewJobModal: false,\n  showScriptModal: false,\n  showNewScriptModal: false,\n  showPipelineModal: false,\n  showNewPipelineModal: false,\n  showInviteUserModal: false,\n  showLoginModal: false,\n  jobNameFilter: '',\n  scriptNameFilter: '',\n  pipelineNameFilter: '',\n  filterByErrorJobs: false,\n  filterByStartedJobs: false, \n  filterByQueuedJobs: false,\n  filterByFinishedJobs: false,\n  activeDigraph:null,\n  selectedTabIndex:0\n}, action) {\n  switch(action.type) {\n    case UPDATE_NEW_JOB_NAME:\n          return Object.assign({}, state, {\n            newJobName: action.newJobName,\n          })\n    case NEW_JOB_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showNewJobModal: !state.showNewJobModal\n      });\n    case NEW_SCRIPT_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showNewScriptModal: !state.showNewScriptModal\n      });\n    case INVITE_USER_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showInviteUserModal: !state.showInviteUserModal\n      });\n    case SCRIPT_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showScriptModal: !state.showScriptModal\n      });\n    case NEW_PIPELINE_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showNewPipelineModal: !state.showNewPipelineModal\n      });\n    case PIPELINE_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showPipelineModal: !state.showPipelineModal\n      });\n    case LOGIN_MODAL_TOGGLE:\n      return Object.assign({}, state, {\n        showLoginModal: !state.showLoginModal\n      });\n    case SELECT_TAB:\n      return Object.assign({}, state, {\n        selectedTabIndex: action.selectedTabIndex\n      });\n    case UPDATE_JOB_NAME_FILTER:\n      return Object.assign({}, state, {\n        jobNameFilter: action.filter\n      });\n    case UPDATE_SCRIPT_NAME_FILTER:\n      return Object.assign({}, state, {\n        scriptNameFilter: action.filter\n      });\n    case UPDATE_PIPELINE_NAME_FILTER:\n      return Object.assign({}, state, {\n        pipelineNameFilter: action.filter\n      });\n    case SHOW_STARTED_JOBS:\n      return Object.assign({}, state, {\n        filterByStartedJobs: action.filter\n      });\n    case SHOW_ERROR_JOBS:\n      return Object.assign({}, state, {\n        filterByErrorJobs: action.filter\n      });\n    case SHOW_QUEUED_JOBS:\n      return Object.assign({}, state, {\n        filterByQueuedJobs: action.filter\n      });\n    case SHOW_FINISHED_JOBS:\n      return Object.assign({}, state, {\n        filterByFinishedJobs: action.filter\n      });\n    case TOGGLE_BUILD_MODE: \n      return Object.assign({}, state, {\n        buildMode: !state.buildMode\n      });\n    default:\n      return state;\n  }\n}\n\nfunction system(state = {\n  user_count: 0,\n  doc_count: 0,\n  parsed_doc_count: 0,\n  queued_job_count:\t0,\n  running_job_count: 0,\n  error_job_count: 0,\n  script_count:\t0,\n  pipeline_count:\t0,\n  loading: false\n}, action) {\n  switch(action.type) {\n    case RECEIVE_STATS:\n      return Object.assign({}, state, {\n        ...action.stats,\n        loading: false\n      })\n    case SET_STATS_LOADING:\n      return Object.assign({}, state, {\n        loading: action.loading\n      })\n    case CLEAR_STATS:\n      return Object.assign({}, state, {\n        user_count: 0,\n        doc_count: 0,\n        parsed_doc_count: 0,\n        queued_job_count:\t0,\n        running_job_count: 0,\n        error_job_count: 0,\n        script_count:\t0,\n        pipeline_count:\t0,\n        loading: false\n      })\n    default:\n      return state;\n  }\n}\n\n\nfunction auth(state = {\n  username: '',\n  user:{},\n  loggedIn: false,\n  token:'',\n  refreshToken: '',\n  loginError: '',\n  buildMode: false\n}, action) {\n  switch(action.type) {\n    case LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        username: action.username,\n        loggedIn: true,\n        refreshToken: action.refreshToken,\n        token: action.token,\n        loginError: ''\n      });\n    case LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        username: '',\n        loggedIn: false,\n        refreshToken: '',\n        token: '',\n        loginError: action.error\n      });\n    case LOGOUT:\n      return Object.assign({}, state, {\n        username: '',\n        user:{},\n        loggedIn: false,\n        refreshToken: '',\n        token: '',\n        loginError:''\n      });\n    case RECEIVE_USER:\n      return Object.assign({}, state, {\n        user: action.user\n      });\n    default:\n      return state;\n  }\n}\n\nfunction users(\n  state = {\n    loading: false,\n    items: [],\n    pages: 1,\n    count: 0,\n    page_size: 10,\n    selectedPage: 1,\n    searchText: \"\",\n    searchRole: \"\"\n  },\n  action) {\n  switch (action.type) {\n    case ADD_USER:\n      return Object.assign({}, state, {\n        items: [...state.items, action.newDocument]\n      })\n    case RECEIVE_USERS:\n      return Object.assign({}, state, {\n        loading: false,\n        items: action.response.results,\n        pages: action.response.total_pages,\n        count: action.response.count,\n        page_size: action.response.page_size\n      })\n    case REMOVE_USER:\n      return Object.assign({}, state, {\n        items: state.items.filter(function(item) {return item.id !== action.userId})\n    })\n    case CLEAR_USERS:\n      return Object.assign({}, state, {\n        loading: false,\n        items: [],\n        pages: 1,\n        count: 0,\n        page_size: 10,\n        selectedPage: 1,\n        searchText: \"\",\n        searchRole: \"\"\n      })\n    case SET_USER_NAME_FILTER:\n      return Object.assign({}, state, {\n        searchText: action.searchText\n      })\n    case SET_USER_ROLE_FILTER:\n      return Object.assign({}, state, {\n        searchRole: action.searchRole\n      })\n    case CHANGE_USER_PAGE:\n      return Object.assign({}, state, {\n        selectedPage: action.selectedPage\n      })\n    case SET_USERS_LOADING:\n      return Object.assign({}, state, {\n        loading: action.loading\n      })\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n    jobs,\n    users,\n    test_job,\n    pipelines,\n    pipelinesteps,\n    edges,\n    scripts,\n    documents,\n    results,\n    application,\n    system,\n    auth\n})\n\nexport default rootReducer;","import React, {useState} from 'react';\nimport { Label, Icon, Modal, Segment, Button, Form} from 'semantic-ui-react';\n\nfunction AddPipelineModal(props) {\n\n  const [newName, setNewName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const onAddClick = () => {\n    props.handleCreatePipeline({name: newName, description});\n    props.handleNewPipelineModalToggle();\n  }\n\n  return(\n    <Modal open={props.visible} size = 'small'>\n      <Label \n          corner='right'\n          color='grey'\n          icon='cancel'\n          onClick={()=>props.toggleCreateModal()}\n      />\n      <Modal.Header>Create New Pipeline</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n            <Segment padded>\n                <Form>\n                    <Form.Field onChange = {(data) => { setNewName(`${data.target.value}`)}}>\n                        <label>New Pipeline Name:</label>\n                        <input placeholder='Enter new pipeline step name...' />\n                    </Form.Field>\n                    <Form.Field onChange = {(data) => { setDescription(`${data.target.value}`)}}>\n                        <label>Description:</label>\n                        <input placeholder='Please describe what this pipeline does...' />\n                    </Form.Field>\n                </Form>\n            </Segment>\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='green' onClick={() => onAddClick()}>\n          <Icon name='checkmark' /> Create\n        </Button>\n        <Button color='grey' onClick={() => props.handleNewPipelineModalToggle()}>\n          <Icon name='cancel' /> Cancel\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default AddPipelineModal;","import React from 'react';\nimport { Label, Icon, Modal, Header, Button } from 'semantic-ui-react';\n\nfunction ConfirmModal(props) {\n\n  const onYesClick = () => {\n    props.yesAction();\n    props.toggleModal();\n  }\n\n  const onNoClick = () => {\n    props.noAction();\n    props.toggleModal();\n  }\n\n  return(\n    <Modal open={props.visible} basic size = 'small'>\n        <Label \n            corner='right'\n            color='grey'\n            icon='cancel'\n            onClick={()=>props.toggleModal()}\n        />\n        <Header icon='exclamation circle' content='ARE YOU SURE?' /> \n        <Modal.Content>\n            <p>\n                {props.message}\n            </p>\n        </Modal.Content>        \n        <Modal.Actions>\n            <Button basic color='red' inverted onClick={() => onNoClick()}>\n                <Icon name='remove' /> No\n            </Button>\n            <Button color='green' inverted onClick={() => onYesClick()}>\n                <Icon name='checkmark' /> Yes\n            </Button>\n        </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default ConfirmModal;\n\n","import React from 'react';\nimport { \n    Tab,\n    Segment,\n    Grid,\n    Container,\n    Dimmer,\n    Loader,\n    Icon,\n    Header } from 'semantic-ui-react';\n\nexport const CenteredIconDiv = (props) => {\n    const {\n        subheader,\n        header,\n        icon,\n        size,\n        color,\n    } = props;\n\n    return (\n        <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n            <div style={{marginBottom:'1vh'}}>\n                <Icon name={icon} color={color} size={size}/>\n            </div>\n            <div>\n                <Header as='h1' textAlign='center'>\n                    {header}\n                    <Header.Subheader>\n                    {subheader}\n                    </Header.Subheader>\n                </Header>\n            </div>\n        </div>\n    );\n}\n\nexport const InputResultTabs = (props) => {\n    const {\n        panelOneLabel,\n        panelOne, \n        panelTwoLabel, \n        panelTwo\n    } = props;\n    \n    const panes = [\n        {\n          menuItem: `${panelOneLabel}`,\n          render: () => <Tab.Pane attached={false}>{panelOne}</Tab.Pane>,\n        },\n        {\n          menuItem: `${panelTwoLabel}`,\n          render: () => <Tab.Pane attached={false}>{panelTwo}</Tab.Pane>,\n        },\n      ];\n\n    return (\n        <Segment>\n            <Tab menu={{ pointing: true }} panes={panes} />\n        </Segment>);\n}\n\nexport const SplitHeaderContainer = (props) => {\n    const { left, right, header } = props;\n\n    return (\n        <Grid celled>\n            <Grid.Row>\n                <Grid.Column width={16}>{header}</Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={3}>{left}</Grid.Column>\n                <Grid.Column width={10}>{right}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n};\n\nexport const HeaderContainer = (props) => {\n    const { body, header, loading, loadingText } = props;\n\n    return (\n        <Grid style={{marginTop:'0', height: '100%'}}>\n            {\n                loading ?  <Dimmer active inverted>\n                                <Loader inverted>{ loadingText ? loadingText : \"Loading...\" }</Loader>\n                            </Dimmer> :\n                            <></>\n            }\n             <Grid.Row style={{paddingBottom:'0px'}}>\n                <Grid.Column width={16}>{header}</Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={16} style={{height:'100%'}}>\n                    <Container fluid style={{height:'100%'}}>\n                        {body}\n                    </Container>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n};\n\nexport const SwitchableContainerWithHeader = (props) => {\n    \n    const { \n        showSecondView, \n        viewOne,\n        viewTwo,\n        header,\n        loading,\n        loadingText \n    } = props;\n    \n    return (\n        <Grid style={{marginTop:'0', height: '100%'}}>\n            {\n                loading ?  <Dimmer active inverted>\n                                <Loader inverted>{ loadingText ? loadingText : \"Loading...\" }</Loader>\n                            </Dimmer> :\n                            <></>\n            }\n            <Grid.Row style={{paddingBottom:'0px'}}>\n                <Grid.Column width={16}>{header}</Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={16} style={{height:'100%'}}>\n                    <Container fluid style={{height:'100%'}}>\n                        {showSecondView ? viewTwo : viewOne}\n                    </Container>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    \n};\n\n","import React, { Component } from 'react'\nimport { Header, \n    Button, \n    Modal, \n    Dimmer, \n    Loader, \n    Form,\n    Input,\n    TextArea,\n    Segment,\n    Dropdown,\n    Label,\n    Icon,\n    Menu } from 'semantic-ui-react'\nimport AceEditor from \"react-ace\";\nimport ReactJson from 'react-json-view';\nimport Ajv from 'ajv';\nimport { LazyLog } from 'react-lazylog';\n\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-min-noconflict/mode-python\";\nimport \"ace-builds/src-min-noconflict/theme-solarized_dark\";\nimport 'ace-builds';\nimport \"ace-builds/webpack-resolver\";\n\nimport ConfirmModal from '../Shared/ConfirmModal';\nimport { InputResultTabs } from '../Layouts/Layouts';\n\nconst fileTypeSchema = {\n    $schema: \"http://json-schema.org/draft-07/schema\",\n    $id: \"http://example.com/example.json\",\n    type: \"object\",\n    title: \"The File Extension Type Schema\",\n    default: {doc_types: [\".pdf\"]},\n    additionalProperties: true,\n    required: [\n        \"doc_types\"\n    ],\n    properties: {\n        doc_types: {\n            $id: \"#/properties/doc_types\",\n            type: \"array\",\n            title: \"The Doc_types Schema\",\n            description: \"This is an array of all supported file type extensions for this script.\",\n            default: [],\n            examples: [\n                [\n                    \".doc\",\n                    \".pdf\"\n                ]\n            ],\n            additionalItems: true,\n            items: {\n                $id: \"#/properties/doc_types/items\",\n                type: [\n                    \"string\",\n                    \"null\"\n                ],\n                title: \"Doc file type item schema\",\n                description: \"Each item in the array is a file extension of a supported file type.\",\n                default: \"\",\n                examples: [\n                    \".doc\",\n                    \".pdf\"\n                ],\n                minimum: 1.0,\n                pattern: \"^\\\\.[a-zA-Z0-9]+$\"\n            }\n        }\n    }\n};\n\nexport default class ScriptModal extends Component {\n    \n    static defaultProps = {\n        theme: \"monokai\",\n        src: null,\n        collapsed: false,\n        collapseStringsAfter: 15,\n        onAdd: true,\n        onEdit: true,\n        onDelete: true,\n        displayObjectSize: true,\n        enableClipboard: true,\n        indentWidth: 4,\n        displayDataTypes: true,\n        iconStyle: \"triangle\", \n        timer: null\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            serverScriptObj: this.props.selectedScriptData ? this.props.selectedScriptData : null,\n            localScriptObj: this.props.selectedScriptData ? this.props.selectedScriptData : null,\n            settings: {},\n            showCodeEditor: true,\n            showJobMeta: false,\n            showDescriptionEditor: false,\n            showPackageEditor: false,\n            showSetupScriptEditor: false,\n            showSettings: false,\n            showSetupLog: false,\n            jsonEditorCollapsed: true,\n            showConfirmModal: false,\n            showDeleteModal: false,\n            showFileTypes: false,\n            modalTab:0\n        };\n    }\n\n    setSelectedTab = (modalTab) => {\n        this.setState({\n            modalTab \n        });\n    }\n\n    //This is the new React-favored way to handle state update on prop changes:\n    //https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\n    //Old way would have been componentWillReceiveProps. This is disfavored approach BTW, TODO - change.\n    static getDerivedStateFromProps(nextProps, prevState){\n        if(nextProps.selectedScriptData!==prevState.serverScriptObj){\n            return { \n                serverScriptObj: nextProps.selectedScriptData,\n                localScriptObj: nextProps.selectedScriptData\n            };\n        }\n        else return null;\n     }\n\n    toggleConfirmModal = () => {\n        this.setState({\n            showConfirmModal: !this.state.showConfirmModal\n        });\n    }\n\n    toggleDeleteModal = () => {\n        this.setState({\n            showDeleteModal: !this.state.showDeleteModal\n        });\n    }\n\n    onConfirmSave = () => {\n        this.props.handleUpdateScript(this.state.localScriptObj);\n    }\n\n    onConfirmDelete = () => {\n        this.props.handleDeleteScript(this.state.localScriptObj.id);\n        this.props.handleClearScript();\n        this.props.handleScriptModalToggle();\n    }\n\n    onDescriptionChange = (value) => {\n        let updatedScriptObj = {...this.state.localScriptObj};\n        updatedScriptObj.description = value;\n        this.setState({\n            localScriptObj: updatedScriptObj\n        });\n    }\n\n    onToggleMode = () => {\n        let updatedScriptObj = {...this.state.localScriptObj};\n        updatedScriptObj.mode = updatedScriptObj.mode === 'TEST' ? 'DEPLOYED' : 'TEST';\n        this.setState({\n            localScriptObj: updatedScriptObj\n        });\n    }\n\n    onPackageListChange = (value) => {\n        let updatedScriptObj = {...this.state.localScriptObj};\n        updatedScriptObj.required_packages = value;\n        this.setState({\n            localScriptObj: updatedScriptObj\n        });\n    }\n\n    onSetupScriptChange = (value) => {\n        let updatedScriptObj = {...this.state.localScriptObj};\n        updatedScriptObj.setup_script = value;\n        this.setState({\n            localScriptObj: updatedScriptObj\n        });\n    }\n\n    onNameChange = (newName) => {\n        let newScriptObj = {...this.state.localScriptObj};\n        newScriptObj.human_name = newName;\n        newScriptObj.name = newName.replace(\" \",\"_\").toUpperCase();\n        this.setState({\n            localScriptObj:  newScriptObj\n        });\n    }\n\n    onSchemaChange = (newInputObj) => {\n        let newScriptObj = {...this.state.localScriptObj};\n        newScriptObj.required_inputs = JSON.stringify(newInputObj);\n        this.setState({\n            localScriptObj:  newScriptObj\n        });\n    }\n\n    // If the user tries to edit supported file types... check the edit conforms to schema. \n    // If the edit doesn't conform, throw it away. If it does conform, store in local state. \n    onFileTypeChange = (newFileType) => {\n        var ajv = new Ajv();\n        var valid = ajv.validate(fileTypeSchema, {doc_types: newFileType});\n        if (!valid){\n            return false; //returning false will tell react-json-view to throw a validation error and not update.\n        }\n        else {\n            let newScriptObj = {...this.state.localScriptObj};\n            newScriptObj.supported_file_types = JSON.stringify(newFileType);\n            this.setState({\n                localScriptObj:  newScriptObj\n            });\n            return true;\n        }    \n    }\n\n    onTypeChange = (newType) => {\n        let newScriptObj = {...this.state.localScriptObj};\n        newScriptObj.type = newType;\n        this.setState({\n            localScriptObj:  newScriptObj\n        });\n    }\n\n    onScriptChange = (newValue) => {\n        let newScriptObj = {...this.state.localScriptObj};\n        newScriptObj.script = newValue;\n        this.setState({\n            localScriptObj:  newScriptObj\n        });\n      }\n\n    // Once this component mounts, periodically update the script data.\n    componentDidMount() {\n\n        let timer = setInterval(this.tick, 2000);\n        this.setState({timer});\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n\n    // Refresh ever X seconds\n    tick = () => {\n        if(this.props.selectedScriptData) {\n            // If serverScriptObj is locked... refresh\n            if (this.props.loading || this.props.selectedScriptData.locked) {\n                console.log(\"Scripts are loading or current script is locked... try to refetch\");\n                this.props.handleRefreshScript(this.props.selectedScriptData.id)\n            }\n            else\n            {\n                console.log(\"Scripts are not loading and this script isn't locked... nothing to update\");\n            }\n        }  \n    }\n\n    render() {\n\n        const {\n            collapseStringsAfter,\n            displayObjectSize,\n            enableClipboard,\n            theme,\n            iconStyle,\n            indentWidth,\n            displayDataTypes,\n            selectedScriptData,\n            loading,\n            windowHeight\n        } = this.props;\n\n        const style = {\n            padding: \"10px\",\n            borderRadius: \"3px\",\n            margin: \"10px 0px\"\n        }\n\n        function LoadingIndicator() {\n            \n            let text = \"\";\n            if (loading) text = \"Scripts Are Loading...\";\n            else if (selectedScriptData && selectedScriptData.locked) text = \"Script is Being Setup...\";\n\n            return (\n                text? <Dimmer active>\n                    <Loader>{text}</Loader>\n                </Dimmer> : <></>\n            );\n            \n        }\n\n        // If no selectedScriptData, nothing to render and return empty component\n        if (!selectedScriptData) return <div></div>;\n\n        // Parse the script input schema from the string stored in the db\n        let schemaJson = {};\n        try {\n            schemaJson = JSON.parse(this.state.localScriptObj.required_inputs);\n        } catch (e) {\n            schemaJson = {};\n        }\n        \n        // Parse the file type json from the string stored in the db\n        let fileTypesJson = {};\n        try {\n            fileTypesJson = JSON.parse(this.state.localScriptObj.supported_file_types);\n        } catch (e) {\n            fileTypesJson = {};\n        }\n\n        // Script settings panes for rendering\n        const panes = [\n            (<>\n                {this.props.detailsAreFetching ? <Dimmer active><Loader>Loading</Loader></Dimmer> : <></>}\n                <AceEditor\n                    style={{width: '100%', height:'100%', maxHeight: '100%'}}\n                    mode=\"python\"\n                    theme=\"solarized_dark\"\n                    name=\"code_editor\"\n                    onChange={this.onScriptChange}\n                    fontSize={10}\n                    showPrintMargin={true}\n                    showGutter={true}\n                    highlightActiveLine={true}\n                    value={this.state.localScriptObj.script}\n                    setOptions={{\n                        enableBasicAutocompletion: true,\n                        enableLiveAutocompletion: true,\n                        enableSnippets: true,\n                        useSoftTabs: true,\n                        showLineNumbers: true,\n                        tabSize: 4,\n                    }}/>\n            </>),\n            (<>\n                <Segment>\n                    <Label attached='top'>Name and Type</Label>\n                    <Input\n                        style={{width:'100%'}}\n                        name='pipelineName'\n                        value={this.state.localScriptObj.human_name}\n                        onChange = {(data) => { this.onNameChange(data.target.value)}}\n                    />\n                     <Dropdown\n                        options={[{key:1, text:'Run Once Per Job', value:'RUN_ON_JOB'},{key:2, text:'Run Once Per Doc', value:'RUN_ON_JOB_DOCS_PARALLEL'}]}\n                        selection\n                        onChange={\n                            (e, data) => {\n                                this.onTypeChange(data.value);\n                            }\n                        }\n                        value={this.state.localScriptObj.type}\n                    />\n                </Segment>\n                <Segment>\n                    <Label attached='top'>Description</Label>\n                        <TextArea\n                            style={{width:'100%'}}\n                            rows={4}\n                            value={this.state.localScriptObj ? this.state.localScriptObj.description : \"\"}\n                            onChange={(e) => this.onDescriptionChange(e.target.value)}/>\n                </Segment>\n            </>),\n            (<ReactJson \n                collapsed={this.state.jsonEditorCollapsed}\n                style={style}\n                theme={theme}\n                src={schemaJson}\n                collapseStringsAfterLength={collapseStringsAfter}\n                onEdit={ e => {\n                                this.onSchemaChange(e.updated_src);\n                            }\n                }\n                onDelete={ e => {\n                                this.onSchemaChange(e.updated_src);\n                            }\n                }\n                onAdd={ e => {\n                                this.onSchemaChange(e.updated_src);\n                            }\n                }\n                displayObjectSize={displayObjectSize}\n                enableClipboard={enableClipboard}\n                indentWidth={indentWidth}\n                displayDataTypes={displayDataTypes}\n                iconStyle={iconStyle}\n            />),\n            (<ReactJson \n                collapsed={this.state.jsonEditorCollapsed}\n                style={style}\n                theme={theme}\n                src={fileTypesJson}\n                collapseStringsAfterLength={collapseStringsAfter}\n                onEdit={ e => {\n                                return this.onFileTypeChange(e.updated_src);\n                            }\n                }\n                onDelete={ e => {\n                                return this.onFileTypeChange(e.updated_src);\n                            }\n                }\n                onAdd={ e => {\n                                return this.onFileTypeChange(e.updated_src);\n                            }\n                }\n                displayObjectSize={displayObjectSize}\n                enableClipboard={enableClipboard}\n                indentWidth={indentWidth}\n                displayDataTypes={displayDataTypes}\n                iconStyle={iconStyle}\n            />),\n            (<InputResultTabs\n                panelOne={<>\n                    <Label attached='top'>Setup Script</Label>\n                    <Form>\n                        <TextArea\n                            rows={12}\n                            value={this.state.localScriptObj ? this.state.localScriptObj.setup_script : \"\"}\n                            onChange={(e) => this.onSetupScriptChange(e.target.value)}\n                            style={{height:'40vh'}}/>\n                    </Form> \n                </>}\n                panelOneLabel=\"Installer Script\"\n                panelTwo={<>\n                    <Label attached='top'>Setup Script Logs:</Label>\n                    <LazyLog \n                        extraLines={1}\n                        enableSearch\n                        text={this.props.selectedScriptData && this.props.selectedScriptData.setup_log === \"\" ? \"Log is empty\" : this.props.selectedScriptData.setup_log}\n                        height={windowHeight*.4}\n                        follow\n                        caseInsensitive\n                    />\n                </>}\n                panelTwoLabel=\"Installer Results\"\n            />),\n             (<InputResultTabs \n                    panelOne={<>\n                        <Label attached='top'>Required Python Packages</Label>\n                        <Form>\n                            <TextArea\n                                rows={12}\n                                value={this.state.localScriptObj ? this.state.localScriptObj.required_packages : \"\"}\n                                onChange={(e) => this.onPackageListChange(e.target.value)}\n                                style={{height:'40vh'}}/>\n                        </Form> \n                    </>}\n                    panelOneLabel=\"Package List\"\n                    panelTwo={<>\n                        <Label attached='top'>Package Installation Logs:</Label>\n                            <LazyLog \n                                extraLines={1}\n                                enableSearch\n                                text={this.props.selectedScriptData && this.props.selectedScriptData.installer_log === \"\" ? \"Log is empty\" : this.props.selectedScriptData.installer_log}\n                                height={windowHeight*.4}\n                                follow\n                                caseInsensitive />\n                    </>}\n                    panelTwoLabel=\"Install Log\"\n                />),\n             (<>\n                <Segment style={{marginBottom:'1vh'}}>\n                    <Label attached='top'>Script Status</Label> \n                </Segment>\n                <div style={{display:'flex', flexDirection:'column', alignItems:'center', justifyContent:'center', height:'100%'}}>\n                    <div style={{display:'flex', flexDirection:'row', alignItems:'center', justifyContent:'center', width:'100%'}}>\n                        {this.state.localScriptObj.install_error ?\n                            <Segment raised style={{width:'100%'}}>\n                                <Label attached='top'>Installation Error:</Label>\n                                <LazyLog \n                                    extraLines={1}\n                                    enableSearch\n                                    text={this.state.localScriptObj.install_error_code}\n                                    height={windowHeight/3}\n                                    follow\n                                    caseInsensitive />\n                            </Segment> :\n                                <Segment style={{width: '30vw', height:'30vh', margin:'1vh'}} raised>\n                                <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                                    <div style={{marginBottom:'1vh'}}>\n                                        <Icon name='thumbs up outline'color='green' size='massive'/>\n                                    </div>\n                                    <div>\n                                        <Header as='h1' textAlign='center'>\n                                            INSTALLED\n                                            <Header.Subheader>\n                                            No Issues\n                                            </Header.Subheader>\n                                        </Header>\n                                    </div>\n                                </div>\n                            </Segment>\n                        }\n                    </div>\n                </div>\n            </>)\n          ]\n\n        return (\n            <Modal \n                size='fullscreen'\n                open={this.props.visible}\n                onOpen={() => this.onModalOpen()}\n                style={{height:'95%', maxHeight:'95%', display:'flex', flexDirection:'column', justifyContent:'flex-start'}}\n            >\n                <ConfirmModal\n                    visible={this.state.showConfirmModal} \n                    message=\"You have selected save on a script. ARE YOU SURE? This cannot be undone and incorrect changes may cause errors and unwanted results.\"\n                    yesAction={() => this.onConfirmSave(this.state.localScriptObj)}\n                    noAction={this.toggleConfirmModal}\n                    toggleModal={this.toggleConfirmModal}\n                />\n                <ConfirmModal\n                    visible={this.state.showDeleteModal} \n                    message=\"You have chosen to delete this script. ARE YOU SURE? This cannot be undone and any dependent pipelines and settings will be lost.\"\n                    yesAction={() => this.onConfirmDelete()}\n                    noAction={this.toggleDeleteModal}\n                    toggleModal={this.toggleDeleteModal}\n                />\n                <Label \n                    corner='right'\n                    color='grey'\n                    icon='cancel'\n                    onClick={()=> this.props.handleScriptModalToggle()}\n                />\n                <Header icon='archive' content='Edit Script'/>\n                <Modal.Content style={{flex:10, height:'90%'}}>\n                    <LoadingIndicator/>\n                    <Segment >\n                        <Button circular icon='save' color='green' onClick={() => this.toggleConfirmModal()}/>\n                        <Button circular icon='trash' color='red' onClick={() => this.toggleDeleteModal()}/>\n                        <Button \n                            floated='right'\n                            toggle\n                            active={this.state.localScriptObj.mode==='DEPLOYED'}\n                            onClick={this.onToggleMode}\n                            color={this.state.localScriptObj.mode==='DEPLOYED' ? 'green' : 'red'}\n                        >\n                            {this.state.localScriptObj.mode==='DEPLOYED' ? 'In Production' : 'Testing Mode'}\n                        </Button>\n                    </Segment>\n                    <Segment style={{width:'100%', height:'90%'}}>\n                        <div style={{ display:'flex', flexDirection:'row', justifyContent:'flex-start', height:'100%', width:'100%' }}>\n                            <div style={{height:'100%'}}>\n                                <Menu icon='labeled' vertical>\n                                    <Menu.Item\n                                        name='pythoncode'\n                                        active={this.state.modalTab === 0}\n                                        onClick={() => this.setSelectedTab(0)}\n                                    >\n                                        <Icon name='code' />\n                                        Python Code\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='scriptmeta'\n                                        active={this.state.modalTab === 1}\n                                        onClick={() => this.setSelectedTab(1)}\n                                    >\n                                        <Icon name='settings' />\n                                        Settings\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='inputschema'\n                                        active={this.state.modalTab === 2}\n                                        onClick={() => this.setSelectedTab(2)}\n                                    >\n                                        <Icon name='table' />\n                                        Input Schema\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='filetypes'\n                                        active={this.state.modalTab === 3}\n                                        onClick={() => this.setSelectedTab(3)}\n                                    >\n                                        <Icon name='file alternate outline' />\n                                        Filetypes\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='installers'\n                                        active={this.state.modalTab === 4}\n                                        onClick={() => this.setSelectedTab(4)}\n                                    >\n                                        <Icon name='paper plane outline' />\n                                        Installers\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='packages'\n                                        active={this.state.modalTab === 5}\n                                        onClick={() => this.setSelectedTab(5)}\n                                    >\n                                        <Icon name='box' />\n                                        Packages\n                                    </Menu.Item>\n\n                                    <Menu.Item\n                                        name='status'\n                                        active={this.state.modalTab === 6}\n                                        onClick={() => this.setSelectedTab(6)}\n                                    >\n                                        <Icon name={this.state.localScriptObj.install_error ? \n                                            \"warning sign\" : \"thumbs up outline\"}\n                                            color={this.state.localScriptObj.install_error ? \n                                            \"red\" : \"green\"}/>\n                                        Status\n                                    </Menu.Item>\n                                </Menu>\n                            </div>\n                            <div style={{flexGrow:10}}>\n                                <Segment style={{width: '100%', height:'100%'}}>\n                                    {panes[this.state.modalTab]}\n                                </Segment>\n                            </div>\n                        </div> \n                    </Segment>\n                </Modal.Content>\n            </Modal>          \n        );\n    }\n}\n\n","import React, {useState} from 'react';\nimport { Label, Icon, Modal, Segment, Button, Form, Dropdown } from 'semantic-ui-react';\nimport {job_script, doc_script} from '../Shared/Templates/ScriptTemplates';\n\nfunction CreateNewScriptModal(props) {\n\n  const [newName, setNewName] = useState(\"\");\n  const [scriptType, setScriptType] = useState('RUN_ON_JOB_DOCS_PARALLEL');\n\n  const onAddClick = () => {\n    props.handleCreate(newName, scriptType, scriptType === 'RUN_ON_JOB_DOCS_PARALLEL' ? doc_script : job_script );\n    props.toggleModal();\n  }\n\n  return(\n    <Modal open={props.visible} size = 'small'>\n        <Label \n            corner='right'\n            color='grey'\n            icon='cancel'\n            onClick={()=>props.toggleModal()}\n        />\n        <Modal.Header>Create New {props.objectType}</Modal.Header>\n        <Modal.Content>\n            <Modal.Description>\n                <Segment padded>\n                    <Form>\n                        <Form.Field onChange = {(data) => { setNewName(`${data.target.value}`)}}>\n                            <label>{props.objectType} Name:</label>\n                            <input placeholder={`Enter new ${props.objectType}...`} />\n                        </Form.Field>\n                        <Dropdown\n                            options={[{key:1, text:'Run Once Per Job', value:'RUN_ON_JOB'},{key:2, text:'Run Once Per Doc', value:'RUN_ON_JOB_DOCS_PARALLEL'}]}\n                            selection\n                            onChange={\n                                (e, data) => {\n                                    setScriptType(data.value);\n                                }\n                            }\n                            value={scriptType}\n                        /> \n                    </Form>\n                </Segment>\n            </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n            <Button color='green' onClick={() => onAddClick()}>\n            <Icon name='checkmark' /> Create\n            </Button>\n            <Button color='grey' onClick={() => props.toggleModal()}>\n            <Icon name='cancel' /> Cancel\n            </Button>\n        </Modal.Actions>\n    </Modal>\n  );\n}\n\nexport default CreateNewScriptModal;\n\n","export const doc_script = `#Required Imports #####################################################################################################\n\n#e.g. from OCRUSREX import ocrusrex\n\n\t#Don't forget that, if these imports are not already available, you'll need to list them out in the\n\t#required dependencies so that Gremlin can install them in the environment. \n\n########################################################################################################################\n\n# user-defined functions to run on docs should expect the following inputs:\n#\n# docText = extracted document text\n# docType = file extension\n# docName = file name\n# docByteObj = actual document binary in bytes\n# logger = Gremlin database logger (resuts will are available via API)\n# scriptInputs = inputs for this script (NOT IMPLEMENTED. Will be NONE)\n# previousData = the combined output data from the previous step. If previous step was run in parallel on all docs, results are packed up into one json.\n#\n# the logger object will be a special instance of the logger just for user scripts and \n# will write out messages to the Gremlin UI (not implemented yet). Currently these\n# are stored in the underlying Celery logs.\n\ndef pythonFunction(*args, docText=None, docType=None, docName=None, docByteObj=None, nodeInputs={}, jobInputs={}, previousData={}, logger=None **kwargs):\n\n\t# logging - use the logger object passed in:\n\t\t# 1) logger.info(\"...\")\n\t\t# 2) logger.warn(\"...\")\n\t\t# 3) logger.error(\"...\")\n\tlogger.info(\"New function active\")\n\n\t#return values - your function must return a tuple of the following form:\n\t#\t( Completed, Message, Data, FileBytesObj, FileExtension, File Packaging Instructions)\n\t#\t\t  |         |       |        |              |\n\t#\t   Boolean    String  JSON    Bytes Obj       String        Dictionary\n\t#\n\t#   You must provided a value for Completed and Message. Everything else can\n\t#   Be returned as None or an empy object. If there is no data, return an \n\t#   empty JSON {}. If there is no file to return return None for the FileBytesObj\n\t#   and None for the File Extension. Otherwise, return the BytesObj representing\n\t#   the file that should be stored, along with the file extension. File names\n\t#   are currently determined automatically, though that may change.  \n\n    # Script must return the following variables:\n    # \n    # (finished, message, dataObj, fileBytes, fileExt, docPackagingObj)\n    #\n    # finished  -   Return True if script runs successfully. False if not. \n    # message   -   A string stored in the job status log. This can be an empty string if you don't need this.\n    # dataObj - this should be a dict of return values produced by your script. Any valid dict is OK.\n    # fileBytes - if you want to create a file and package it, pass the bytes of the file object back to Gremlin\n    # fileExt   - if you return file bytes, this is the extension the packager will put on the file bytes.\n    #\n    # finished, message, dataObj, fileBytes, fileExt\n    #\n    return (True, \"Sucess Message!\", {}, None, None, None)`;\n\nexport const job_script = `#Required Imports #####################################################################################################\n\n#e.g. from OCRUSREX import ocrusrex\n\n    #Don't forget that, if these imports are not already available, you'll need to list them out in the\n    #required dependencies so that Gremlin can install them in the environment. \n\n########################################################################################################################\n\n# user-defined functions to run on docs should expect the following, read-only objects:\n# job (THIS WILL BE DECONSTRUCTED IN FUTURE RELEASE INTO JSON OBJ /DICT)\n# step (THIS WILL BE DECONSTRUCTED IN FUTURE RELEASE INTO JSON OBJ /DICT)\n#\n# \n# the logger object will be a special instance of the logger just for user scripts and \n# will write out messages to the Gremlin UI (not implemented yet). Currently these\n# are stored in the underlying Celery logs.\n                                      \n\ndef pythonFunction(*args, job=None, step=None, logger=None, nodeInputs={}, jobInputs={}, previousData={}, **kwargs):\n\n    # logging - use the logger object passed in:\n        # 1) logger.info(\"...\")\n        # 2) logger.warn(\"...\")\n        # 3) logger.error(\"...\")\n    logger.info(\"New function active\")\n\n    # Return values - your function must return a tuple of the following form:\n    #   (Completed, Message, Data, FileBytesObj, FileExtension, File Packaging Instructions)\n    #              |        |     |            |              |\n    #     Boolean  | String |JSON |  Bytes Obj |    String    |           Dictionary\n    #\n    #   You must provided a value for Completed and Message. Everything else can\n    #   Be returned as None or an empy object. If there is no data, return an \n    #   empty JSON {}. If there is no file to return return None for the FileBytesObj\n    #   and None for the File Extension. Otherwise, return the BytesObj representing\n    #   the file that should be stored, along with the file extension. File names\n    #   are currently determined automatically, though that may change. \n    #\n    # Script must return the following variables:\n    # \n    # (finished, message, dataObj, fileBytes, fileExt, docPackagingObj)\n    #\n    # finished  -   Return True if script runs successfully. False if not. \n    # message   -   A string stored in the job status log. This can be an empty string if you don't need this.\n    # dataObj - this should be a dict of return values produced by your script. Any valid dict is OK.\n    # fileBytes - if you want to create a file and package it, pass the bytes of the file object back to Gremlin\n    # fileExt   - if you return file bytes, this is the extension the packager will put on the file bytes.\n    # docPackagingObj - if you want to return the original documents, you can specify how those get packaged\n    #                   with subfolders and the like. See separate instructions. \n\n    return (True, \"Success Message!\", {}, None, None, None)`;","import React, {Component} from 'react';\nimport { \n    Label,\n    Icon,\n    Modal,\n    Table,\n    Button,\n    Form,\n    Divider,\n    Segment,\n    Header} from 'semantic-ui-react';\nimport jsf from 'json-schema-faker';\nimport _ from 'lodash';\n\nfunction PipelineChoiceRow(props) {\n    return(\n        <Table.Row \n            key={props.pipeline.id}\n            onClick={() => props.handleSelectPipeline(props.pipeline.id)}\n            style={props.selected ? {backgroundColor: '#e2ffdb'} : {}}\n        > \n            <Table.Cell>{props.pipeline.name}</Table.Cell>\n            <Table.Cell>{props.pipeline.total_steps}</Table.Cell>\n            <Table.Cell>{props.pipeline.description}</Table.Cell>\n        </Table.Row>\n    );\n}\n\n//This is a pop-up modal that lets you create a new job.\nexport default class NewJobModal extends Component {\n\n    // Gremlin builds a schema for a given pipeline based on the schemas stored in each of the scripts used in the pipeline\n    // Json-schema-faker can take this jsonschema and use it to create a valid input. If you provide examples \n    // in your jsonschema, this generated schema will actualy be sufficient to run the job (though perhaps not what you want)\n    createInitialSchema = () => {\n        try {\n\n            let inputs = {};\n\n            const pipe = _.find(this.props.pipelines.items, {id: this.props.pipelines.selectedPipelineId});\n            console.log(\"Pipe: \",pipe);\n            let initialJobSettings = {schema: {}};\n            console.log(\"initialJobSettings: \", initialJobSettings);\n            let schema = JSON.parse(pipe.schema).schema;\n            console.log(\"Schema: \",schema);\n            \n            jsf.option({ \n                optionName: 'value',\n                ignoreMissingRefs: true,\n                useExamplesValue: true \n            });\n\n            // Build job input placeholder from schema object\n            for (var prop in schema) {\n                if (Object.prototype.hasOwnProperty.call(schema, prop)) {\n                    inputs[prop] = {\n                        name: schema[prop]['name'],\n                        schema: jsf.generate(schema[prop]['schema'])\n                    }\n                }\n            }\n            \n            console.log(\"initialJobInputs: \", inputs);\n            return JSON.stringify(inputs);   \n        }\n        catch(e) {\n            console.log(\"Error building schema: \", e);\n            return JSON.stringify({});\n        }\n    }\n\n    render() {\n\n        const { pipelines, visible, application } = this.props;\n\n        let activePipelines = pipelines.items ? pipelines.items : []; // ? pipelines.items.filter(pipeline => pipeline.production) : [];\n\n        return(\n            <Modal open={visible} size = 'small'>\n              <Label \n                  corner='right'\n                  color='grey'\n                  icon='cancel'\n                  onClick={()=>this.props.handleNewJobModalToggle()}\n              />\n              <Modal.Content>\n                { activePipelines.length > 0 ? <div>\n                        <Form>\n                            <Form.Field>\n                                <label>New Job Name:</label>\n                                <input value={application.newJobName} onChange = {(data) => { this.props.handleUpdateNewJobName(data.target.value)}}/>\n                            </Form.Field>\n                        </Form>\n                        <Divider horizontal/>\n                        <Table celled>\n                            <Table.Header>\n                                <Table.Row>\n                                    <Table.HeaderCell>Pipeline Name</Table.HeaderCell>\n                                    <Table.HeaderCell>Pipeline Steps</Table.HeaderCell>\n                                    <Table.HeaderCell>Pipeline Description</Table.HeaderCell>\n                                </Table.Row>\n                            </Table.Header>\n                            <Table.Body>\n                                {\n                                    activePipelines.map((pipeline) => (<PipelineChoiceRow key={pipeline.id} pipeline={pipeline} selected={pipeline.id===pipelines.selectedPipelineId} handleSelectPipeline={this.props.handleSelectPipeline}/>))\n                                }\n                            </Table.Body>\n                        </Table>\n                    </div> : <Segment placeholder>\n                        <Header icon>\n                        <Icon name='random' />\n                            No Pipelines Available...\n                        </Header>\n                    </Segment> }\n              </Modal.Content>\n              <Modal.Actions>\n                { activePipelines.length > 0 ? <Button color='green' onClick={() => this.props.handleCreateJob({\n                    name: application.newJobName,\n                    pipeline: pipelines.selectedPipelineId, \n                    job_inputs: this.createInitialSchema()\n                })}>\n                    <Icon name='checkmark' /> Create\n                </Button> : <div/>}\n              </Modal.Actions>\n            </Modal>\n          );\n    }\n}\n","//########################### USER SIGNUP FORM #################################\n\nexport const newUserForm_Schema = {\n    title: \"Invite New User\",\n    type: \"object\",\n    properties: {\n      name: {\n        type: \"string\",\n        title: \"Name:\"\n      },\n      username: {\n        type: \"string\",\n        title: \"Username:\"\n      },\n      email: {\n        type: \"string\",\n        title: \"E-Mail:\"\n      },\n      role: {\n        title: \"User Type:\",\n        type: \"string\",\n        hint: \"What level of user permissions should new user have?\",\n        enum: [\"LAWYER\", \"ADMIN\", \"LEGAL_ENG\"],\n        enumNames: [\"Lawyer\", \"Administrator\", \"Legal Engineer\"]\n      },\n    },\n    required: ['name', 'username', 'email', 'role']\n  };\n\nexport const newUserForm_Ui_Schema = {\n    role: {\n        \"ui:placeholder\": \"Choose user type\"\n    }\n};\n\n//########################### RESET PASSWORD FORM #################################\n\nexport const resetPassword_Schema = {\n  title: \"Change My Password\",\n  type: \"object\",\n  properties: {\n    old_password: {\n      type: \"string\",\n      title: \"Old Password:\"\n    },\n    new_password: {\n      type: \"string\",\n      title: \"New Password:\"\n    },\n    new_password2: {\n      type: \"string\",\n      title: \"Confirm New Password:\"\n    },\n  },\n  required: ['old_password', 'new_password', 'new_password2']\n};\n\nexport const resetPassword_Ui_Schema = {\n  old_password: {\n    \"ui:widget\": \"password\"\n  },\n  new_password: {\n    \"ui:widget\": \"password\"\n  },\n  new_password2: {\n    \"ui:widget\": \"password\"\n  }\n};\n\n//########################### CREATE JOB FORM #################################\n\nexport const newJob_Schema = {\n  title: \"Create Job\",\n  type: \"object\",\n  properties: {\n    name: {\n      type: \"string\",\n      title: \"Job Name:\"\n    },\n    notification_email: {\n      type: \"string\",\n      title: \"Notification email (when job completes):\"\n    },\n  },\n  required: ['properties', 'notification_email']\n};\n\nexport const newJob_Ui_Schema = {\n  name: {\n    \"ui:placeholder\": \"Give this job a name you can use to find it later.\"\n  },\n  notification_email: {\n    \"ui:placeholder\": \"(Optional) Enter an e-mail to receive a notification when this job completes.\"\n  }\n};","// ############################# GENERAL VALIDATIONS ###################################\nexport function validateEmail(email) {\n    const re = /^\\S+@\\S+$/;\n    return re.test(String(email).toLowerCase());\n}\n\n// ########################### NEW USER FORM VALIDATIONS ################################\nexport function validateNewUserForm(formData, errors) {\n    if (!validateEmail(formData.email)) {\n        errors.email.addError(\"Not a valid e-mail address!\");\n    }\n    return errors;\n}\n\n// ########################## PASSWORD RESET VALIDATIONS #################################\nexport function validateResetPassword(formData, errors) {\n    if(formData.new_password !== formData.new_password2) {\n        errors.new_password2.addError(\"Two new passwords must match!\");\n    }\n    return errors;\n}","import React, {Component} from 'react';\nimport { \n    Label,\n    Modal,\n    Button,\n} from 'semantic-ui-react';\nimport {\n    newUserForm_Schema,\n    newUserForm_Ui_Schema,\n} from '../Forms/FormSchemas';\nimport { \n    validateNewUserForm\n} from '../Forms/Validators';\nimport Form from \"@rjsf/semantic-ui\";\n\n//This is a pop-up modal that lets you create a new job.\nexport default class NewUserModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state={\n            username:\"\",\n            email:\"\",\n            name:\"\",\n            role:\"LAWYER\"\n        };\n    }\n\n    handleChange = ({formData}) => {\n        console.log(`update`, formData);\n        this.setState(formData);\n    }\n\n    handleSubmit = () => {\n        const state = this.state;\n        this.props.handleInviteUser(state);\n        console.log(\"Submit values: \", state);\n    }\n\n    render() {\n\n        const { toggle, visible } = this.props;\n\n        return(\n            <Modal open={visible} size = 'small'>\n                <Label \n                    corner='right'\n                    color='grey'\n                    icon='cancel'\n                    onClick={()=>toggle()}\n                />\n                <Modal.Content>\n                    <Form \n                        schema={newUserForm_Schema}\n                        uiSchema={newUserForm_Ui_Schema}\n                        validate={validateNewUserForm}\n                        onChange={this.handleChange}\n                        formData={this.state}\n                    >\n                        <Button color='blue' onClick={this.handleSubmit}>Submit</Button>\n                    </Form>\n                </Modal.Content>\n            </Modal>\n          );\n    }\n}\n","import React, { useState } from 'react';\nimport {Table, Confirm, Button, Dropdown} from 'semantic-ui-react';\n\nfunction RoleDropdown(props) {\n    const {user, handleChangeUserPermissions} = props;\n\n    let roles = [\"ADMIN\", \"LAWYER\", \"LEGAL_ENG\"];\n\n    if (user.role===\"ADMIN\") {\n        roles = [];\n    }\n    else if (user.role===\"LAWYER\") {\n        roles = roles.filter(role => role!==\"LAWYER\");\n    }\n    else if (user.role===\"LEGAL_ENG\") {\n        roles = roles.filter(role => role!==\"LEGAL_ENG\");\n    }\n    else {\n        roles = [];\n    }\n\n    let options = [];\n    if (roles.length > 0) {\n        options = roles.map((option) => <Dropdown.Item onClick={() => \n            handleChangeUserPermissions(user.id, option)}>{option}</Dropdown.Item>);\n    }\n    else {\n        options = [<Dropdown.Item disabled>Can't Change Admin</Dropdown.Item>];\n    }\n    \n    return (\n        <Dropdown \n            trigger={<Button\n                icon='caret down'\n                basic\n                circular\n            />}\n            options={options}\n            pointing='top left'\n            icon={null}    \n        />\n    );\n}\n\nfunction UserRow(props) {\n   \n    const {user, onDelete, handleChangeUserPermissions} = props;\n\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n    function deleteRow(userId) {\n        onDelete(user.id);\n        setShowDeleteModal(false);\n    }\n\n    return (\n        <>\n            <Confirm\n                open={showDeleteModal}\n                content={`You have chosen to delete user with username ${user.username}. Their jobs will be preserved, but only an admin can retrieve them. ARE YOU SURE?`}\n                confirmButton=\"DELETE\"\n                onCancel={() => setShowDeleteModal(!showDeleteModal)}\n                onConfirm={() => deleteRow(user.id)}\n            />\n            <Table.Row key={user.id}>\n                <Table.Cell width={4}>{user.username}</Table.Cell>\n                <Table.Cell width={3}>{user.email}</Table.Cell>\n                <Table.Cell width={3}>{user.name}</Table.Cell>\n                <Table.Cell width={3}>{user.role}</Table.Cell>\n                <Table.Cell textAlign='center' width={2}>\n                    <Button \n                        icon='trash'\n                        basic\n                        circular\n                        color='red'\n                        onClick={() => setShowDeleteModal(!showDeleteModal)}\n                    />\n                    <RoleDropdown\n                        user={user}\n                        handleChangeUserPermissions={handleChangeUserPermissions}\n                    />\n                </Table.Cell>\n            </Table.Row>\n        </>\n        \n    );\n}\n\nexport default UserRow;\n","import styled from 'styled-components';\n\nexport const ShadowBoxDiv = styled.div`\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n`;\n\nexport const VerticallyCenteredDiv = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 100%;\n    width: 100%;\n`;\n\nexport const HorizontallyCenteredDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    height:100%;\n    width:100%;\n`;\n\nexport const HorizontallyJustifiedDiv = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    height:100%;\n    width:100%;\n`;\n\nexport const FullWidthHorizontallyCenteredDiv = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nexport const CustomCanvas = styled.div`\n    position: relative;\n    background-size: 10px 10px;\n    background-color: #4f6791;\n    background-image:\n        linear-gradient(90deg,hsla(0,0%,100%,.1) 1px,transparent 0),\n        linear-gradient(180deg,hsla(0,0%,100%,.1) 1px,transparent 0);\n    width: 100%;\n    height: 100%;\n    cursor: not-allowed;\n`;","import React from 'react';\nimport { \n    Table,\n    Segment\n} from 'semantic-ui-react';\n\nexport const UserTable = (props) => {\n    return (\n        <Segment raised style={{\n            padding:'0px',\n            height:'60vh',\n            overflow:'scroll'\n        }}>\n            <Table selectable structured size='small'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell>Username</Table.HeaderCell>\n                        <Table.HeaderCell>E-mail</Table.HeaderCell>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Type</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {props.children}\n                </Table.Body>\n            </Table>\n        </Segment>);\n}","import React, { Component } from 'react'\nimport { \n    Grid,\n    Segment,\n    Button,\n    Icon,\n    Pagination,\n    Table,\n    Form,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react'\n    \nimport NewUserModal from './NewUserModal';\nimport UserRow from './UserRow';\nimport {HorizontallyJustifiedDiv, VerticallyCenteredDiv} from '../Shared/Wrappers';\nimport { UserTable } from './UserTable';\n\nconst UserCreateAndSearchBar = (props) => {\n    return (<Segment>\n        <HorizontallyJustifiedDiv>\n            <div style={{width:'25vw'}}>\n                <Form  onSubmit={props.handleFetchUsers}>\n                    <Form.Input\n                        icon={<Icon name='search' inverted circular link />}\n                        placeholder='Search...'\n                        onChange={(data)=>props.handleSetUserNameFilter(data.target.value)}\n                        value={props.filterValue}\n                    />\n                </Form>\n            </div>\n            <div>\n                <Button color='green' onClick={() => props.handleToggleInviteUserModal()}>\n                    <Icon name='plus square' />Invite New User\n                </Button>\n            </div>\n        </HorizontallyJustifiedDiv>\n    </Segment>);\n}\n\nclass UserTab extends Component {\n\n    componentDidMount() {\n        this.props.handleFetchUsers();\n    }\n\n    render() {\n\n        const {\n            items,\n            loading,\n            page, \n            pages,\n            searchText,\n            selectedUser\n        } = this.props.users;\n\n        const { \n            handleDeleteUser,\n            showInviteModal,\n            handleToggleInviteUserModal\n        } = this.props;\n\n        const users = items ? items : [];\n\n        let rows = [];\n        if (users.length > 0) {\n            for (let i = 0; i < users.length; i++) {\n                rows.push(<UserRow \n                        key={users[i].id}\n                        user={users[i]}\n                        selected={users[i].id===selectedUser}\n                        onDelete={handleDeleteUser}\n                        handleChangeUserPermissions={this.props.handleChangeUserPermissions}\n                    />);\n            }\n        }\n        else {\n            rows.push(<Table.Row  key={0}>\n                <Table.Cell textAlign='center' colSpan='8'>No users match your selection</Table.Cell>\n            </Table.Row>);\n        }\n        \n        return (\n            <VerticallyCenteredDiv>\n                <NewUserModal\n                    handleInviteUser={this.props.handleCreateUser}\n                    toggle={handleToggleInviteUserModal}\n                    visible={showInviteModal}\n                />\n                 {loading? <Dimmer active>\n                        <Loader>Loading...</Loader>\n                    </Dimmer> : <></>}\n                <UserCreateAndSearchBar\n                    handleSetUserNameFilter={this.props.handleSetUserNameFilter}\n                    handleToggleInviteUserModal={handleToggleInviteUserModal}\n                    handleFetchUsers={this.props.handleFetchUsers}\n                    filterValue={searchText}\n                />\n                <UserTable>\n                    {rows}\n                </UserTable>\n                <div style={{\n                        display:'flex',\n                        flexDirection:'row',\n                        justifyContent:'center',\n                        alignItems:'center',\n                        marginTop:'2vh'\n                    }}>\n                        <div>\n                            <Pagination\n                                activePage={page}\n                                onPageChange={(e, { activePage }) => this.props.handleUserPageChange(activePage)}\n                                totalPages={pages}\n                            />\n                        </div>\n                </div>\n            </VerticallyCenteredDiv>\n        );\n    }\n}\n\nexport default UserTab;\n","\nimport React, { useState } from 'react'\nimport { \n    Table,\n    Button,\n    Label,\n    Image,\n    Confirm } from 'semantic-ui-react'\n\nfunction SupportedTypes (props) {\n    try {\n        let extensions = JSON.parse(props.extensions);\n        return (extensions.map(ext => <Label color='grey' key={`${ext}`} size='tiny'>{ext}</Label>));\n    } catch {\n        return <Label color='red' size='tiny'>ERROR</Label>;\n    }\n\n}\n\nconst ScriptRow = (props) => {\n\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n    return (\n        <Table.Row\n            style={props.selected ? {backgroundColor: '#e2ffdb', overflowWrap:\"break-word\"} : {overflowWrap:\"break-word\"}}\n            textAlign='center'\n        >\n            <Confirm\n                open={showDeleteConfirm}\n                content=\"You have chosen to delete a script (which will delete any pipelines that depend on it).\n                    ARE YOU SURE? This cannot be undone.\"\n                confirmButton=\"DELETE\"\n                onCancel={() => setShowDeleteConfirm(!showDeleteConfirm)}\n                onConfirm={() => props.onDelete(props.script.id)}\n            />\n            <Table.Cell \n                onClick={() => props.onClick()}\n                style={{\n                    cursor:\"pointer\",\n                    color:\"blue\",\n                    textDecoration:\"underline\"\n                }}\n                textAlign='left'>\n                    {props.script.human_name}\n            </Table.Cell>\n            <Table.Cell> \n                {props.script.description ? props.script.description.substring(0,25) : \"No Description...\"}\n            </Table.Cell>\n            <Table.Cell>\n                <div>\n                    {props.script.type === \"RUN_ON_JOB\" ? <Image src='./serial_job.png' size='mini' /> : <Image src='./parallel_job.png' size='mini' />}\n                </div>\n            </Table.Cell>\n            <Table.Cell>\n                <SupportedTypes extensions={props.script.supported_file_types}/>\n            </Table.Cell>\n            <Table.Cell>\n                {props.script.mode==='DEPLOYED' ? <Label color='green' size='tiny'>DEPLOYED</Label> : <Label color='yellow' size='tiny'>TEST</Label>}\n            </Table.Cell>\n            <Table.Cell>\n                <Button\n                    basic\n                    circular\n                    color='red'\n                    icon='trash'\n                    onClick={() => setShowDeleteConfirm(!showDeleteConfirm)}\n                />\n                <Button\n                    basic\n                    circular\n                    color='green'\n                    icon='download'\n                    onClick={() => props.onDownload(props.script.id)}\n                />\n            </Table.Cell>\n        </Table.Row>\n    );\n}\n\nexport default ScriptRow;","import React from 'react';\nimport {\n    Segment, \n    Dimmer,\n    Loader, \n    Placeholder\n} from 'semantic-ui-react';\n\nexport function SidebarLoadingPlaceholder(props) {\n    return (\n        <Segment style={{width:'100%', height:'100%'}}>\n            <Dimmer active inverted>\n                <Loader inverted>{props.LoadingText}</Loader>\n            </Dimmer>\n            <Placeholder>\n                <Placeholder.Image rectangular />\n            </Placeholder>\n        </Segment>\n    );\n}","import React from 'react';\nimport { \n    Segment,\n    Button,\n    Form,\n    Icon,\n    Label,\n    Grid,\n    Header, \n    Message,\n    Menu\n} from 'semantic-ui-react';\nimport Circle from 'react-circle';\n\nimport { SidebarLoadingPlaceholder } from './Placeholders';\n\n\nexport const CreateAndSearchBar = (props) => {\n\n    const { onChange, onCreate, onImport, onSubmit, placeholder, value } = props;\n\n    let buttongroup = <></>;\n    let buttons = [\n        (<Button\n            key='create_new_button'\n            positive\n            onClick={onCreate}\n        >\n            Create New\n        </Button>)\n    ];\n\n    if (onImport) {\n        buttons.push(<Button.Or key='create_and_search_button_or'/>);\n        buttons.push(\n        <Button\n            key='import_type_button'\n            onClick={onImport}\n        >\n            Import New\n        </Button>);\n    }\n\n    buttongroup =  (\n        <Button.Group floated='right' style={{marginRight:'10px'}} >\n            {buttons}\n        </Button.Group>\n    );\n\n    return (<Segment raised>\n        <div style={{\n            height: '100%',\n            display:'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between'\n        }}>\n            <div style={{width:'25vw'}}>\n                <Form onSubmit={onSubmit}>\n                    <Form.Input\n                        icon='search'\n                        placeholder={placeholder}\n                        onChange={(data)=> onChange(data.target.value)}\n                        value={value}\n                    />\n                </Form>\n            </div>\n            <div>\n                {buttongroup}\n            </div>\n        </div>\n    </Segment>);\n}\n\nexport const JobDigraphButtonPanel = (props) => {\n\n    const { digraphEngine } = props;\n\n    return (\n        <Menu icon>\n            <Menu.Item\n                name='zoom_in'\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    digraphEngine.zoomIn();\n                }}\n            >\n                <Icon name='zoom-in' size='large'/>\n            </Menu.Item>\n            <Menu.Item\n                name='zoom_out'\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    digraphEngine.zoomOut();\n                }}\n            >\n                <Icon name='zoom-out' size='large'/>\n            </Menu.Item>\n            <Menu.Item\n                name='zoom_fit'\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    digraphEngine.zoomToFit();\n                }}\n            >\n                <Icon name='compress' size='large'/>\n            </Menu.Item>\n      </Menu>\n    );\n};\n\nexport const JobControl = (props) => {\n\n    const {\n        job,\n        pipeline,\n        handleUpdateJob, \n    } = props;\n\n    if (!job) {\n        return <></>;\n    }\n\n    return ( \n        <Grid>\n            <Grid.Row stretched>\n                <Grid.Column stretched>\n                    <Header textAlign='center' as='h2'>\n                        <Header.Content>\n                            { job ? job.name : \"[JOB NAME]\"}\n                            <Header.Subheader>({pipeline ? pipeline.name : \"[PIPELINE NAME]\"})</Header.Subheader>\n                        </Header.Content>\n                    </Header>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n                <Grid.Column stretched textAlign='center'>\n                {\n                    job.started ? (\n                        <div>\n                            <Header textAlign='center' as='h5'>Progress:</Header>\n                            <Circle \n                                style={{textAlign:\"center\"}}\n                                progress={(100 * job.completed_tasks/job.task_count).toFixed(2)}\n                            />\n                        </div>\n                    ) : (\n                        <div style={{margin:'auto'}} onClick={() => {\n                            let updatedObject = {id: job.id, queued: true};\n                            handleUpdateJob(updatedObject);\n                        }}>\n                            <Header textAlign='center' as='h4' style={{cursor: 'pointer'}}>\n                                <Icon size='big' style={{margin: 'auto'}} name='video play'/>\n                                Start\n                            </Header>   \n                        </div>\n                    )\n                }\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column textAlign='center'>\n                    <Header textAlign='center' as='h5'>Status:</Header>\n                    \n                    {job.queued ? <Label color='green' size='tiny'>Queued</Label> : <div/>}  \n                    {job.started & !job.finished ? <Label color='blue' size='tiny'>Running...</Label> : <div/>}\n                    {job.error ? <Label color='red' size='tiny'>ERROR</Label> : <div/>}  \n                    {job.finished ? <Label color='green' size='tiny'>Finished</Label> : <div/>}  \n                </Grid.Column>\n                <Grid.Column textAlign='center'>\n                    <Header textAlign='center' as='h5'>Notified Email:</Header>\n                    {job.notification_email ? \n                        <Label color='green' size='tiny'>{job.notification_email}</Label> : \n                        <Label color='grey' size='tiny'>None Provided</Label>}  \n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n                <Grid.Column stretched textAlign='center'>\n                    <Message size='tiny' style={{overflowWrap:\"break-word\"}}>\n                        <Message.Content>\n                        <Message.Header as='h6'>State:</Message.Header>\n                            {job.status}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>                \n    );\n}  \n\nexport const JobStatusCol = (props) => {\n\n    const {\n        job,\n        pipeline,\n        handleUpdateJob, \n        style\n    } = props;\n\n    return ( \n        <Segment style={style}>\n            {job ? \n                <JobControl\n                    job={job}\n                    pipeline={pipeline}\n                    handleUpdateJob={handleUpdateJob}\n                />\n                :\n                <SidebarLoadingPlaceholder LoadingText='Creating Test Job...'/>\n            }\n        </Segment> \n       \n                    \n    );\n}  \n","import React from 'react';\nimport { \n    Table,\n    Segment\n} from 'semantic-ui-react';\n\nexport const ScriptTable = (props) => {\n    return (\n        <Segment raised style={{\n            padding:'0px',\n            height:'70vh',\n            overflow:'scroll'\n        }}>\n            <Table selectable structured size='small'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Description</Table.HeaderCell>\n                        <Table.HeaderCell>Type</Table.HeaderCell>\n                        <Table.HeaderCell>Doc Types</Table.HeaderCell>\n                        <Table.HeaderCell>Status</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {props.children}\n                </Table.Body>\n            </Table>\n        </Segment>);\n}","import React, { Component } from 'react'\nimport _ from 'lodash';\nimport Fuse from 'fuse.js';\n\nimport { VerticallyCenteredDiv } from '../Shared/Wrappers';\nimport {truncator} from '../../Utils/maths';\nimport ScriptRow from './ScriptRow';\nimport { CreateAndSearchBar } from '../Shared/Controls';\nimport { ScriptTable } from './ScriptTable';\n\nexport default class ScriptGridTab extends Component {\n\n    getPipelineStepsForPipeline = (pipelineId) => {\n        return _.filter(this.props.pipelinesteps.items,{ pipeline: pipelineId })\n    }\n\n    getScriptsForPipelines = (pipelinesteps) => {\n        return pipelinesteps.map((step) => {\n            return _.find(this.props.scripts.items, {id:step.script})\n        })\n    }\n\n    uploadScriptArchive = (event) => {\n        event.preventDefault();\n        console.log(event.target.files[0]);\n        this.props.handleUploadScript(event.target.files[0]);\n    }\n\n    render() {\n\n        const fileInputRef = React.createRef();\n\n        let wholeNumberRows = truncator(this.props.pipelines.length/4,0);\n        if (this.props.pipelines.length/4 > wholeNumberRows) wholeNumberRows++; \n\n        const scripts = this.props.scripts.items ? this.props.scripts.items : [];\n        const { nameFilterValue } = this.props;\n        const scriptFuse = new Fuse(scripts, {\n            threshold: 0.4,\n            keys: ['human_name', 'description']\n        });\n        const filteredScripts = nameFilterValue ===\"\" ? scripts : scriptFuse.search(nameFilterValue ).map((item) => item.item);    \n\n        let rows = [];\n\n        for (let count = 0; count < filteredScripts.length; count++) {\n            rows.push(<ScriptRow \n                key={filteredScripts[count].id}\n                onClick={() => this.props.handleScriptSelect(filteredScripts[count].id)}\n                script={filteredScripts[count]}\n                selected={filteredScripts[count].id===this.props.scripts.selectedScriptId}\n                toggleEditModal={this.props.handleScriptModalToggle}\n                onDelete={this.props.handleDeleteScript}\n                onDownload={this.props.handleDownloadScript}\n                />);\n        }\n\n        return (\n            <VerticallyCenteredDiv>\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    hidden\n                    onChange={this.uploadScriptArchive}\n                />\n                <CreateAndSearchBar\n                    onChange={this.props.handleChangeScriptNameFilter}\n                    onCreate={this.props.handleNewScriptModalToggle}\n                    onSubmit={(data)=> {}} \n                    onImport={() => fileInputRef.current.click()}\n                    placeholder='Search for script...'\n                    value={nameFilterValue} \n                />\n                <ScriptTable loading={this.props.scripts.loading}>\n                    {rows}\n                </ScriptTable>\n            </VerticallyCenteredDiv>      \n        );\n    }\n}","export function truncator(numToTruncate, intDecimalPlaces) {    \n    var numPower = Math.pow(10, intDecimalPlaces); // \"numPowerConverter\" might be better\n    return ~~(numToTruncate * numPower)/numPower;\n}","import React, { Component } from 'react'\nimport { \n    List,\n    Card,\n    Tab,\n    Message,\n    Segment,\n    Accordion,\n    Icon,\n    Button\n} from 'semantic-ui-react'\n\nimport {\n    resetPassword_Schema,\n    resetPassword_Ui_Schema\n} from '../Forms/FormSchemas';\nimport { \n    validateResetPassword\n} from '../Forms/Validators';\nimport Form from \"@rjsf/semantic-ui\";\n\n\nexport default class SettingsTab extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showChangePasswordModal: false,\n            expandPasswordReset: false,\n            old_password: '',\n            new_password: '',\n            new_password2: ''\n        };\n    }\n\n    handleResetValuesChange = ({formData}) => {\n        console.log(`update`, formData);\n        this.setState(formData);\n    }\n\n    resetChangePasswordForm = (success) => {\n        this.setState = ({\n            expandPasswordReset: false,\n            old_password: '',\n            new_password: '',\n            new_password2: ''\n        });\n    }\n\n    handleResetValuesSubmit = () => {\n        console.log(`Try to reset password with old_password ${this.state.old_password}, \n                    old_password2 ${this.state.old_password2} and new_password ${this.state.new_password}`);\n        this.props.handleChangePassword(this.state.old_password, this.state.new_password);\n        this.togglePasswordReset();\n    }\n\n    togglePasswordReset = () => {\n        this.setState({\n            expandPasswordReset: !this.state.expandPasswordReset\n        });\n    }\n\n    toggleChangePasswordModal = () => {\n        this.setState({\n            showChangePasswordModal: !this.state.showChangePasswordModal\n        });\n    }\n\n    render() {\n        const {email, name, role, username} = this.props.user;\n\n        const panes = [\n            { \n                menuItem: 'Current User', \n                render: () => <Tab.Pane>\n                    <Card fluid>\n                        <Card.Content header='User Information' />\n                        <Card.Content>\n                            <List>\n                                <List.Item>\n                                    <List.Icon name='users' />\n                                    <List.Content>{name}</List.Content>\n                                </List.Item>\n                                <List.Item>\n                                    <List.Icon name='user outline' />\n                                    <List.Content>{username}</List.Content>\n                                </List.Item>\n                                <List.Item>\n                                    <List.Icon name='mail' />\n                                    <List.Content>\n                                        <a href='mailto:jack@semantic-ui.com'>{email}</a>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item>\n                                    <List.Icon name='linkify' />\n                                    <List.Content>User Type: {role}</List.Content>\n                                </List.Item>\n                            </List>\n                        </Card.Content>\n                        <Card.Content extra>\n                            <Accordion fluid styled>\n                                <Accordion.Title\n                                    active={this.state.expandPasswordReset}\n                                    index={0}\n                                    onClick={this.togglePasswordReset}\n                                >\n                                <Icon name='dropdown' />\n                                Change Password\n                                </Accordion.Title>\n                                <Accordion.Content active={this.state.expandPasswordReset}>\n                                    <Form \n                                        schema={resetPassword_Schema}\n                                        uiSchema={resetPassword_Ui_Schema}\n                                        validate={validateResetPassword}\n                                        onChange={this.handleResetValuesChange}\n                                        formData={this.state}\n                                    >\n                                        <Button color='blue' onClick={this.handleResetValuesSubmit}>Change Password</Button>\n                                    </Form>\n                                </Accordion.Content>\n                            </Accordion>\n                        </Card.Content>\n                    </Card>\n                </Tab.Pane>\n            },\n            { menuItem: 'System Settings', render: () => <Tab.Pane>\n                    <Segment style={{width:'100%'}}>\n                        <Message\n                            icon='inbox'\n                            header='Coming Soon!'\n                            content='For now, please use the admin panel on the backend.'\n                        />\n                    </Segment>\n                </Tab.Pane> }\n          ]\n        \n        if (role==='ADMIN'){\n            panes.push({ \n                menuItem: 'Admin Settings',\n                render: () => <Tab.Pane>\n                    <Segment style={{width:'100%'}}>\n                        <Message\n                            icon='inbox'\n                            header='Coming Soon!'\n                            content='For now, please use the admin panel on the backend.'\n                        />\n                    </Segment>\n                </Tab.Pane> \n            });\n        }\n\n        return (\n            <div>\n                <Tab\n                    menu={{ fluid: true, vertical: true }}\n                    menuPosition='right'\n                    panes={panes}\n                    style={{minHeight:'40vh'}}\n                />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { Message, Modal, Label, Icon, Segment } from 'semantic-ui-react';\nimport { LazyLog } from 'react-lazylog';\n\nfunction LogModal(props) {\n    return (\n            <Modal open={props.visible}>\n                <Label \n                    corner='right'\n                    color='grey'\n                    icon='cancel'\n                    onClick={()=> props.handleModalToggle()}\n                />\n                <Modal.Content>   \n                    <Modal.Header as=\"h3\">Pipeline System Logs:</Modal.Header> \n                    <Segment>\n                        {props.loading ? \n                        <Message icon>\n                            <Icon name='circle notched' loading />\n                            <Message.Content>\n                                <Message.Header>Just one second</Message.Header>\n                                Fetching logs for you...\n                            </Message.Content>\n                        </Message> :\n                        <LazyLog \n                            extraLines={1}\n                            enableSearch\n                            text={props.log ? props.log : \"No logs...\"}\n                            height={400}\n                            follow\n                            caseInsensitive />}\n                    </Segment>  \n                </Modal.Content>\n            </Modal>);\n}\n\nexport default LogModal;","import React, { Component } from 'react';\nimport ReactJson from 'react-json-view';\nimport { Accordion, Icon, Dimmer, Loader, Segment } from 'semantic-ui-react';\n\nexport default class JsonViewer extends Component {\n\n    static defaultProps = {\n        theme: \"bright:inverted\",\n        src: null,\n        collapsed: true,\n        collapseStringsAfter: 15,\n        groupArraysAfter: 500,\n        onAdd: true,\n        onEdit: true,\n        onDelete: true,\n        displayObjectSize: true,\n        enableClipboard: true,\n        indentWidth: 4,\n        displayDataTypes: true,\n        iconStyle: \"triangle\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hideJson:false,\n        };\n    }\n\n    render() {\n\n        const {\n            collapseStringsAfter,\n            groupArraysAfter,\n            displayObjectSize,\n            enableClipboard,\n            theme,\n            iconStyle,\n            collapsed,\n            indentWidth,\n            displayDataTypes,\n        } = this.props;\n\n        const style = this.props.style ? this.props.style : {\n            padding: \"10px\",\n            borderRadius: \"3px\",\n            margin: \"10px 0px\",\n            maxHeight: '30vh', \n        };\n\n        return (\n            <Segment style={{...this.props.style}}>\n                <Dimmer active={this.props.loading} inverted>\n                    <Loader size='tiny' inverted>Loading</Loader>\n                </Dimmer>\n                <Accordion fluid style={{...this.props.style}}>\n                    <Accordion.Title\n                        active={this.state.hideJson}\n                        onClick={() => this.setState({hideJson: !this.state.hideJson})}\n                    >\n                        <Icon name='dropdown' />\n                        {this.props.title ? this.props.title : \"Data\"}:\n                    </Accordion.Title>\n                    <Accordion.Content active={this.state.hideJson} style={{overflowY:'scroll'}}>\n                        <ReactJson \n                            collapsed={collapsed}\n                            style={{...style, fontSize: 9}}\n                            theme={theme}\n                            src={this.props.jsonObj}\n                            collapseStringsAfterLength={collapseStringsAfter}\n                            groupArraysAfterLength={groupArraysAfter}\n                            displayObjectSize={displayObjectSize}\n                            enableClipboard={enableClipboard}\n                            indentWidth={indentWidth}\n                            displayDataTypes={displayDataTypes}\n                            iconStyle={iconStyle}\n                        />\n                    </Accordion.Content>\n                </Accordion>\n            </Segment>   \n        );\n    }\n}\n","import React, { useState } from 'react';\nimport {\n    Header,\n    Grid,\n    Dimmer,\n    Loader,\n    Modal,\n    Button,\n    Label,\n    Segment\n} from 'semantic-ui-react';\nimport AceEditor from \"react-ace\";\nimport JsonViewer from './JsonViewer';\n\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-min-noconflict/mode-python\";\nimport \"ace-builds/src-min-noconflict/theme-solarized_dark\";\nimport 'ace-builds';\nimport \"ace-builds/webpack-resolver\";\n\nexport function TransformScriptBuilderModal(props) {\n    \n    const {\n        myResult,\n        test_job,\n        pipelineStep,\n        toggleModalVisible,\n        visible,\n        updatePipelineStep,\n        handleTestTransformForResult\n    } = props;\n\n    const [transform, updateTransform] = useState(pipelineStep && pipelineStep.input_transform ? pipelineStep.input_transform : \"No transform...\");\n\n    const style = {\n        padding: \"10px\",\n        borderRadius: \"3px\",\n        margin: \"10px 0px\",\n        maxHeight: \"200px\",\n        width: \"100%\"\n    };\n\n    let transformed_data = {};\n    try {\n        transformed_data = test_job.test_transforms[myResult.id];\n    } catch {}\n\n    if (!myResult) {\n        return (\n            <Modal\n                onClose={() => toggleModalVisible()}\n                open={visible}\n            >\n                <Modal.Header>Test New Data Transforms</Modal.Header>\n                    <Modal.Content>\n                        <Modal.Description>\n                            It doesn't appear you've run a test job or else something has gone wrong,\n                            and this node doesn't have any results.\n                        </Modal.Description>\n                    </Modal.Content>\n            </Modal>\n        );\n    }\n\n    let input_data = { data: null };\n    if (myResult.raw_input_data) {\n        try {\n            input_data = JSON.parse(myResult.raw_input_data);\n        } catch {}\n    }\n\n    return (\n        <Modal\n            onClose={() => toggleModalVisible()}\n            open={visible}\n        >\n            <Modal.Header>Test New Data Transforms</Modal.Header>\n            <Modal.Content>\n                <Dimmer active={test_job.transform_loading} inverted>\n                    <Loader size='tiny' inverted>Applying Transform...</Loader>\n                </Dimmer>\n                <Grid columns={1}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Header>Test Out New Transform Scripts</Header>\n                            <p>\n                                Test out different Python transformation scripts to see how input_data from preceding nodes\n                                will be be altered by this node before passing them its script. Useful to adjust output data\n                                from an existing script / node to match what you need for a different node. This lets you mix\n                                and match nodes more easily. \n                            </p>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Grid columns={2} divided>\n                                <Grid.Row>\n                                    <Grid.Column>\n                                        <Segment style={{maxHeight:'30vh'}}>\n                                            <Label attached='top'>Input Data:</Label>\n                                            <JsonViewer collapsed={false} jsonObj={input_data}/>\n                                        </Segment>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Segment style={{maxHeight:'30vh'}}>\n                                            <Label attached='top'>Transformed Data:</Label>\n                                            <JsonViewer collapsed={false} jsonObj={transformed_data ? transformed_data : { message: \"It appears no test transforms are available.\"}}/>\n                                        </Segment>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Segment style={{maxHeight:'30vh'}}>\n                                <Label attached='top'>Draft Transform Script</Label>\n                                    <AceEditor\n                                        style={style}\n                                        mode=\"python\"\n                                        theme=\"tomorrow\"\n                                        name=\"code_editor\"\n                                        fontSize={11}\n                                        showPrintMargin={true}\n                                        showGutter={true}\n                                        highlightActiveLine={true}\n                                        value={ transform }\n                                        onChange={updateTransform}\n                                        setOptions={{\n                                            enableBasicAutocompletion: true,\n                                            enableLiveAutocompletion: true,\n                                            enableSnippets: true,\n                                            showLineNumbers: true,\n                                            tabSize: 4,\n                                        }}/>\n                            </Segment>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Button\n                                floated='right'\n                                size='mini'\n                                icon='play'\n                                content='Test'\n                                color='orange'\n                                onClick={() => handleTestTransformForResult(myResult.id, transform)}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Modal.Content>\n            <Modal.Actions>\n                <Button \n                    content=\"Cancel\"\n                    labelPosition='right'\n                    icon='exit'\n                    negative\n                    onClick={() => toggleModalVisible}\n                />\n                <Button\n                    content=\"Save\"\n                    labelPosition='right'\n                    icon='save'\n                    positive\n                    onClick={() => {\n                        let updatedStep = {...pipelineStep};\n                        updatedStep.input_transform = transform;\n                        updatePipelineStep(updatedStep);\n                    }}\n                />\n            </Modal.Actions>\n            </Modal>\n           \n    );\n}","import * as React from 'react';\nimport ReactJson from 'react-json-view';\nimport { Segment, Button, Header, Icon, Label, Popup } from 'semantic-ui-react';\nimport ConfirmModal from '../Shared/ConfirmModal';\n\nconst ConfirmChange = (props) => (\n    <ConfirmModal\n        visible={props.visible}\n        message='YOu have chosen to save the changes you made to this JSON object. ARE YOU SURE?'\n        yesAction={() => props.onConfirm()}\n        noAction={props.toggleModal}\n        toggleModal={props.toggleModal}\n    />\n);\n\nexport class JsonEditor extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            json: props.jsonObj,\n            collapsed: true,\n            showSaveSettingsConfirm: false,\n            expanded: true,\n        };\n    }\n\n    updateJson = () => {\n        this.props.onSave(JSON.stringify(this.state.json));\n        this.toggleConfirmModal();\n    };\n\n    onSchemaChange = (json) => {\n        this.setState({\n            json,\n        });\n    };\n\n    toggleConfirmModal = () => {\n        this.setState({\n            showSaveSettingsConfirm: !this.state.showSaveSettingsConfirm,\n        });\n    };\n\n    render() {\n        const editorProps = {\n            theme: 'rjv-default',\n            name: false,\n            src: null,\n            collapsed: false,\n            collapseStringsAfter: 15,\n            onAdd: true,\n            onEdit: true,\n            onDelete: true,\n            displayObjectSize: true,\n            enableClipboard: true,\n            indentWidth: 4,\n            displayDataTypes: true,\n            iconStyle: 'triangle',\n        };\n\n        return (\n            <>\n                <ConfirmChange\n                    visible={this.state.showSaveSettingsConfirm}\n                    toggleModal={this.toggleConfirmModal}\n                    onConfirm={this.updateJson}\n                />\n                <div style={{ textAlign: 'center' }}>\n                    <div>\n                        <Header as='h4'>\n                            <Icon name='settings' />\n                            <Header.Content>\n                                Persisted Script Inputs\n                                <Header.Subheader as='h6'>\n                                    (Overriden by Conflicting Job Settings)\n                                </Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </div>\n                <Segment style={{ width: '350px' }}>\n                    <Popup\n                        content={this.props.toolTip}\n                        on='hover'\n                        trigger={<Label attached='top'>Settings JSON:</Label>}\n                    />\n                    <ReactJson\n                        collapsed={this.state.collapsed}\n                        style={{\n                            padding: '10px',\n                            borderRadius: '3px',\n                            margin: '10px 0px',\n                        }}\n                        name={editorProps.name}\n                        theme={editorProps.theme}\n                        src={this.state.json}\n                        collapseStringsAfterLength={\n                            editorProps.collapseStringsAfter\n                        }\n                        onEdit={(e) => {\n                            this.onSchemaChange(e.updated_src);\n                        }}\n                        onDelete={(e) => {\n                            this.onSchemaChange(e.updated_src);\n                        }}\n                        onAdd={(e) => {\n                            this.onSchemaChange(e.updated_src);\n                        }}\n                        displayObjectSize={editorProps.displayObjectSize}\n                        enableClipboard={editorProps.enableClipboard}\n                        indentWidth={editorProps.indentWidth}\n                        displayDataTypes={editorProps.displayDataTypes}\n                        iconStyle={editorProps.iconStyle}\n                    />\n                </Segment>\n                <div style={{ textAlign: 'right' }}>\n                    <Button primary onClick={() => this.toggleConfirmModal()}>\n                        Save\n                    </Button>\n                </div>\n            </>\n        );\n    }\n}\n","import * as React from 'react';\nimport { Segment, Button, Header, Icon, Label, Popup } from 'semantic-ui-react';\nimport AceEditor from 'react-ace';\n\nimport 'ace-builds/src-min-noconflict/ext-language_tools';\nimport 'ace-builds/src-min-noconflict/mode-python';\nimport 'ace-builds/src-min-noconflict/theme-solarized_dark';\nimport 'ace-builds';\nimport 'ace-builds/webpack-resolver';\n\nimport ConfirmModal from '../Shared/ConfirmModal';\n\nconst ConfirmChange = (props) => (\n    <ConfirmModal\n        visible={props.visible}\n        message='YOu have chosen to save the changes you made to this JSON object. ARE YOU SURE?'\n        yesAction={() => props.onConfirm()}\n        noAction={props.toggleModal}\n        toggleModal={props.toggleModal}\n    />\n);\n\nexport class CodeEditor extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            code: props.code,\n            collapsed: true,\n            showSaveConfirm: false,\n        };\n    }\n\n    toggleConfirmModal = () => {\n        this.setState({\n            showSaveConfirm: !this.state.showSaveConfirm,\n        });\n    };\n\n    updateCode = () => {\n        this.props.onSave(this.state.code);\n        this.toggleConfirmModal();\n    };\n\n    onCodeChange = (code) => {\n        console.log(\"Code change:\", code);\n        this.setState({\n            code,\n        });\n    };\n\n    render() {\n        const style = {\n            padding: '10px',\n            borderRadius: '3px',\n            margin: '10px 0px',\n            maxHeight: '200px',\n            width: '100%',\n        };\n\n        const { additionalActions } = this.props;\n\n        return (\n            <>\n                <ConfirmChange\n                    visible={this.state.showSaveConfirm}\n                    toggleModal={this.toggleConfirmModal}\n                    onConfirm={this.updateCode}\n                />\n                <div style={{ textAlign: 'center' }}>\n                    <div>\n                        <Header as='h4'>\n                            <Icon name='code' />\n                            <Header.Content>\n                                Input Data Transform Script\n                                <Header.Subheader as='h6'>\n                                    Python Code to Apply to Input JSON\n                                </Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </div>\n                <Segment style={{ width: '350px', paddingTop:'20px'}}>\n                    <Popup\n                        content={this.props.toolTip}\n                        on='hover'\n                        trigger={\n                            <Label attached='top'>\n                                {this.props.title ? this.props.title : \"Script:\"}\n                            </Label>\n                        }\n                    />\n                    <AceEditor\n                        style={style}\n                        mode='python'\n                        theme='tomorrow'\n                        name='code_editor'\n                        onChange={this.onCodeChange}\n                        fontSize={14}\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        value={this.state.code}\n                        setOptions={{\n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: true,\n                            showLineNumbers: true,\n                            tabSize: 4,\n                        }}\n                    />\n                </Segment>\n                <div style={{ textAlign: 'right' }}>\n                    <Button \n                        primary\n                        onClick={() => this.toggleConfirmModal()}\n                        size='mini'\n                    >\n                        Save\n                    </Button>\n                    {additionalActions ? additionalActions : <></>}\n                </div>\n            </>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-min-noconflict/mode-python\";\nimport \"ace-builds/src-min-noconflict/theme-solarized_dark\";\nimport 'ace-builds';\nimport \"ace-builds/webpack-resolver\";\nimport { Accordion, Icon, Dimmer, Loader, Segment } from 'semantic-ui-react';\n\nexport default class PythonViewer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hidePython:false,\n        };\n    }\n\n    render() {\n\n        const style = {\n            padding: \"10px\",\n            borderRadius: \"3px\",\n            margin: \"10px 0px\",\n            maxHeight: \"200px\",\n            width: \"100%\"\n        };\n\n        return (\n            <Segment style={{...this.props.style}}>\n                <Dimmer active={this.props.loading} inverted>\n                    <Loader size='tiny' inverted>Loading</Loader>\n                </Dimmer>\n                <Accordion fluid style={{...this.props.style}}>\n                    <Accordion.Title\n                        active={this.state.hidePython}\n                        onClick={() => this.setState({hidePython: !this.state.hidePython})}\n                    >\n                        <Icon name='dropdown' />\n                        {this.props.title ? this.props.title : \"Code\"}:\n                    </Accordion.Title>\n                    <Accordion.Content active={this.state.hidePython}>\n                        <AceEditor\n                            style={style}\n                            mode=\"python\"\n                            theme=\"tomorrow\"\n                            name=\"code_editor\"\n                            readOnly={true}\n                            fontSize={14}\n                            showPrintMargin={true}\n                            showGutter={true}\n                            highlightActiveLine={true}\n                            value={this.props.code ? this.props.code : \"No code to show...\"}\n                            setOptions={{\n                                showLineNumbers: true,\n                                tabSize: 4,\n                        }}/>\n                    </Accordion.Content>\n                </Accordion>\n            </Segment>   \n        );\n    }\n}\n","import React, { useState } from 'react';\nimport { \n    List,\n    Icon,\n    Pagination,\n    Segment,\n    Accordion\n} from 'semantic-ui-react';\n\nfunction ReadOnlyDocumentList(props) {\n\n    const [visible, setVisible] = useState(true);\n    const { \n        documents, \n        pages, \n        selectedPage, \n        onDownload, \n        handleChangePage } = props;\n\n    const items = documents ? documents.map((doc) => (\n        <List.Item key={doc.id}>\n            <List.Icon \n                name='file alternate'\n                size='large'\n                verticalAlign='middle'\n            />\n            <List.Content>\n            <List.Header as='a' onClick={() => onDownload(doc.id)}>{doc.name}</List.Header>\n            <List.Description>ID: {doc.id} | Extracted: {`${doc.extracted}`}</List.Description>\n            </List.Content>\n        </List.Item>\n    )) : [];\n\n    function PageChangeIntrospector(selectedPage) {\n        console.log(\"Change page to \", selectedPage);\n        handleChangePage(selectedPage.activePage);\n    }\n\n    return (  \n        <Accordion fluid styled style={{...props.style}}>\n          <Accordion.Title\n            active={visible}\n            onClick={() => setVisible(!visible)}\n          >\n            <Icon name='dropdown' />\n            Documents\n          </Accordion.Title>\n          <Accordion.Content active={visible}>\n            <Segment>\n                <List divided relaxed>     \n                    { documents && documents.length !==0 ? items : (\n                        <List.Item key={0}>\n                            <List.Icon name='circle outline' color='red' verticalAlign='middle' />\n                            <List.Content>\n                            <List.Header as='a'>No Documents</List.Header>\n                            <List.Description as='a'>This Job Has No Documents...</List.Description>\n                            </List.Content>\n                        </List.Item>\n                    )}\n                </List>\n            </Segment>\n            <Pagination\n                activePage={selectedPage}\n                onPageChange={(e, data) => PageChangeIntrospector(data)} \n                totalPages={pages}\n            />\n          </Accordion.Content>\n        </Accordion>\n    );\n}  \n\nexport default ReadOnlyDocumentList;","import React from 'react';\nimport {\n    Segment,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react';\nimport JsonViewer from './JsonViewer';\nimport PythonViewer from './PythonViewer';\nimport ReadOnlyDocumentList from '../Documents/ReadOnlyDocumentList';\n\nexport function NodeInputTab(props) {\n    \n    const {\n        raw_input_data,\n        transform_script,\n        transformed_input_data,\n        loading_text,\n        input_data_label,\n        transform_script_label,\n        transformed_input_data_label,\n        style\n    } = props;\n\n    return (\n        <>\n            <Dimmer active={loading_text} inverted>\n                <Loader size='tiny' inverted>{loading_text}</Loader>\n            </Dimmer>\n            <Segment.Group style={style}>\n                <JsonViewer \n                    title={ input_data_label ? input_data_label : \"Raw Input Data\"}\n                    jsonObj={raw_input_data}\n                />\n                <PythonViewer\n                    title={ transform_script_label ? transform_script_label : \"Input Data Transform Script\" }\n                    code={transform_script}\n                />\n                <JsonViewer\n                    title= { transformed_input_data_label ? transformed_input_data_label : \"Transformed Input Data\"}\n                    jsonObj={transformed_input_data}\n                />\n            </Segment.Group> \n        </>\n    );\n}\n\nexport function NodeOutputTab(props) {\n\n    const {\n        output_data,\n        loading_text,\n        style\n    } = props;\n\n    return (\n        <>\n            <Dimmer active={loading_text} inverted>\n                <Loader size='tiny' inverted>{loading_text}</Loader>\n            </Dimmer>\n            <JsonViewer\n                style={style}\n                title=\"Resulting Data\"\n                jsonObj={output_data}\n            />\n        </>\n    );\n}\n\nexport function JobDocumentReadOnlyTab(props) {\n\n    const {\n        documents,\n        selectedPage, \n        pageCount, \n        handleDownloadDocument,\n        handleChangePage\n    } = props;\n\n    return ( \n        <ReadOnlyDocumentList\n            documents={documents}\n            selectedPage={selectedPage}\n            pages={pageCount}\n            onDownload={handleDownloadDocument}\n            handleChangePage={handleChangePage} \n        />\n    );\n}\n\nexport function JobInputReadOnlyTab(props) {\n    return (\n        <JsonViewer jsonObj={props.input_data}/>\n    );\n}","import * as React from 'react';\nimport {Label} from 'semantic-ui-react';\n\nexport const StepStatusRibbons = (props) => {\n    const {step} = props;\n    if (!step){\n        return <Label color='grey' key='grey' size='mini'>NOT Started</Label>; \n    }\n    else {\n        if(step.finished) return <Label color='green' key='green' size='mini'>Finished</Label>;\n        if(step.error) return <Label color='red' key='red' size='mini'>ERROR</Label>;\n        if(step.started && !step.finished) return <Label color='blue' key='blue' size='mini'>Running...</Label>;\n        if(step.queued & !step.started) return <Label color='green' key='green' size='mini'>Queued</Label>;\n        if(!step.queued & !step.started) return <Label color='grey' key='grey' size='mini'>NOT Started</Label>; \n    }\n}\n\nexport const JobStatusLabels = (props) => {\n    return (\n        <Label.Group size='mini'>\n            {props.job.finished ? <Label color='green' key='green'>Finished</Label> : <></>}\n            {props.job.error ? <Label color='red' key='red'>ERROR</Label> : <></>}  \n            {props.job.started && !props.job.finished ? <Label color='blue' key='blue'>Running...</Label> : <></>}\n            {props.job.queued & !props.job.started? <Label color='green' key='green'>Queued</Label> : <></>}  \n            {!props.job.queued & !props.job.started? <Label color='grey' key='grey'>NOT Started</Label> : <></>}\n        </Label.Group> \n    );\n}\n\nexport const StepStatusLabel = (props) => {\n    if (!props.step) {\n        return (\n            <Label.Group size='mini'>\n                <Label color='grey'>NOT Started</Label>\n                {props.buildMode ? <Label color='blue'>BUILD MODE</Label> : <></>}\n            </Label.Group> \n        );\n    }\n    else {\n        return (\n            <Label.Group size='mini'>\n                {props.step.finished ? <Label color='green' key='grey'>Finished</Label> : <></>}\n                {props.step.error ? <Label color='red' key='red'>ERROR</Label> : <></>}  \n                {props.step.started && !props.step.finished ? <Label color='blue' key='grey'>Running...</Label> : <></>}\n                {!props.step.started ? <Label color='grey'>NOT Started</Label> : <></>}\n                {props.buildMode ? <Label color='blue'>BUILD MODE</Label> : <></>}\n            </Label.Group> \n        );\n    }\n}\n","import { Button, Segment } from 'semantic-ui-react';\nimport React, { PureComponent } from 'react';\nimport ReactJson from 'react-json-view';\n\nexport default class JobSettings extends PureComponent {\n\n    static defaultProps = {\n        theme: \"bright:inverted\",\n        src: null,\n        collapsed: false,\n        collapseStringsAfter: 15,\n        onAdd: true,\n        onEdit: true,\n        onDelete: true,\n        displayObjectSize: true,\n        enableClipboard: true,\n        indentWidth: 4,\n        displayDataTypes: true,\n        iconStyle: \"triangle\"\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            jobSettings: this.props.jobSettings ? this.props.jobSettings : {},\n            jobSettingsStr: JSON.stringify()\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            this.props.job.job_inputs!==nextProps.job.job_inputs\n            &&\n            this.state.jobSettingsStr!==nextProps.job.job_inputs\n        );\n    }\n\n    componentDidUpdate() {\n        console.log(\"JobSettings updated\");\n    }\n\n    packageSettings = (newJobInputs) => {\n        let updatedObj = {...this.props.job};\n        updatedObj.job_inputs=JSON.stringify(newJobInputs);\n        return updatedObj;\n    }\n\n    render() {\n\n        const {\n            collapseStringsAfter,\n            displayObjectSize,\n            enableClipboard,\n            theme,\n            iconStyle,\n            collapsed,\n            indentWidth,\n            displayDataTypes,\n            job\n        } = this.props;\n\n        const style = {\n            padding: \"10px\",\n            borderRadius: \"3px\",\n            margin: \"10px 0px\"\n        }\n\n        console.log(\"Render JobSettings\");\n\n        return (\n            <Segment>\n                <div style={{textAlign:'right'}}>\n                    <div>\n                        <Button \n                            circular\n                            icon='save'\n                            color='blue'\n                            onClick={() => this.props.handleUpdateJob(this.packageSettings(this.state.jobSettings))}\n                        />\n                    </div>\n                </div>\n                <ReactJson \n                    collapsed={collapsed}\n                    style={style}\n                    theme={theme}\n                    src={this.state.jobSettings}\n                    collapseStringsAfterLength={collapseStringsAfter}\n                    onEdit={ !job.finished ? e => {\n                                    let newSrc = e.updated_src;\n                                    this.setState({jobSettings: newSrc});\n                                } : false\n                    }\n                    onDelete={ !job.finished ? e => {\n                                    let newSrc = e.updated_src;\n                                    this.setState({jobSettings: newSrc});\n                                } : false\n                    }\n                    onAdd={ !job.finished ? e => {\n                                    let newSrc = e.updated_src;\n                                    this.setState({jobSettings: newSrc});\n                                } : false\n                    }\n                    displayObjectSize={displayObjectSize}\n                    enableClipboard={enableClipboard}\n                    indentWidth={indentWidth}\n                    displayDataTypes={displayDataTypes}\n                    iconStyle={iconStyle}\n                />\n            </Segment>);\n    }\n}\n","import React, { Component } from 'react'\nimport { Icon, List } from 'semantic-ui-react'\n\nexport default class DocumentItem extends Component {\n    render() {  \n        const {onDownload, onDelete, document} = this.props;\n        return (\n            <List.Item key={document.id}>\n                <List.Icon \n                    name='file alternate'\n                    size='large'\n                    verticalAlign='middle'\n                />\n                <List.Content>\n                        <List.Header as='a' onClick={() => onDownload(document.id)}>\n                            {document.name} <Icon link name='help' color='red' onClick={()=>{onDelete(document.id)}}/>\n                        </List.Header>\n                        <List.Description>ID: {document.id} | Extracted: {`${document.extracted}`}</List.Description>\n                </List.Content>\n            </List.Item>\n        );\n    }\n}  ","import React, { useCallback, useState } from 'react';\nimport { \n    Icon,\n    Pagination,\n    Button,\n    Accordion,\n    List,\n    Segment, \n    Header\n } from 'semantic-ui-react';\nimport { useDropzone } from 'react-dropzone';\nimport DocumentItem from './DocumentItem';\n\nexport function DocumentList(props) {\n\n    const [visible, setVisible] = useState(true);\n    const { documents, onDelete, onDownload, onUpload } = props;\n\n    const onDrop = useCallback((acceptedFiles) => {\n\n        Array.from(acceptedFiles).forEach((file) => {\n            const reader = new FileReader()\n            reader.onabort = () => console.log('file reading was aborted')\n            reader.onerror = () => console.log('file reading has failed')\n            reader.onload = () => {\n                onUpload(file);\n            }\n            reader.readAsArrayBuffer(file)\n        })\n        \n    }, [props]);\n \n    const {getRootProps, getInputProps} = useDropzone({\n        disabled: (documents ? documents.length>0 : false),\n        onDrop\n    });\n\n    const fileInputRef = React.createRef();\n\n    const grid = documents ? documents.map((document) => (\n        <DocumentItem\n            key={document.id}\n            onDownload={onDownload}\n            onDelete={onDelete}\n            document={document}\n        />\n    )) : [];\n\n    function filesChanged (e) {\n        onDrop(e.target.files);\n    };\n\n    return (  \n        <Accordion fluid styled style={{...props.style, height:'100%'}}>\n          <Accordion.Title\n            active={visible}\n            onClick={() => setVisible(!visible)}\n          >\n            <Icon name='dropdown' />\n            Documents\n          </Accordion.Title>\n          <Accordion.Content active={visible}>\n            <input\n                ref={fileInputRef}\n                type=\"file\"\n                hidden\n                multiple\n                onChange={filesChanged}\n            />\n            <div {...getRootProps()} style={{   height:'80%',\n                                                paddingRight:\"10px\",\n                                                paddingLeft: \"10px\",\n                                                paddingTop:\"10px\", \n                                                paddingBottom:\"10px\",\n                                                overflowY: 'scroll'}}>\n                <input {...getInputProps()} />\n                {documents && documents.length > 0 ? <List celled>{grid}</List> : (\n                    <Segment placeholder>\n                        <Header icon>\n                        <Icon name='pdf file outline' />\n                            Drag Documents Here or Click \"Add Document(s)\" to Upload\n                        </Header>\n                        <Button \n                            primary\n                            onClick={() => fileInputRef.current.click()}\n                        >\n                            Add Document(s)\n                        </Button>\n                    </Segment>\n                )}\n            </div>\n            <Pagination\n                activePage={props.page}\n                totalPages={props.pages}\n                onPageChange={(event, data) => props.handleSelectDocumentPage(data.activePage)}\n            />\n          </Accordion.Content>\n        </Accordion>\n    );\n}  ","import React, {useState} from 'react';\nimport {\n    Grid, \n    Segment,\n    Statistic,\n    Label,\n    Button,\n    Image, \n    Header,\n    Accordion,\n    Icon\n} from 'semantic-ui-react';\nimport { JobStatusLabels } from './StatusLabels';\nimport JobSettings from './JobSettings';\nimport { DocumentList } from '../Documents/DocumentList';\n\n\nexport function SummaryJobResultStats(props) {\n    \n    const {\n        selectedJob,\n        style\n    } = props;\n\n    return (\n        <div style={{ width: '100%', height: '100%', ...style, }}>\n            <Segment style={{width:'100%', height:'100%'}}>\n                <Grid centered stretched verticalAlign='middle'>\n                    <Grid.Row verticalAlign='middle'>\n                        <Grid.Column width={4}>\n                            <Statistic size='tiny'>\n                                <Statistic.Value>\n                                    <Icon name='hashtag' />{selectedJob.id}\n                                </Statistic.Value>\n                                <Statistic.Label>ID</Statistic.Label>\n                            </Statistic>\n                        </Grid.Column>\n                        <Grid.Column width={4} textAlign='center'>\n                            <Header textAlign='center' as='h5' style={{margin:'0px', marginBottom:'5px'}}>Status:</Header>\n                            <JobStatusLabels job={selectedJob}/>  \n                        </Grid.Column>\n                        <Grid.Column width={8} textAlign='center'>\n                            <Header textAlign='center' as='h5' style={{margin:'0px', marginBottom:'5px'}}>Email Notification:</Header>\n                            {selectedJob.notification_email ? \n                                <Label color='green' size='mini'>{selectedJob.notification_email}</Label> : \n                                <Label color='grey' size='mini'>None Provided</Label>}  \n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        </div>\n    )\n}\n\nexport function DateTimeStats(props) {\n    \n    const {\n        label, \n        dateString,\n        timeString,\n        style\n    } = props;\n\n    return (\n        <Segment\n            textAlign='center'\n            style={style}\n        >\n            <Label attached='top'>{label}</Label>\n            <Grid stretched>\n                <Grid.Row>\n                    <Grid.Column>\n                        <div style={{textAlign:'center'}}>\n                            <Statistic size='mini'>\n                                <Statistic.Value>{timeString}</Statistic.Value>\n                                <Statistic.Label>{label} Time</Statistic.Label>\n                            </Statistic>\n                        </div> \n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column>\n                        <div style={{textAlign:'center'}}>\n                            <Statistic size='mini'>\n                                <Statistic.Value>{dateString}</Statistic.Value>\n                                <Statistic.Label>{label} Date</Statistic.Label>\n                            </Statistic>\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    );\n}\n\nexport function JobResultStats(props) {\n    \n    const {\n        selectedJob,\n        startTime,\n        startDate,\n        endTime,\n        endDate,\n        toggleDeleteConfirm,\n        handleDownloadJob,\n        loadAndShowLog,\n        style\n    } = props;\n\n    return (\n        <Grid stretched style={style}>\n            <Grid.Row>\n                <Grid.Column width={16}>\n                    <SummaryJobResultStats \n                        selectedJob={selectedJob}\n                    />    \n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"Start\"\n                        timeString={startTime}\n                        dateString={startDate}\n                    />\n                </Grid.Column>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"End\"\n                        timeString={endTime}\n                        dateString={endDate}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column>\n                    <div textAlign='right'>\n                        <Button \n                            circular\n                            color='red'\n                            icon='trash'\n                            onClick={() => toggleDeleteConfirm()}\n                        />\n                        { selectedJob.file ? \n                        <Button\n                            circular\n                            color='green'\n                            icon='save'\n                            onClick={( )=> handleDownloadJob(selectedJob.id)}\n                        /> : <></>}\n                        {loadAndShowLog ? <Button \n                            circular\n                            color='teal'\n                            icon='terminal'\n                            onClick={() => loadAndShowLog()}\n                        /> : <></>}\n                    </div>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport function StartStopStats(props) {\n    \n    const {\n        startDate,\n        startTime,\n        endDate,\n        endTime,\n        style\n    } = props;\n    \n    return (\n        <Grid stretched style={style}>\n            <Grid.Row>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"Start\"\n                        dateString={startDate}\n                        timeString={startTime}\n                    />\n                </Grid.Column>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"End\"\n                        dateString={endDate}\n                        timeString={endTime}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport function NodeResultActions(props) {\n\n    const {\n        result,\n        toggleDeleteConfirm,\n        handleDownloadResult, \n        loadAndShowLog,\n        style\n    } = props;\n\n    let Buttons = [];\n\n    if (toggleDeleteConfirm) {\n        Buttons.push(\n            <Button \n                key='1'\n                circular\n                color='red'\n                icon='trash'\n                onClick={() => toggleDeleteConfirm()}\n            />\n        );\n    }\n    if (result && result.has_file) {\n        Buttons.push(\n            <Button\n                key='2'\n                circular\n                color='green'\n                icon='save'\n                onClick={()=> handleDownloadResult(result.id)}\n            />\n        );\n    }\n    Buttons.push(\n        <Button \n            key='3'\n            circular\n            color='teal'\n            icon='terminal'\n            onClick={() =>  loadAndShowLog(result.job, result.pipeline_node)}\n        />\n    );\n\n    return (\n        <div style={style}>\n            {Buttons}\n        </div>\n    );\n}\n\nexport function PipelinePanelHeader(props) {\n\n    const {selectedPipeline} = props;\n\n    if (!selectedPipeline) return <></>;\n\n    return (\n        <Segment style={{width: '100%', wordWrap: 'break-word'}}>\n             <div style={{width: '100%', height: '100%', display:'flex', flexDirection:'row', justifyContent:'space-evenly', alignItems: 'center'}}>\n                    <div>\n                        <Statistic size='small' style={{marginRight:'1vw'}}>\n                            <Statistic.Value>\n                                <Icon size='small' name='code branch'/>\n                            </Statistic.Value>\n                            <Statistic.Label>PIPE</Statistic.Label>\n                        </Statistic>\n                    </div>\n                    <div>\n                        <Header as='h3'>\n                            <Header.Content>\n                            {selectedPipeline.name} (ID #{selectedPipeline.id})\n                            <Header.Subheader>Production: {selectedPipeline.production ? \"True\" : \"False\"}</Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </div> \n        </Segment>\n    );\n\n}\n\nexport function NodePanelHeader(props) {\n\n    const {selectedNode, script} = props;\n\n    if (!selectedNode) return <></>;\n\n    return (\n        <Segment style={{width: '100%', wordWrap: 'break-word'}}>\n             <div style={{width: '100%', height: '100%', display:'flex', flexDirection:'row', justifyContent:'space-evenly', alignItems: 'center'}}>\n                    <div>\n                        <Statistic size='small' style={{marginRight:'1vw'}}>\n                            <Statistic.Value>\n                                <Image size='mini' src='./node_icon.png'/>\n                            </Statistic.Value>\n                            <Statistic.Label>NODE</Statistic.Label>\n                        </Statistic>\n                    </div>\n                    <div>\n                        <Header as='h3'>\n                            <Header.Content>\n                            {selectedNode.name} (ID #{selectedNode.id})\n                            <Header.Subheader>Script: {script ? script.human_name : \"\"}</Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </div> \n        </Segment>\n    );\n\n}\n\nexport function JobPanelHeader(props) {\n\n    const {selectedJob} = props;\n\n    if (!selectedJob) return <></>;\n\n    return (\n        <Segment style={{width: '100%', wordWrap: 'break-word'}}>\n             <div style={{width: '100%', height: '100%', display:'flex', flexDirection:'row', justifyContent:'space-around', alignItems: 'center'}}>\n                    <div>\n                        <Statistic size='small'>\n                            <Statistic.Value>\n                                <Icon name='briefcase'/>\n                            </Statistic.Value>\n                            <Statistic.Label>JOB</Statistic.Label>\n                        </Statistic>\n                    </div>\n                    <div>\n                        <Header as='h3'>\n                            <Header.Content>\n                            {selectedJob.name} (ID #{selectedJob.id})\n                            <Header.Subheader>Pipeline: {selectedJob.pipeline ? selectedJob.pipeline.name : \"\"}</Header.Subheader>\n                            </Header.Content>\n                        </Header>\n                    </div>\n                </div> \n        </Segment>\n    );\n\n}\n\nexport function SummaryNodeResultStats(props) {\n\n    const {\n        result,\n        imageUrl,\n        script,\n        handleScriptSelect,\n        style\n    } = props;\n\n    return (\n        <div style={{ width: '100%', ...style, }}>\n            <Segment style={{width:'100%', display:'flex', flexDirection:'row', justifyContent:'space-between', alignItems:'center'}}>\n                <div>\n                    <Statistic size='mini'>\n                        <Statistic.Value>\n                            <Icon name='hashtag' />{result.id}\n                        </Statistic.Value>\n                        <Statistic.Label>ID</Statistic.Label>\n                    </Statistic>\n                </div>\n                <div>\n                    <Statistic size='mini'>\n                        <Statistic.Value>\n                            <Image size='tiny' src={imageUrl}/>\n                        </Statistic.Value>\n                        <Statistic.Label>Type</Statistic.Label>\n                    </Statistic>\n                </div>         \n                <div style={{textAlign:'center', wordBreak:'break-all'}}>\n                    { script ? \n                        <Statistic size='mini'>\n                            <Statistic.Value>\n                                <span \n                                    style={{cursor:\"pointer\", color:\"blue\", textDecoration:\"underline\"}}\n                                    onClick={() => handleScriptSelect(script.id)}\n                                >\n                                    { script.human_name }\n                                </span>\n                            </Statistic.Value>\n                            <Statistic.Label>Script</Statistic.Label> \n                        </Statistic>:\n                        <Statistic size='mini'>\n                            <Statistic.Value>\n                                <span>None</span>\n                            </Statistic.Value>\n                            <Statistic.Label>Script</Statistic.Label> \n                        </Statistic> }\n                </div>  \n            </Segment>\n        </div>\n    );\n}\n\nexport function NodeResultStats(props) {\n\n    const {\n        result,\n        imageUrl,\n        script,\n        startTime,\n        startDate,\n        endTime,\n        endDate,\n        toggleDeleteConfirm,\n        handleDownloadResult,\n        handleScriptSelect,\n        loadAndShowLog,\n        style\n    } = props;\n\n    return (\n        <Grid stretched style={style}>\n            <Grid.Row>\n                <Grid.Column width={16}>\n                    <SummaryNodeResultStats\n                        result={result}\n                        imageUrl={imageUrl}\n                        script={script}\n                        handleScriptSelect = {handleScriptSelect}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"Start\"\n                        dateString={startDate}\n                        timeString={startTime}\n                    />\n                </Grid.Column>\n                <Grid.Column width={8}>\n                    <DateTimeStats\n                        label=\"End\"\n                        dateString={endDate}\n                        timeString={endTime}\n                    />\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column>\n                     <NodeResultActions\n                        result={result}\n                        toggleDeleteConfirm = { toggleDeleteConfirm }\n                        handleDownloadResult = { handleDownloadResult }\n                        loadAndShowLog = { loadAndShowLog }\n                     />\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n\n}\n\nexport function JobInputs(props) {\n    \n    const {\n        job,\n        jobSettings,\n        handleUpdateTestJob,\n        style\n    } = props;\n    \n    return (\n        <Segment style={style}>\n            <Header as='h3'>Initial Data Input:</Header>\n            <JobSettings\n                job={job}\n                jobSettings={jobSettings}\n                handleUpdateJob={handleUpdateTestJob}\n            />\n        </Segment>\n    );\n}\n\nexport function DataInputPane(props) {\n    const [visible, setVisible] = useState(false);\n\n    const {\n        job,\n        jobSettingsJson, \n        handleUpdateJob,\n    } = props;\n\n    return (\n        <div>\n            <Accordion fluid styled>\n                <Accordion.Title\n                active={visible}\n                index={0}\n                onClick={() => setVisible(!visible)}\n                >\n                    <Icon name='dropdown' />\n                    Adjust Job Inputs\n                </Accordion.Title>\n                <Accordion.Content active={visible}>\n                    <JobSettings\n                        job={job}\n                        jobSettings={jobSettingsJson}\n                        handleUpdateJob={handleUpdateJob}\n                    />\n                </Accordion.Content>\n            </Accordion> \n        </div>\n    );\n\n}\n\nexport function DocumentInputPane(props) {\n\n    const [visible, setVisible] = useState(false);\n\n    const {\n        documents,\n        handleDocumentDelete,\n        handleUploadDocument,\n        handleDocumentPageChange\n    } = props;\n\n    return (\n        <div>   \n            <DocumentList\n                documents={documents.items}\n                page={documents.selectedPage}\n                pages={documents.pages}\n                onDelete={handleDocumentDelete}\n                onUpload={handleUploadDocument}\n                handleSelectDocumentPage={handleDocumentPageChange} \n            />\n        </div>\n    );\n}","import * as React from 'react';\nimport { \n    Form,\n    Label,\n    Button,\n    Grid,\n    Segment, \n    Divider,\n    Header,\n    Popup,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport LogModal from '../../../Shared/LogModal';\nimport { TransformScriptBuilderModal } from '../../../Shared/TransformScriptBuilderModal';\nimport { JsonEditor } from '../../../Editors/JsonEditor';\nimport { CodeEditor } from '../../../Editors/CodeEditor';\nimport { NodeOutputTab, NodeInputTab } from '../../../Shared/SidebarTabs';\nimport { StartStopStats, NodeResultActions, SummaryNodeResultStats, NodePanelHeader } from '../../../Shared/DetailsWidgets';\n\nexport class NodeDetailPanel extends React.PureComponent {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expanded: true,\n            activeIndex: 0,\n            newNodeName:\"\",\n            showNamePopup:false,\n            showLogModal:false,\n            showTransformBuilder: false\n        };\n        this.namePopupTrigger = React.createRef()\n    }\n    \n    handleTabChange = (e, { activeIndex }) => this.setState({ activeIndex });\n\n    setShowLogModal = (showLogModal) => {\n        this.setState({\n            showLogModal\n        });\n    }\n\n    // If selected node changes, we're in buildMode and there's a result obj for the current node, check to see if the output_data prop is present\n    // This will only get sent by the backend when a special action call is made to the results endpoint. If it's not present, we assume that\n    // we need to fetch this data\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedNode.id !== this.props.selectedNode.id) {\n            let selectedNodeResult = null;\n            if (this.props.buildMode && this.props.selectedNode) {\n                try {\n                    selectedNodeResult = _.find(this.props.results.items, {pipeline_node: this.props.selectedNode.id})\n                    if (selectedNodeResult) {\n                        this.props.handleFetchResultData(selectedNodeResult.id);\n                    }\n                } catch {}\n            }\n        }\n    }\n   \n    componentDidMount() {\n        let selectedNodeResult = null;\n        if (this.props.buildMode && this.props.selectedNode) {\n            try {\n                selectedNodeResult = _.find(this.props.results.items, {pipeline_node: this.props.selectedNode.id})\n                if (selectedNodeResult) {\n                    this.props.handleFetchResultData(selectedNodeResult.id);\n                } \n            } catch {}\n        } \n    }\n\n    toggleShowTransformBuilderModal = () => {\n        this.setState({\n            showTransformBuilder: !this.state.showTransformBuilder\n        });\n    }\n\n    onSaveScript = (newScript) => {\n        try {\n            let newPipelineStepObj = {...this.props.selectedNode};\n            newPipelineStepObj.input_transform = newScript;\n            this.props.handleUpdatePipelineStep(newPipelineStepObj);\n        }\n        catch {\n            console.log(\"Error trying to update transform script\")\n        }\n    }\n\n    onSaveInputs = (settingsJsonString) => {\n        try {\n            let newPipelineStepObj = {...this.props.selectedNode};\n            newPipelineStepObj.step_settings = settingsJsonString;\n            this.props.handleUpdatePipelineStep(newPipelineStepObj);\n        }\n        catch {\n            console.log(\"Error trying to update pipeline step settings.\")\n        }\n    }\n\n    onSaveName = (newName) => {\n        try {\n            let newPipelineStepObj = {id: this.props.selectedNode.id};\n            newPipelineStepObj.name = newName;\n            this.props.handleUpdatePipelineStep(newPipelineStepObj);\n        }\n        catch {\n            console.log(\"Error trying to update pipeline step name.\")\n        }\n    }\n\n    loadAndShowLog = (jobId, stepId) => {\n        this.props.handleFetchTestJobStepLog(jobId, stepId);\n        this.setShowLogModal(true);\n    }\n\n    render() {\n        \n        const { \n            selectedNode,\n            selectedPipelineId,\n            sidebarTab,\n            test_job,\n            buildMode,\n            scripts,\n            results\n        } = this.props;\n\n        let selectedNodeResult = null;\n        if (buildMode && selectedNode) {\n            try {\n                selectedNodeResult = _.find(results.items, {\n                    pipeline_node: selectedNode.id,\n                    type: \"STEP\"\n                });\n            } catch {}\n        }\n\n        let script = selectedNode && selectedNode.script && scripts.items ? \n                        _.find(scripts.items,{id: selectedNode.script}) : {};\n\n        let transform_script = selectedNode ? \n                                selectedNode.input_transform ?\n                                    selectedNode.input_transform :\n                                        \"No transformation in pipeline\" :\n                                            \"Error loading pipeline details...!\";\n\n        let imageUrl = '';\n        if (script && script.type){\n            switch (script.type) {\n                case 'RUN_ON_JOB_DOCS_PARALLEL':\n                    imageUrl = './parallel_job.png';\n                    break;\n                case 'RUN_ON_JOB':\n                    imageUrl = './serial_job.png';\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        let startTime = \"N/A\";\n        let startDate = \"N/A\";\n        let endTime = \"N/A\"; \n        let endDate = \"N/A\";\n\n        let output_data = { data: null };\n        let input_data = { data: null };\n        let transformed_input_data = { data: null };\n\n        let buildModeStyle = { backgroundColor: '#6435c9' };\n\n        if (selectedNodeResult) {   \n            if (selectedNodeResult.start_time) {\n                var dStart = new Date(selectedNodeResult.start_time);\n                startTime = dStart.toLocaleTimeString();\n                startDate = dStart.toLocaleDateString();\n            }\n            \n            if (selectedNodeResult.stop_time) {\n                var dEnd = new Date(selectedNodeResult.stop_time);\n                endTime = dEnd.toLocaleTimeString();\n                endDate = dEnd.toLocaleDateString()\n            }\n            \n            if (selectedNodeResult.node_output_data) output_data = selectedNodeResult.node_output_data;\n\n            if (selectedNodeResult.start_state) input_data = selectedNodeResult.start_state;\n\n            if (selectedNodeResult.transformed_input_data) {\n                try {\n                    transformed_input_data = JSON.parse(selectedNodeResult.transformed_input_data);\n                } catch {}\n            }\n\n        }\n\n        let settings = {};\n        try {\n            settings = JSON.parse(selectedNode.step_settings);\n        }\n        catch {}\n\n        //Get the latest log\n        const log = test_job.test_job ? \n                    test_job.testJobStepLogs[parseInt(selectedNode.id)] || \"No logs...\" :\n                    \"No job selected...\";\n\n        const tabs = [\n            (<>\n                <LogModal\n                    handleModalToggle={() => this.setShowLogModal(!this.state.showLogModal)}\n                    visible={this.state.showLogModal}\n                    log={log}\n                    loading={test_job.logs_loading}\n                />\n                {selectedNode ? (\n                    <>\n                        <Segment>\n                            {/* <div style={{padding: '10px'}} ref={this.namePopupTrigger}>\n                                <Header as='h2' textAlign='left'>\n                                    {selectedNode.name}\n                                    <Header.Subheader>\n                                        Click to edit name...\n                                        <Button\n                                            circular\n                                            size='mini'\n                                            icon='edit'\n                                            onClick={() => this.setState({showNamePopup: !this.state.showNamePopup})}\n                                        />\n                                    </Header.Subheader>\n                                </Header>\n                                <Popup\n                                        context={this.namePopupTrigger}\n                                        content={\n                                            <Segment style={{width:'7vw', minWidth:'200px'}}>\n                                                <Label \n                                                    corner='right'\n                                                    icon='close'\n                                                    onClick={() => {\n                                                        this.setState({showNamePopup: false});\n                                                    }}\n                                                />\n                                                <Form\n                                                    onSubmit={() => {\n                                                        this.onSaveName(this.state.newNodeName);\n                                                        this.setState({showNamePopup: false});\n                                                    }}\n                                                >\n                                                    <Form.Group widths='equal'>\n                                                        <Form.Input\n                                                            fluid\n                                                            label='Change Node Name:'\n                                                            placeholder='Node name...'\n                                                            name='name'\n                                                            value={this.state.newNodeName}\n                                                            onChange={(e, { name, value }) => {\n                                                                this.setState({\n                                                                    newNodeName: value\n                                                                });\n                                                            }}\n                                                        />\n                                                    </Form.Group>\n                                                    <div style={{ textAlign: 'right' }}>\n                                                        <Button primary>\n                                                            Save\n                                                        </Button>\n                                                    </div>\n                                                </Form>\n                                            </Segment>\n                                        }\n                                        position='top left'\n                                        open={this.state.showNamePopup}\n                                    />\n                            </div> */}\n                            <Divider horizontal>Node Details:</Divider>\n                            <SummaryNodeResultStats\n                                result={selectedNode}\n                                imageUrl={imageUrl}\n                                script={script}\n                                handleScriptSelect={this.props.handleScriptSelect}\n                                style={buildModeStyle}\n                            />\n                        </Segment>\n                        { buildMode ?  \n                                <Segment>\n                                    <StartStopStats\n                                        startTime = { startTime }\n                                        startDate = { startDate }\n                                        endTime = { endTime }\n                                        endDate = { endDate }\n                                        style = { buildModeStyle }\n                                    />\n                                    <Grid style = { buildModeStyle }>\n                                        <Grid.Row>\n                                            <Grid.Column>\n                                                <NodeResultActions\n                                                    result = {selectedNodeResult}\n                                                    handleDownloadResult = {this.props.handleDownloadResult}\n                                                    loadAndShowLog = {this.loadAndShowLog}   \n                                                />\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                    </Grid>\n                                </Segment> \n                            : \n                            <></>\n                        }\n                    </>\n                ) : (\n                    <></>\n                )}\n            </>),\n            (<JsonEditor\n                onSave={this.onSaveInputs}\n                toolTip=\"This json will be passed to the node's script each time it runs. Any *job* level settings with the same key will overrite these settings. This is a good way to set sane defaults for a give script given the purpose of a pipeline.\"\n                jsonObj={settings}\n            />),\n            (<CodeEditor\n                onSave={this.onSaveScript}\n                code={transform_script}\n                toolTip=\"This python script will take the output data JSON from the previous node / script (if any), and apply the transformation set forth herein before passing it to the node's scripts. This is useful for quick and dirty adjustments to script inputs to make two blocks compatible.\"\n                additionalActions={ buildMode ? \n                    <Popup \n                        content='Visually edit a transform script using the currently-loaded test data.'\n                        trigger={\n                            <Button \n                                content=\"Test New Transform\"\n                                labelPosition='right'\n                                icon='edit'\n                                color='blue'\n                                size='mini'\n                                onClick={this.toggleShowTransformBuilderModal}\n                            />\n                        }\n                    /> : <></>\n                }\n            />)\n        ];\n         \n\n        if (buildMode) {\n            tabs.push(\n                <NodeInputTab\n                    raw_input_data = {input_data}\n                    transform_script = {transform_script}\n                    transformed_input_data= {transformed_input_data}\n                    loading_text={selectedNodeResult ? results.loading ? \"Loading data...\" : false : \"No node results yet...\"}\n                />\n            );\n            tabs.push(\n                <NodeOutputTab\n                    output_data={output_data}\n                    loading_text={selectedNodeResult ? results.loading ? \"Loading data...\" : false : \"No node results yet...\"}\n                />\n            );      \n        }\n\n        return (\n            <Segment\n                style={{\n                    overflowY:'hidden',\n                    height:'100%',\n                    width:'100%',\n                    margin:'0px'\n                }}\n            >\n                { buildMode ?\n                    <TransformScriptBuilderModal\n                        myResult = {selectedNodeResult}\n                        test_job = {test_job}\n                        pipelineStep = {selectedNode}\n                        toggleModalVisible = {this.toggleShowTransformBuilderModal}\n                        visible = {this.state.showTransformBuilder}\n                        updatePipelineStep = {this.props.handleUpdatePipelineStep}\n                        handleTestTransformForResult={this.props.handleTestTransformForResult}\n                    /> : <></> \n                }\n                <div style={{height:'100%', width:'100%', display:'flex', flexDirection:'column', justifyContent:'flex-start'}}>\n                    <Popup\n                        content=\"Enable test mode so you can run the pipeline as you build it.\"\n                        position='top right' \n                        trigger={\n                            <div style={{marginBottom:'.5vh'}}>\n                                <Button\n                                    circular\n                                    size='mini'\n                                    toggle\n                                    active={buildMode}\n                                    onClick={() => this.props.toggleTestMode(selectedPipelineId)}\n                                >\n                                    TEST\n                                </Button>\n                            </div>\n                        }\n                    />\n                    <NodePanelHeader\n                        selectedNode = {selectedNode}\n                        script = {script}\n                    />\n                    { buildMode && test_job.test_job && test_job.test_job.started && !test_job.test_job.finished ? \n                        <Dimmer active inverted>\n                            <Loader inverted>Test Job Running...</Loader>\n                        </Dimmer> : <></> }\n                    {tabs[sidebarTab]}\n                </div>\n            </Segment>\n        );\n    }\n}\n\n","import React, {useState} from 'react';\nimport { Label, Icon, Modal, Segment, Button, Input, TextArea} from 'semantic-ui-react';\n\nfunction PipelineMetaModel(props) {\n\n    const { description, name, onChange, visible, toggleModal} = props;\n    const [newDescription, setNewDescription] = useState(description);\n    const [newName, setNewName] = useState(name);\n\n    const onSaveClick = () => {\n        onChange(newName, newDescription);\n        toggleModal();\n    }\n\n    return(\n        <Modal open={visible} size = 'small'>\n        <Label \n            corner='right'\n            color='grey'\n            icon='cancel'\n            onClick={()=>toggleModal()}\n        />\n        <Modal.Header>Edit Pipeline Name and Description</Modal.Header>\n        <Modal.Content image>\n            <Modal.Description>\n                <Segment padded>\n                    <Label attached='top'>Pipeline name:</Label>\n                    <Input\n                        fluid\n                        value={newName}\n                        onChange = {(data) => { setNewName(`${data.target.value}`)}}\n                    />\n                </Segment>\n                <Segment padded>\n                    <Label attached='top'>Description</Label>\n                    <TextArea\n                        style={{width:'100%'}}\n                        rows={4}\n                        value={newDescription}\n                        onChange={(data) => { setNewDescription(`${data.target.value}`)}}\n                    />\n                </Segment>\n            </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n            <Button color='green' onClick={() => onSaveClick()}>\n                <Icon name='checkmark' /> Save\n            </Button>\n            <Button color='grey' onClick={() => toggleModal()}>\n                <Icon name='cancel' /> Cancel\n            </Button>\n        </Modal.Actions>\n        </Modal>\n    );\n}\n\nexport default PipelineMetaModel;","import React, { PureComponent } from 'react';\nimport { \n    Tab,\n    Segment,\n    Grid,\n    Dimmer, \n    Loader,\n    Placeholder,\n    Button, \n    Icon, \n    Header,\n    Divider,\n    Popup, \n    Accordion\n} from 'semantic-ui-react';\nimport _ from 'lodash';\n\n//import SupportedFileTypes from \"../../../Shared/SupportedFileTypes\";\nimport JobSettings from '../../../Shared/JobSettings';\nimport { JobDocumentReadOnlyTab } from '../../../Shared/SidebarTabs';\nimport PipelineMetaModel from '../Modals/PipelineMetaModal';\nimport JsonViewer from '../../../Shared/JsonViewer';\nimport { DocumentList } from '../../../Documents/DocumentList';\nimport { JobStatusCol } from '../../../Shared/Controls';\nimport { PipelinePanelHeader } from '../../../Shared/DetailsWidgets';\n\nexport class PipelineDetailPanel extends PureComponent {\n\n    onPipelineDescriptionOrNameChange = (newName, newDescription) => {\n        let { selectedPipelineId } = this.props.pipelines;\n\n        if (selectedPipelineId !== -1) {\n\n            let updatedPipeline = {\n                id: selectedPipelineId,\n                description: newDescription,\n                name: newName\n            };\n\n            this.props.handleUpdatePipeline({...updatedPipeline, });\n        }   \n    }\n\n    onProductionStatusChange = (status) => {\n        let oldPipelineObj = _.find(this.props.pipelines.items, { 'id': this.props.pipelines.selectedPipelineId })\n        this.props.handleUpdatePipeline({...oldPipelineObj, production:status});\n    }\n\n    constructor(props) {\n        super(props);\n        this.state={\n            showDeleteConfirm: false,\n            showMetaModal: false,\n            showInputs: false\n        };\n    }\n\n    render() {\n\n        let { test_job } = this.props.test_job;\n        const { \n            testJobLogsLoading,\n            buildMode,\n            sidebarTab,\n            selectedPipeline\n        } = this.props;\n\n        let fileTypes = [];\n        try {\n           fileTypes = JSON.parse(selectedPipeline.supported_files).supported_files;\n        } catch (e) {}\n    \n        let ProductionButton = selectedPipeline && selectedPipeline.production ? \n        <Button\n            icon\n            circular\n            size='mini'\n            color='green'\n            floated='right'\n            onClick={() => this.onProductionStatusChange(false)}\n            labelPosition='right'\n        >\n            <Icon name='eject' />\n            Take Offline\n        </Button> : \n        <Button\n            icon\n            circular\n            size='mini'\n            color='grey'\n            floated='right'\n            onClick={() => this.onProductionStatusChange(true)}\n            labelPosition='right'\n        >\n            <Icon name='play' />\n            Put Into Production\n        </Button>;\n\n        let tabs = [];\n        if (!selectedPipeline) {\n            return (\n                <Segment\n                    style={{\n                        overflowY:'hidden',\n                        height:'100%',\n                        width:'100%',\n                        margin:'0px'\n                    }}\n                >\n                    <Dimmer active inverted>\n                        <Loader inverted>Loading Data...</Loader>\n                    </Dimmer>\n                    <Placeholder>\n                        <Placeholder.Image rectangular />\n                    </Placeholder>\n                </Segment>\n            );\n        }\n        else\n        {\n            // Get the pipeline schema from the fetched Gremlin model data and parse it to JSON\n            let pipelineSchema = {};\n            try {\n                pipelineSchema = JSON.parse(selectedPipeline.schema);\n            } catch {}\n\n            tabs = [\n                (<>\n                    <PipelineMetaModel\n                        description={selectedPipeline ? selectedPipeline.description : \"\"}\n                        name={selectedPipeline ? selectedPipeline.name : \"\"}\n                        onChange={this.onPipelineDescriptionOrNameChange}\n                        visible={this.state.showMetaModal}\n                        toggleModal={() => this.setState({showMetaModal: !this.state.showMetaModal})}\n                    />\n                    <Grid>\n                        {buildMode ? \n                            <Grid.Row>\n                                <Grid.Column width={16}>\n                                    <JobStatusCol\n                                        style={{\n                                            width:\"100%\",\n                                            marginTop:\"10px\",\n                                            backgroundColor: '#6435c9'\n                                        }}\n                                        job={this.props.test_job.test_job}\n                                        pipeline={selectedPipeline}\n                                        jobLogsLoading={testJobLogsLoading}\n                                        handleUpdateJob={this.props.handleUpdateTestJob}\n                                    />\n                                </Grid.Column>\n                            </Grid.Row> \n                            :\n                            <Grid.Row>  \n                                <Grid.Column width={16}>\n                                    <Segment>\n                                        <div style={{padding: '10px'}}>\n                                            <Header as='h2'>\n                                                <Header.Subheader>\n                                                {selectedPipeline.description}\n                                                <Popup\n                                                        content=\"Edit Pipeline Description or name\"\n                                                        position='top right' \n                                                        trigger={\n                                                            <Button\n                                                                floated='right'\n                                                                circular\n                                                                icon='edit'\n                                                                onClick={() => this.setState({showMetaModal: !this.state.showMetaModal})}\n                                                            />\n                                                        }\n                                                    />\n                                                </Header.Subheader>\n                                            </Header>\n                                        </div>\n                                        <Divider horizontal>Supported File Types:</Divider>\n                                        {/* <SupportedFileTypes extensions={fileTypes}/> */}\n                                    </Segment> \n                                </Grid.Column>                                \n                            </Grid.Row>\n                        }\n                        <Grid.Row>\n                            <Grid.Column>\n                                <Button\n                                    icon\n                                    circular\n                                    size='mini'\n                                    floated='right'\n                                    color='red'\n                                    labelPosition='right'\n                                    onClick={() => this.setState({showDeleteConfirm: !this.state.showDeleteConfirm})}\n                                >\n                                    <Icon name='trash'/>\n                                    Delete\n                                </Button>\n                                { ProductionButton }\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </>),\n                (<JsonViewer \n                    collapsed={false}\n                    jsonObj={pipelineSchema}\n                    title='Pipeline Schema:'\n                />)\n            ];\n\n            if (this.props.buildMode) {\n\n                let input_data = {data:\"No inputs provided...\"};\n                try {\n                    input_data = JSON.parse(test_job.job_inputs);\n                } catch {}\n\n                tabs.push(\n                    (<div key ='inputs'>\n                        {\n                            test_job && test_job.started ? \n                                <JobDocumentReadOnlyTab\n                                    documents={test_job.test_documents}\n                                    selectedPage={test_job.document_page}\n                                    pageCount={test_job.document_pages}\n                                    handleDownloadDocument={this.props.handleDownloadDocument}\n                                    handleChangePage={this.props.handleTestDocumentPageChange}\n                                />\n                                : \n                                <>\n                                    <Accordion fluid styled>\n                                        <Accordion.Title\n                                            active={this.state.showInputs}\n                                            index={0}\n                                            onClick={() => this.setState({\n                                                showInputs: !this.state.showInputs\n                                            })}\n                                        >\n                                            <Icon name='dropdown' />\n                                            Adjust Job Inputs\n                                        </Accordion.Title>\n                                        <Accordion.Content active={this.state.showInputs}>\n                                            <JobSettings\n                                                job={test_job}\n                                                jobSettings={input_data}\n                                                handleUpdateJob={this.props.handleUpdateTestJob}\n                                            />\n                                        </Accordion.Content>\n                                    </Accordion>\n                                    <DocumentList\n                                        documents={this.props.test_job.test_documents}\n                                        page={this.props.test_job.document_page}\n                                        pages={this.props.test_job.document_pages}\n                                        onDelete={this.props.handleDeleteTestDocument}\n                                        onUpload={this.props.handleUploadTestDocument}\n                                        onDownload={this.props.handleDownloadDocument}\n                                    />\n                                </>\n                        }\n                    </div>));\n            }\n\n        }\n        \n        return (\n            <Segment\n                style={{\n                    overflowY:'hidden',\n                    height:'100%',\n                    width:'100%',\n                    margin:'0px'\n                }}\n            >\n                <div style={{height:'100%', width:'100%', display:'flex', flexDirection:'column', justifyContent:'flex-start'}}>\n                    <Popup\n                        content=\"Enable test mode so you can run the pipeline as you build it.\"\n                        position='top right' \n                        trigger={\n                            <div style={{marginBottom:'.5vh'}}>\n                                <Button\n                                    circular\n                                    size='mini'\n                                    color={buildMode ? 'purple' : 'grey'}\n                                    onClick={() => this.props.toggleTestMode(selectedPipeline.id)}\n                                >\n                                    TEST\n                                </Button>\n                            </div>\n                        }\n                    />\n                    <PipelinePanelHeader selectedPipeline={selectedPipeline}/>\n                    {tabs[sidebarTab]}\n                </div>\n            </Segment>\n        );\n    }\n    \n}\n","import * as React from 'react';\nimport { \n    Confirm,\n} from 'semantic-ui-react';\n\nimport { NodeDetailPanel } from './NodeDetailPanel';\nimport { PipelineDetailPanel } from './PipelineDetailPanel';\n\nexport class DetailPanel extends React.PureComponent {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            showDeleteConfirm: false,\n        };\n    }\n\n    toggleDeleteConfirm = () => {\n        this.setState({\n            showDeleteConfirm: !this.state.showDeleteConfirm\n        });\n    }\n\n    render() {\n\n        let { \n            selectedNode,\n            selectedPipeline,\n            testJobResult,\n            pipelines,\n            buildMode,\n            test_job,\n            scripts,\n            selectedScript,\n            results \n        } = this.props;\n\n        if (!selectedNode) {\n            return (\n                <PipelineDetailPanel\n                    key={selectedNode ? selectedNode.id : -1} \n                    pipelines={pipelines}\n                    buildMode={buildMode}\n                    test_job={test_job}\n                    selectedNode={selectedNode}\n                    selectedPipeline={selectedPipeline}\n                    testJobResult={testJobResult}\n                    setSidebarTab={this.props.setSidebarTab}\n                    sidebarTab={this.props.sidebarTab}\n                    toggleTestMode={this.props.toggleTestMode}\n                    toggleDeleteConfirm={this.toggleDeleteConfirm} \n                    handleUpdatePipeline={this.props.handleUpdatePipeline}\n                    testJobLogsLoading = {this.props.testJobLogsLoading}\n                    handleDeleteTestDocument={this.props.handleDeleteTestDocument}\n                    handleUploadTestDocument={this.props.handleUploadTestDocument}\n                    handleDownloadDocument={this.props.handleDownloadDocument}\n                    handleUpdateTestJob = {this.props.handleUpdateTestJob}\n                    handleFetchTestJobLog={this.props.handleFetchTestJobLog}\n                    handleFetchResultData={this.props.handleFetchResultData}\n                    handleTestDocumentPageChange ={this.props.handleTestDocumentPageChange}\n                />\n            );\n        }\n\n        return (\n            <>\n                <Confirm\n                    header=\"Delete this pipeline?\"\n                    content=\"Are you sure you want to delete this node? All data will be deleted.\"\n                    open={this.state.showDeleteConfirm}\n                    onCancel={() => this.toggleDeleteConfirm()}\n                    onConfirm={() =>this.props.handleDeleteJob(this.props.selectedJobId)}\n                />\n                <NodeDetailPanel \n                    key={pipelines.selectedPipelineId} \n                    pipeline={pipelines}\n                    selectedPipelineId={pipelines.selectedPipelineId}\n                    scripts={scripts}\n                    selectedScript={selectedScript}\n                    selectedNode={selectedNode}\n                    selectedPipeline={selectedPipeline}\n                    buildMode={buildMode}\n                    test_job={test_job}\n                    results={results}\n                    toggleTestMode={this.props.toggleTestMode}\n                    setSidebarTab={this.props.setSidebarTab}\n                    sidebarTab={this.props.sidebarTab}\n                    handleFetchResultData={this.props.handleFetchResultData}\n                    handleUpdatePipelineStep={this.props.handleUpdatePipelineStep}\n                    handleScriptSelect={this.props.handleScriptSelect} \n                    toggleDeleteConfirm={this.toggleDeleteConfirm}\n                    testJobLogsLoading = {this.props.testJobLogsLoading}\n                    handleFetchTestJobStepLog={this.props.handleFetchTestJobStepLog}\n                    handleTestTransformForResult={this.props.handleTestTransformForResult}\n                />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { \n    Table,\n    Segment\n} from 'semantic-ui-react';\n\nexport const PipelineTable = (props) => {\n    return (\n        <Segment raised style={{\n            padding:'0px',\n            height:'60vh',\n            overflow:'scroll'\n        }}>\n            <Table selectable celled structured size='small'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Description</Table.HeaderCell>\n                        <Table.HeaderCell>Mode</Table.HeaderCell>\n                        <Table.HeaderCell>Doc Types</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {props.children}\n                </Table.Body>\n            </Table>\n        </Segment>);\n}","import React, { useState } from 'react'\nimport { \n    Table,\n    Button,\n    Label,\n    Confirm\n } from 'semantic-ui-react'\n //import SupportedFileTypes from '../../../Shared/SupportedFileTypes';\n\nconst PipelineRow = (props) => {\n\n    const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n     // Parse the file type json from the string stored in the db\n     let fileTypes = [];\n     try {\n        fileTypes = JSON.parse(props.pipeline.supported_files).supported_files;\n     } catch (e) {}\n\n     return (\n        <Table.Row\n            style={props.selected ? {backgroundColor: '#e2ffdb', overflowWrap:\"break-word\"} : {overflowWrap:\"break-word\"}}\n        >\n            <Confirm\n                header=\"Delete this pipeline?\"\n                content=\"Are you sure you want to delete this pipeline? The scripts will not be deleted, but your pipeline steps and settings will be!\"\n                open={showDeleteConfirm}\n                onCancel={() => setShowDeleteConfirm(!showDeleteConfirm)}\n                onConfirm={() => props.onDelete(props.pipeline.id)}\n            />\n            <Table.Cell \n                onClick={() => props.onClick()}\n                style={{\n                    cursor:\"pointer\",\n                    color:\"blue\",\n                    textDecoration:\"underline\"\n                }}>\n                    {props.pipeline.name}\n            </Table.Cell>\n            <Table.Cell> \n                {props.pipeline.description ? props.pipeline.description.substring(0,25) : \"No Description...\"}\n            </Table.Cell>\n            <Table.Cell textAlign='center'>\n                { props.pipeline.production ? <Label color='green' size='tiny'>PRODUCTION</Label> :\n                <Label color='red' size='tiny'>TESTING</Label>}\n            </Table.Cell>\n            <Table.Cell textAlign='center'>\n                {/* <SupportedFileTypes extensions={fileTypes}/> */}\n            </Table.Cell>\n            <Table.Cell textAlign='center'>\n                <Button\n                    basic\n                    circular\n                    color='red'\n                    icon='trash'\n                    onClick={() => setShowDeleteConfirm(!showDeleteConfirm)}\n                />\n                <Button\n                    basic\n                    circular\n                    color='green'\n                    icon='download'\n                    onClick={() => props.handleDownloadPipeline(props.pipeline.id)}\n                />\n            </Table.Cell>\n        </Table.Row>\n     );\n}\n\nexport default PipelineRow;","import React from 'react';\nimport { Card, Image, Icon, Label } from 'semantic-ui-react';\n\nexport const NodeListItem = (props) => {\n    const { script, selected, onSelect } = props;\n\n    // Try to decode the supported extensions and handle any failures gracefully\n    let supportedExtensions = [\n        <Label key='allExts' size='mini' color='teal'>\n            All\n        </Label>,\n    ];\n    \n    try {\n        let exts = JSON.parse(script.supported_file_types);\n        supportedExtensions = exts.map((ext) => (\n            <Label key={ext} size='mini' color='teal'>\n                {ext}\n            </Label>\n        ));\n    } catch (e) {}\n\n    // Get the proper icon based on the job type.\n    let imageUrl = '';\n    switch (script.type) {\n        case 'RUN_ON_JOB_DOCS_PARALLEL':\n            imageUrl = './parallel_job.png';\n            break;\n        case 'RUN_ON_JOB':\n            imageUrl = './serial_job.png';\n            break;\n        default:\n    }\n\n    return (\n        <Card\n            key={script.id}\n            onClick={() => onSelect(script.id)}\n            style={selected ? { margin:'5px', backgroundColor: '#e2ffdb' } : {margin:'5px'}}\n        >\n            <Card.Content>\n                <Image floated='right' size='mini' src={imageUrl} />\n                <Card.Header>{script.human_name.substring(0, 16)}</Card.Header>\n                <Card.Meta>\n                    <div>{supportedExtensions}</div>\n                </Card.Meta>\n                <Card.Description>{props.script.description}</Card.Description>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport const EmptyListItem = (props) => {\n\n    return (\n        <Card\n            key={-1}\n            style={{margin:'5px'}}\n        >\n            <Card.Content> \n                <Card.Header><Icon floated='right' name='cancel'/>No Matching Scripts</Card.Header>\n                <Card.Meta>\n                    <div>N/A</div>\n                </Card.Meta>\n                <Card.Description>No scripts are available or the search terms you entered do not appear to match any of the scripts available on the system.</Card.Description>\n            </Card.Content>\n        </Card>\n    );\n};\n","import React, { useState } from 'react';\nimport { Segment, Button, Comment, Input, Icon, Label } from 'semantic-ui-react';\nimport { EmptyListItem, NodeListItem } from './NodeListItem';\nimport { NewNodeNameModel } from '../Modals/NewNodeNameModal';\n\nimport Fuse from 'fuse.js';\n\nconst SelectWindow = (props) => {\n    const { scripts, setAddModalVisible } = props;\n    const [showNewNameView, setShowNewNameView] = useState(false); \n    const [selectedNode, selectNode] = useState(-1);\n    const [searchString, setSearchString] = useState(\"\");\n    const [newName, setNewName] = useState(\"\");\n\n\n    const scriptFuse = new Fuse(scripts, {\n        threshold: 0.4,\n        keys: ['human_name', 'description']\n    });\n\n    const filteredScripts = searchString ===\"\" ? scripts : scriptFuse.search(searchString).map((item) => item.item); \n\n    const items = filteredScripts.length > 0 ? filteredScripts.map((script) => (\n        <NodeListItem\n            key={script.id}\n            script={script}\n            selected={selectedNode === script.id}\n            onSelect={selectNode}\n        />\n    )) : <EmptyListItem/> ;\n\n    function handleChange(e) {\n        setSearchString(e.target.value);\n    };\n\n    function saveAndClose(nodeName, scriptId, settings) {\n        props.onAddNode(nodeName, scriptId, settings);\n        setAddModalVisible(false);\n    }\n\n    return (\n        <div style={{display:'flex', flexDirection:'column', justifyContent:'flex-start'}}>\n            {\n                !showNewNameView ? \n                    <>\n                        <Segment style={{width:'100%', margin:'0px'}}>\n                            <Input\n                                style={{width:'100%'}}\n                                placeholder='Search...'\n                                name='searchString'\n                                icon='search'\n                                value={searchString}\n                                onChange={handleChange}\n                            />\n                        </Segment>\n                        <Segment>\n                            <Comment.Group style={{\n                                height:'30vh',\n                                overflowY: 'scroll',\n                            }}>\n                                {items}\n                            </Comment.Group>\n                        </Segment>\n                        <div>\n                            <Button\n                                disabled={selectedNode===-1}\n                                floated='right'\n                                positive\n                                onClick={() => setShowNewNameView(!showNewNameView)}\n                            >\n                                Add Node\n                            </Button>\n                        </div>\n                    </>\n                    :\n                    <>\n                        <Segment padded>\n                            <Label attached='top'>Pipeline name:</Label>\n                            <Input\n                                fluid\n                                value={newName}\n                                onChange = {(data) => { setNewName(`${data.target.value}`)}}\n                            />\n                        </Segment>\n                        <div>\n                            <Button color='green' onClick={() => saveAndClose(newName, selectedNode, {})}>\n                                <Icon name='checkmark' /> Create Node\n                            </Button>\n                            <Button color='grey' onClick={() => setShowNewNameView(false)}>\n                                <Icon name='cancel' /> Cancel\n                            </Button>\n                        </div>\n                    </>\n            }\n        </div> \n    );\n};\n\nexport default SelectWindow;\n","import React from 'react'\nimport { Menu, Icon, Popup } from 'semantic-ui-react'\nimport SelectWindow from './SelectWindow';\n\nexport const PrimaryPipelineControls = (props) => {\n    \n    const { \n        deletePipeline,\n        downloadPipeline,\n        downloadTestResult,\n        handleUpdateJob,\n        onAddNode,\n        buildMode,\n        scripts,\n        test_job,\n        windowHeight } = props;\n\n    const contextRef = React.useRef()\n    const [addModalVisible, setAddModalVisible] = React.useState(false)\n\n    let buttons = [\n        (<Menu.Item\n            disabled={buildMode}\n            key='deleteJob'\n            name='deleteJob'\n            onClick={(e)=> {\n                e.stopPropagation();\n                deletePipeline();\n            }}\n        >\n            <Icon name='trash' color='red'/>\n            Delete\n        </Menu.Item>),\n        (<Menu.Item\n            disabled={buildMode}\n            key=\"addNode\"\n            name='addNode'\n            onClick={(e)=> {\n                e.stopPropagation();\n                setAddModalVisible(!addModalVisible);\n            }}\n        >\n            <Icon name='add' color='green'/>\n            <strong ref={contextRef}>Add Node</strong>\n        </Menu.Item>),\n        (<Menu.Item\n            disabled={buildMode}\n            key=\"downloadJob\"\n            name='downloadJob'\n            onClick={(e)=> {\n                e.stopPropagation();\n                downloadPipeline();\n            }}\n        >\n            <Icon name='save' color='blue'/>\n            Export\n        </Menu.Item>)\n    ];\n\n    if (buildMode && test_job && !test_job.started) {\n        buttons.push(\n            <Menu.Item\n                key=\"startTest\"\n                name='startTest'\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    let updatedObject = {id: test_job.id, queued: true};\n                    handleUpdateJob(updatedObject);\n                }}\n            >\n                <Icon name='play' color='purple'/>\n                Start Test\n            </Menu.Item>\n        );\n    }\n    if (buildMode && test_job && test_job.file) {\n        buttons.push(\n            <Menu.Item\n                key=\"downloadTestResults\"\n                name='downloadTestResults'\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    downloadTestResult(test_job.id);\n                }}\n            >\n                <Icon name='download' color='purple'/>\n                Test Results\n            </Menu.Item>\n        );\n    }\n\n    return (\n        <Menu icon='labeled'>\n            <Popup\n                context={contextRef}\n                content={<SelectWindow setAddModalVisible={setAddModalVisible} scripts={scripts.items} onAddNode={onAddNode}/>}\n                position='top center'\n                open={addModalVisible}\n                offset={[0, Math.ceil(windowHeight*.025)]}\n            />\n            {buttons}\n        </Menu>);\n}\n","import React from 'react'\nimport { Menu, Icon } from 'semantic-ui-react'\n\nexport const PipelineTrayControls = (props) => {\n    const { \n        selectedTab,\n        selectTab,\n        selectedNode,\n        buildMode,\n    } = props;\n\n    if (selectedNode) return <PipelineNodeControls selectedTab={selectedTab} selectTab={selectTab} buildMode={buildMode}/>;\n\n    return <PipelineControls selectedTab={selectedTab} selectTab={selectTab} buildMode={buildMode}/>\n\n}\n\nexport const PipelineNodeControls = (props) => {\n    \n    const { selectedTab, selectTab, buildMode} = props;\n\n    let buttons = [\n        (<Menu.Item\n            key=\"nodeOverview\"\n            name='nodeOverview'\n            active={selectedTab===0}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(0);\n            }}\n        >\n            <Icon name='dot circle outline' />\n            Node\n        </Menu.Item>),\n        (<Menu.Item\n            key=\"nodeSettings\"\n            name='nodeSettings'\n            active={selectedTab===1}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(1);\n            }}\n        >\n            <Icon name='settings' />\n            Settings\n        </Menu.Item>),\n        (<Menu.Item\n            key='inputTransform'\n            name='inputTransform'\n            active={selectedTab===2}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(2);\n            }}\n        >\n            <Icon name='code' />\n            Input Transform\n        </Menu.Item>) \n    ];\n\n    if (buildMode) {\n        buttons.push(\n            <Menu.Item\n                key=\"testInputs\"\n                name='testInputs'\n                active={selectedTab===3}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(3);\n                }}\n            >\n                <Icon name='cloud upload' color='purple'/>\n                Test Input\n            </Menu.Item>\n        );\n        buttons.push(\n            <Menu.Item\n                key=\"testOutputs\"\n                name='testOutputs'\n                active={selectedTab===4}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(4);\n                }}\n            >\n                <Icon name='cloud download' color='purple' />\n                Test Output\n            </Menu.Item> \n        );\n    }\n\n    return (\n        <Menu icon='labeled' vertical>\n            {buttons}\n        </Menu>);\n}\n\nexport const PipelineControls = (props) => {\n    \n    const { \n        selectedTab,\n        selectTab,\n        buildMode\n    } = props;\n\n    let buttons = [\n        (<Menu.Item\n            key=\"pipelineOverview\"\n            name='pipelineOverview'\n            active={selectedTab===0}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(0);\n            }}\n        >\n            <Icon name='code branch' />\n            Pipeline\n        </Menu.Item>),\n        (<Menu.Item\n            key='pipelineSchema'\n            name='pipelineSchema'\n            active={selectedTab===1}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(1);\n            }}\n        >\n            <Icon name='table' />\n            Input Schema\n        </Menu.Item>)\n    ];\n\n    if (buildMode) buttons.push(\n        <Menu.Item\n            key=\"testInputs\"\n            name='testInputs'\n            active={selectedTab===2}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(2);\n            }}\n        >\n            <Icon name='cloud upload' color='purple' />\n            Test Inputs\n        </Menu.Item>\n    );\n\n    return (\n        <Menu icon='labeled' vertical>\n            {buttons}\n        </Menu>);\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { \n    Button,\n    Card,\n    Image,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { StepStatusLabel } from '../../../Shared/StatusLabels';\n\nimport { runTestJobToNode } from '../../../../Redux/actions';\n\nconst PipelineNode = (props) => {\n\n    function handleRunTestJobToNode(nodeId) {\n        props.dispatch(runTestJobToNode(nodeId));\n    }\n\n    const { node, test_job, application } = props;\n    const { buildMode } = application;\n\n    let myId = parseInt(node.id);\n\n    let myResult = null;\n    try {\n        myResult = _.find(test_job.test_results, {pipeline_node: myId})\n    } catch {}\n\n    let loaderObj = <></>;\n    \n    if (myResult) {\n        if (myResult.started) {\n            if (!myResult.finished && !myResult.error) {\n                loaderObj = <Dimmer active inverted><Loader size='medium'>Running...</Loader></Dimmer>;\n            }\n        }\n    }\n\n    if (node.type === 'THROUGH_SCRIPT') {\n        return (\n            <div>\n                <Card>\n                    <Card.Content>\n                        { loaderObj }\n                        <Image\n                            floated='right'\n                            size='mini'\n                            src={\n                                node.script.type === 'RUN_ON_JOB'\n                                    ? 'serial_job.png'\n                                    : 'parallel_job.png'\n                            }\n                        />\n                        <Card.Header>\n                            {node.name} (<b>ID {node.id}</b>)\n                        </Card.Header>\n                        <Card.Meta>Script: {node.script.human_name}</Card.Meta>\n                        <Card.Description>\n                            {node.script.description}\n                            <i>\n                                {node.script.type === 'RUN_ON_JOB'\n                                    ? 'This script will run single-threaded over all documents in a job, sequentially.'\n                                    : 'This script will run multithreaded over all document in a job, in parallel.'}\n                            </i>\n                            {buildMode ? \n                                <>\n                                    <br/>\n                                    <br/>\n                                    <StepStatusLabel step={myResult} buildMode={buildMode}/>\n                                </> : \n                                <></>\n                            } \n                        </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                            <div style={{ textAlign: 'right' }}>\n                                <Button circular color='red' icon='trash' />\n                                {buildMode && test_job.test_job ? \n                                    <Button\n                                        circular\n                                        color='green'\n                                        icon='play'\n                                        onClick={() => handleRunTestJobToNode(myId)}\n                                    />\n                                    :\n                                    <></>\n                                }\n                            </div>\n                        </Card.Content>\n                    \n                </Card>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <Card>\n                    <Card.Content>\n                    { loaderObj }\n                    <Image\n                        floated='right'\n                        size='mini'\n                        src='start_icon_128.png'\n                    />\n                    <Card.Header>START SCRIPT: Extracter</Card.Header>\n                    <Card.Meta>Script: {node.script.id === -1 ? \"Built-In\" : node.script.human_name}</Card.Meta>\n                    {\n                        buildMode ? \n                            <Card.Description>\n                                <StepStatusLabel step={myResult} buildMode={buildMode}/>\n                            </Card.Description>\n                            :\n                            <></>\n                    }\n                    </Card.Content>\n                </Card>\n            </div>\n\n        );\n    }\n};\n\n\nfunction mapStateToProps(state) {\n    \n    const {\n        test_job, \n        application, \n        scripts\n    } = state;\n  \n    return {\n        test_job, \n        application,\n        scripts\n    };\n  }\n\nexport default connect(mapStateToProps)(PipelineNode);","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport const Container = styled.div`\n        height: 100vh;\n        weight: 100vw;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\nexport class CustomCanvasWidget extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Container\n\t\t\t\tbackground={this.props.background || 'rgb(31, 40, 57)'}\n\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t{this.props.children}\n\t\t\t</Container>\n\t\t);\n\t}\n}","import * as React from 'react';\n\nimport { CustomCanvasWidget } from './Canvas/CustomCanvasWidget';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\n\nimport './digraph.scss';\n\n//Solution to zoom truncating in this github issue: https://github.com/projectstorm/react-diagrams/issues/666\nexport class DigraphView extends React.Component {\n  \n  render() {\n    return (\n      <CustomCanvasWidget>\n        <CanvasWidget className=\"diagram-container\" engine={this.props.digraphEngine.getEngine()} />\n      </CustomCanvasWidget>);\n\t}\n}\n\nexport default DigraphView;\n","import * as React from 'react';\nimport { Icon, Sidebar, Segment, Label, Loader, Dimmer } from 'semantic-ui-react';\nimport DigraphView from '../DigraphToo/DigraphView';\n\n\nconst showStyle= {\n    width: '100%',\n    height: '86vh',\n    marginBottom:'0px',\n    marginLeft:'260px',\n    transition: 'all 500ms ease',\n}\n\nconst hideStyle={\n    width: '100%',\n    height: '86vh',\n    marginLeft:'0px',\n    marginBottom:'0px',\n    transition: 'all 500ms ease',\n}\n\nconst goBackShowStyle={\n    position:'absolute',\n    left:'260px',\n    top:'0px',\n    transition: 'all 500ms ease',\n};\n\nconst goBackHideStyle={\n    position:'absolute',\n    left:'0px',\n    top:'0px',\n    transition: 'all 500ms ease',\n};\n\nconst controlsShowStyle = {\n    position: 'absolute',\n    top: '5vh',\n    left:'300px',\n    zIndex: 10,\n    transition: 'all 500ms ease',\n};\n\nconst controlsHideStyle = {\n    position: 'absolute',\n    top: '5vh',\n    left:'40px',\n    zIndex: 10,\n    transition: 'all 500ms ease',\n};\n\nconst trayControlsHiddenStyle = {\n    cursor:'pointer',\n    display:'flex',\n    flexDirection:'column',\n    justifyContent:'center',\n    alignItems:'center',\n    zIndex: 1000,\n    position: 'absolute',\n    bottom: '40vh',\n    right:'0px',\n    borderRadius:'5px 0px 0px 10px',\n    backgroundColor:'#f3f4f5',\n    transition: 'all 500ms ease',\n};\n\nconst trayControlsShownStyle = {\n    cursor:'pointer',\n    display:'flex',\n    flexDirection:'column',\n    justifyContent:'center',\n    alignItems:'center',\n    zIndex: 1000,\n    position: 'absolute',\n    bottom: '40vh',\n    right:'15px',\n    borderRadius:'5px 0px 0px 10px',\n    backgroundColor:'#f3f4f5',\n    transition: 'all 500ms ease',\n}\n\nconst collapseButtonHiddenStyle = {\n    cursor:'pointer',\n    display:'flex',\n    flexDirection:'column',\n    justifyContent:'center',\n    alignItems:'center',\n    zIndex: 1000,\n    position: 'absolute',\n    bottom: '75vh',\n    right:'0px',\n    borderRadius:'5px 0px 0px 10px',\n    width:'5vw',\n    height:'7vh',\n    backgroundColor:'#f3f4f5',\n    transition: 'all 500ms ease',\n};\n\nconst collapseButtonShownStyle = {\n    cursor:'pointer',\n    display:'flex',\n    flexDirection:'column',\n    justifyContent:'center',\n    alignItems:'center',\n    zIndex: 1000,\n    position: 'absolute',\n    bottom: '75vh',\n    right:'15px',\n    borderRadius:'5px 0px 0px 10px',\n    width:'5vw',\n    height:'7vh',\n    backgroundColor:'#f3f4f5',\n    transition: 'all 500ms ease',\n}\n\nconst playControlsStyle = {\n    display: 'flex', \n    flexDirection: 'row', \n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute', \n    width:'100%',\n    bottom: '5vh'\n}\n\nconst headerWidgetStyle = {\n    display: 'flex', \n    flexDirection: 'row', \n    justifyContent: 'center',\n    alignItems: 'center',\n    position: 'absolute', \n    width:'100%',\n    top: '5vh'\n}\n\nexport class Digraph extends React.PureComponent {\n    \n\n     // Zoom out of the digraph (the way that component is written, the zoom level is embedded)\n    // in the digraph json which is stored in state, soooo... just change state scale property\n    zoomOut = () => {\n        console.log(\"Reqire zoom out\");\n    }\n\n     // Reset zoom of the digraph (the way that component is written, the zoom level is embedded)\n    // in the digraph json which is stored in state, soooo... just change state scale property\n    resetZoom = () => {\n        console.log(\"Reset zoom\");\n    }\n\n    render() {\n\n        // Pass methods and properties to detailPanel component passed in\n        // 1) selectedNode, which is the currently selected node and all related data in the digraph json\n        // 2) selectedNodeDetails - if you pass array of detail items with ids matching the nodes in the digraph,\n        //    selected node will have its corresponding detail object loaded. \n        // 3) moveXandYTo - a method to move the digraph view pane to center on a given x,y coord\n        let detailPanel = React.cloneElement(this.props.detailPanel, {\n            props:'add things here if needed'\n        });\n\n        // Inject navigation methods into the user's controls for use by the component\n        let controls = React.cloneElement(this.props.controls, {\n            zoomIn: this.zoomIn,\n            zoomOut: this.zoomOut,\n            resetZoom: this.resetZoom,\n            moveXandYTo: this.moveXandYTo\n        });\n\n        return (\n            <Sidebar.Pushable \n                as={Segment} \n                style={{\n                    width:'100%',\n                    height:'87vh',\n                    margin:'0px'\n                }}>\n                <Sidebar\n                    animation='push'\n                    direction='right'\n                    visible={this.props.showSidebar}\n                    style={{width:'275px', padding:'0px'}}\n                >\n                    {detailPanel}\n                </Sidebar>\n                <Sidebar.Pusher style={{padding:'0px'}}>  \n                    { this.props.loadingText ? \n                        <Dimmer active inverted>\n                            <Loader inverted>{this.props.loadingText}</Loader>\n                            {/*Need back button visible over the loader dimmer and this \n                            was only way I could figure out to do that, even though it's\n                            duplicative of loader elsewhere */}\n                            <Label\n                                    style={ this.props.showSidebar ? goBackShowStyle : goBackHideStyle } \n                                    corner='left'\n                                    color='blue'\n                                    icon='reply'\n                                    onClick={() => this.props.exitDigraph()}\n                                />\n                        </Dimmer> : <></> \n                    }\n                    <div style={{width:'100%', height:'100%'}}>\n                        {\n                            this.props.showSidebarToggle ? \n                            <div \n                                onClick={() => this.props.toggleSidebar()}\n                                style={this.props.showSidebar ? collapseButtonShownStyle : collapseButtonHiddenStyle}>\n                                <div> \n                                    <Icon \n                                        name={ this.props.showSidebar ? \n                                                'arrow alternate circle right outline' :\n                                                'arrow alternate circle left outline'\n                                        }\n                                        color={ this.props.showSidebar ? 'red' : 'green'}\n                                        size='big'\n                                    />\n                                </div>\n                            </div> : <></>\n                        }\n                        <div \n                            style={ this.props.showSidebar ? showStyle : hideStyle }\n                            onClick={this.props.onCanvasClick}\n                        >\n                            <Label\n                                style={ this.props.showSidebar ? goBackShowStyle : goBackHideStyle } \n                                corner='left'\n                                color='blue'\n                                icon='reply'\n                                onClick={() => this.props.exitDigraph()}\n                            />\n                            <DigraphView digraphEngine={this.props.digraphEngine}/>\n                            { controls ? \n                                <div style={ this.props.showSidebar ? controlsShowStyle : controlsHideStyle}>\n                                    {controls}\n                                </div> : <></> }\n                            { this.props.trayControls ? \n                                <div style={ this.props.showSidebar ? trayControlsShownStyle : trayControlsHiddenStyle}>\n                                    {this.props.trayControls}\n                            </div> : <></> }\n                            { this.props.playControls ? \n                                <div style={playControlsStyle}>\n                                    {this.props.playControls}\n                                </div> : <></> }\n                            { this.props.headerWidget ? \n                            <div style={headerWidgetStyle}>\n                                {this.props.headerWidget}\n                            </div> : <></> }\n                        </div>                      \n                    </div>\n                </Sidebar.Pusher>   \n            </Sidebar.Pushable>\n        );\n    }\n}\n","import * as React from 'react';\nimport { \n    Breadcrumb, \n    Segment, \n    Pagination\n} from 'semantic-ui-react';\nimport Cookies from 'js-cookie';\nimport _ from 'lodash';\n\nimport { getJobLogs} from '../../Api/api';\nimport { HeaderContainer } from '../Layouts/Layouts';\nimport { DetailPanel } from './components/DetailPanel/DetailPanel'\nimport { PipelineTable } from './components/Controls/PipelineTable';\nimport PipelineRow from './components/Controls/PipelineRow';\nimport { PrimaryPipelineControls } from './components/Controls/PrimaryPipelineControls';\nimport { PipelineTrayControls } from './components/Controls/PipelineTrayControls';\nimport PipelineNode from './components/Nodes/PipelineNode';\nimport { Digraph } from '../Digraph/Digraph';\nimport { VerticallyCenteredDiv } from '../Shared/Wrappers';\nimport ConfirmModal from '../Shared/ConfirmModal';\nimport { CreateAndSearchBar, JobDigraphButtonPanel } from '../Shared/Controls';\nimport { PipelineHeaderWidget } from './components/Header/PipelineHeaderWidget';\n\nclass PipelineDigraphTab extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            job_log: \"Click Start to Run Test Job...\",\n            log_fetching: false,\n            running: false,\n            showSidebar: true,\n            timer: null,\n            sidebarTab: 0,\n            showDeleteConfirm:false\n        }\n    }\n\n    toggleDeleteConfirm = () => {\n        this.setState({\n            showDeleteConfirm: !this.state.showDeleteConfirm\n        });\n    }\n\n    toggleSidebar = () => {\n        this.setState({\n            showSidebar: !this.state.showSidebar\n        });\n    }\n\n    openSidebar = () => {\n        if (!this.state.showSidebar) this.setState({showSidebar: true});\n    }\n    \n    closeSidebar = () => {\n        if (this.state.showSidebar) this.setState({showSidebar: false});\n    }\n\n    setSidebarTab = (tabNum) => {\n        if (this.state.sidebarTab === tabNum) {\n            this.toggleSidebar();\n        } else {\n            this.setState({\n                sidebarTab: tabNum\n            }, this.openSidebar());\n        }\n    }\n\n    componentDidMount() {\n\n        let timer = setInterval(this.tick, 2000);\n        this.setState({timer});\n\n        // Refresh the pipelines\n        this.props.fetchPipelines();\n\n        // Refresh script summaries\n        this.props.handleFetchScripts();\n\n        //If we just loaded the page and already have a pipeline selected, \n        //make sure digraph is loaded\n        if (this.props.pipelines.selectedPipelineId !== -1) {\n            \n            this.props.refreshSelectedPipelineDigraph();\n\n            // If there's a test job... refresh test job data\n            if (this.props.test_job.test_job) {\n                this.props.refreshSummaryTestResults();\n                this.props.handleRefreshTestJob()                \n            }\n        }\n    }\n \n    uploadPipelineYAML = (event) => {\n        event.preventDefault();\n        console.log(event.target.files[0]);\n        this.props.handleUploadPipeline(event.target.files[0]);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.state.timer);\n    }\n\n    tick = () => {\n\n        let myJob = this.props.test_job.test_job;\n\n        if(myJob) {\n             // If job is running, get the results on each tick\n            if (myJob.started && !myJob.finished && !myJob.error) {\n                this.props.refreshSummaryTestResults();\n            }\n            //If job hasn't started, get documents on each tick.\n            if (!myJob.started) {\n                this.props.refreshTestDocuments();\n            }\n\n            if (!myJob.finished) { \n                this.props.handleRefreshTestJob();\n            }\n        }  \n    }\n\n    getLogs = async () => {\n        try {\n            let results = await getJobLogs(this.props.test_job.test_job.id, Cookies.get('token'));\n            this.setState({ job_log: results.data.log, log_fetching: false });\n        }\n        catch(err) {\n            this.setState({ job_log: `Error fetching logs: ${err}`, log_fetching: false });\n        }\n    };\n\n    // If the user switches to test mode, alter the state and then create a test job on the backend\n    // with this pipeline.\n    toggleTestMode = () => {\n        this.setState({\n            job_log: \"Click Start to Run Test Job...\",\n            log_fetching: false,\n            running: false\n        }, () => {\n            this.props.handleToggleBuildMode();\n        });\n    }\n\n    createPipelineEdge = (edge) => {\n        console.log(\"Try to create pipeline edge...\", edge);\n        this.props.handleCreatePipelineEdge(edge[0].fromNodeId, edge[0].toNodeId)\n    }\n\n    onNodeMove = (nodeId, x_coord, y_coord) => {\n        this.props.handleMovePipelineNode({\n            id: nodeId,\n            x_coord,\n            y_coord\n        });\n    }\n\n    onPipelineScale = (scale) => {\n        this.props.handleScalePipeline({\n            id: this.props.pipelines.selectedPipeline.id,\n            scale\n        });\n    }\n\n    onPipelineMove = (x_offset, y_offset) => {\n        console.log(\"Handle canvas move: \",{x_offset, y_offset})\n        this.props.handleMovePipeline({\n            id: this.props.pipelines.selectedPipeline.id,\n            x_offset,\n            y_offset,\n        })\n    }\n\n    render() {\n\n        const fileInputRef = React.createRef();\n\n        const { \n            results,\n            pipelines,\n            pipelinesteps,\n            filterValue,\n            scripts,\n            buildMode,\n            windowHeight \n        } = this.props;\n\n        let selectedPipeline = _.find(pipelines.items, {id: pipelines.selectedPipelineId});\n\n        let testJobResult = null;\n        if (buildMode) {\n            try {\n                testJobResult = _.find(results.items, {type: 'JOB'});\n            } catch {}\n        } \n\n        let selectedNode = _.find(pipelinesteps.items, {id: pipelinesteps.selectedPipelineStepId});\n        let selectedScript = selectedNode ? _.find(scripts.items, {id: selectedNode.script}) : null;\n        \n        let loadingText = \"\";\n        if (selectedPipeline) {\n            if(pipelines.loading) {\n                loadingText=\"Loading pipeline...\";\n            }\n            if(selectedPipeline.locked) {\n                loadingText=\"Installing... Check back later.\";\n            }\n        }\n\n        let crumbs = [\n            <Breadcrumb.Section\n                key={0}\n                link\n                onClick={() => this.props.handleUnselectPipeline()}\n            >\n                Pipelines\n            </Breadcrumb.Section>,\n        ];\n\n        if (selectedPipeline) {\n            crumbs.push(<Breadcrumb.Divider key={1}/>);\n            crumbs.push(\n                <Breadcrumb.Section active key={2}>\n                    {selectedPipeline.name}\n                </Breadcrumb.Section>\n            );\n        }\n\n        let breadcrumbs = \n            <Segment raised style={{width:'100%'}}>\n                <Breadcrumb>\n                    {crumbs}\n                </Breadcrumb>\n            </Segment>;\n\n        let table = <PipelineTable>\n          {pipelines.items.map((pipeline) => (\n            <PipelineRow\n                key={pipeline.id}\n                onClick={() => this.props.handleSelectPipeline(pipeline.id)} \n                pipeline={pipeline}\n                selected={selectedPipeline ? pipeline.id===selectedPipeline.id : false}\n                toggleEditModal={this.props.handlePipelineModalToggle}\n                handleDownloadPipeline={this.props.handleDownloadPipeline}\n                onDelete={this.props.handleDeletePipeline}\n            />))}\n        </PipelineTable>;\n\n        return (\n            <VerticallyCenteredDiv>\n                <ConfirmModal\n                    visible={this.state.showDeleteConfirm} \n                    message=\"You have chosen to delete this pipeline. ARE YOU SURE? This cannot be undone. You will lose all pipeline relationships and settings.\"\n                    yesAction={() => this.onConfirmDelete(this.props.jobs.selectedJobId)}\n                    noAction={this.toggleDeleteConfirm}\n                    toggleModal={this.toggleDeleteConfirm}\n                />\n                <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    hidden\n                    onChange={this.uploadPipelineYAML}\n                />\n                { !selectedPipeline ? \n                    <div>\n                        <CreateAndSearchBar\n                            onChange={this.props.setPipelineNameFilter}\n                            onCreate={this.props.handleNewPipelineModalToggle}\n                            onSubmit={this.props.fetchPipelines}\n                            onImport={() => fileInputRef.current.click()}\n                            placeholder='Search Pipelines by Name...'\n                            value={filterValue}\n                        />\n                    </div> : <></> }\n                { !selectedPipeline ? \n                    <HeaderContainer\n                        loading={this.props.pipelines.loading}\n                        loadingText=\"Fetching Pipeline Details...\"\n                        body={table}\n                        header={breadcrumbs}\n                    /> :\n                    <Digraph\n                        digraphEngine={this.props.digraphEngine}\n                        key={pipelines.selectedPipelineId}\n                        toggleSidebar={this.toggleSidebar}\n                        showSidebar={this.state.showSidebar}\n                        exitDigraph={this.props.handleUnselectPipeline}\n                        loadingText={loadingText}\n                        detailPanel={\n                            <DetailPanel\n                                key={pipelines.selectedPipelineId}\n                                selectedNode={selectedNode}\n                                selectedPipeline={selectedPipeline}\n                                handleUpdatePipelineStep={this.props.handleUpdatePipelineStep}\n                                handleUpdatePipeline={this.props.handleUpdatePipeline}\n                                handleScriptSelect={this.props.handleScriptSelect}\n                                scripts={scripts}\n                                results={results}\n                                selectedScript={selectedScript}\n                                pipelines={this.props.pipelines}\n                                buildMode={buildMode}\n                                test_job={this.props.test_job}\n                                testJobResult={testJobResult}\n                                testJobLogsLoading = {this.state.log_fetching}\n                                toggleTestMode={this.toggleTestMode}\n                                setSidebarTab={this.setSidebarTab}\n                                sidebarTab={this.state.sidebarTab}\n                                handleFetchResultData={this.props.handleFetchResultData}\n                                handleDeleteTestDocument={this.props.handleDeleteTestDocument}\n                                handleUploadTestDocument={this.props.handleUploadTestDocument}\n                                handleDownloadDocument={this.props.handleDownloadDocument}\n                                handleUpdateTestJob = {this.props.handleUpdateTestJob}\n                                handleFetchTestJobStepLog={this.props.handleFetchTestJobStepLog}\n                                handleFetchTestJobLog={this.props.handleFetchTestJobLog}\n                                handleTestTransformForResult={this.props.handleTestTransformForResult}\n                                handleTestDocumentPageChange ={this.props.handleTestDocumentPageChange}\n                            />\n                        }\n                        controls={\n                            <JobDigraphButtonPanel digraphEngine={this.props.digraphEngine}/>\n                        }\n                        trayControls={\n                            <PipelineTrayControls\n                                buildMode={buildMode}\n                                selectedTab={this.state.sidebarTab}\n                                selectTab={this.setSidebarTab}\n                                selectedNode={selectedNode}\n                            />\n                        }\n                        playControls={\n                            <PrimaryPipelineControls\n                                windowHeight={windowHeight}\n                                scripts={scripts}\n                                onAddNode={this.props.handleAddPipelineNode}\n                                buildMode={buildMode}\n                                handleUpdateJob = {this.props.handleUpdateJob}\n                                test_job={this.props.test_job.test_job}\n                                deletePipeline={this.toggleDeleteConfirm}\n                                downloadPipeline={() => this.props.handleDownloadPipeline(pipelines.selectedPipelineId)}\n                                downloadTestResult={this.props.handleDownloadJobResult}\n                            />\n                        }\n                        // headerWidget={\n                        //     <PipelineHeaderWidget selectedPipeline={selectedPipeline}/>\n                        // }\n                        nodeClass={PipelineNode}\n                    />\n                 }\n                 { !selectedPipeline ? \n                      <div style={{\n                        display:'flex',\n                        flexDirection:'row',\n                        justifyContent:'center',\n                        alignItems:'center',\n                        marginTop:'2vh'\n                    }}>\n                \n                        <div>\n                            <Pagination\n                                activePage={1}\n                                onPageChange={(e, { activePage }) => console.log(\"Change page to: \", activePage)} \n                                totalPages={1}\n                            />\n                        </div>  \n                    </div> : <></> \n                 }\n            </VerticallyCenteredDiv>\n        );\n    }\n}\n\nexport default PipelineDigraphTab;","import React, {useState} from 'react'\nimport { Table, Label, Button, Statistic, Confirm } from 'semantic-ui-react'\n\nconst JobRow = (props) => {\n    \n    const [showConfirm, setShowConfirm] = useState(false);\n    const {job} = props;\n\n    if (!job) {\n        return <Table.Row>Job Data Missing</Table.Row>;\n    }\n\n    function confirmDelete() {\n        props.handleDeleteJob(props.job.id);\n        setShowConfirm(false);\n    }\n\n    let startTime = \"\";\n    let startDate = \"N/A\";\n    if (job.start_time) {\n        var dStart = new Date(job.start_time);\n        startTime = dStart.toLocaleTimeString();\n        startDate = dStart.toLocaleDateString();\n    }\n    let endTime = \"\"; \n    let endDate = \"N/A\";\n    if (job.stop_time) {\n        var dEnd = new Date(job.stop_time);\n        endTime = dEnd.toLocaleTimeString();\n        endDate = dEnd.toLocaleDateString()\n    }\n\n    // Build the array of action buttons\n    let buttons = [<Button \n        key=\"job_row_button_0\"\n        icon='trash'\n        basic\n        circular\n        color='red'\n        onClick={() => setShowConfirm(!showConfirm)}\n    />];\n    if (props.job.finished && props.job.file) {\n        buttons.push( \n            <Button \n                key={`job_row_button_${buttons.length+1}`}\n                icon='save'\n                basic\n                circular\n                color='grey'\n                onClick={()=>{props.handleDownloadJob(props.job.id)}}\n            />);\n    }\n    if (!props.job.queued && !props.job.started && !props.job.error && !props.job.finished) {\n        buttons.push(\n            <Button \n                key={`job_row_button_${buttons.length+1}`}\n                icon='play circle outline'\n                basic\n                circular\n                color='green'\n                onClick={()=> {\n                    let updatedObject = { id: props.job.id, queued: true };\n                    props.handleUpdateJob(updatedObject);\n                }}\n            />\n        );\n    } \n\n    return (\n    <Table.Row\n        style={props.selected ? {backgroundColor: '#e2ffdb', overflowWrap:\"break-word\"} : {overflowWrap:\"break-word\"}}\n    >\n        <Confirm\n          open={showConfirm}\n          content=\"You have chosen to delete a job (which will delete all of its result and logs).\n            ARE YOU SURE? This cannot be undone.\"\n          confirmButton=\"DELETE\"\n          onCancel={() => setShowConfirm(!showConfirm)}\n          onConfirm={() => confirmDelete()}\n        />\n        <Table.Cell \n            onClick={() => props.handleSelectJobRow()}\n            style={{\n                cursor:\"pointer\",\n                color:\"blue\",\n                textDecoration:\"underline\"\n            }}>\n                {props.job.name}\n        </Table.Cell>\n        {props.pipeline ? <Table.Cell \n            style={{\n                cursor:\"pointer\",\n                color:\"blue\",\n                textDecoration:\"underline\"\n            }}\n            onClick={() => props.handleSelectPipeline(props.pipeline.id)}\n            textAlign='center'>\n            {props.pipeline.name}\n        </Table.Cell> : <Table.Cell \n            textAlign='center'>\n            NOT ASSIGNED\n        </Table.Cell>}\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{startDate} {startTime}</Statistic.Value>\n            </Statistic>  \n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{endDate} {endTime}</Statistic.Value>\n            </Statistic>  \n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{props.job.num_docs}</Statistic.Value>\n            </Statistic>\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            {props.job.finished ? <Label color='green' key='grey' size='tiny'>Finished</Label> : <div/>}\n            {props.job.error ? <Label color='red' key='red' size='tiny'>ERROR</Label> : <div/>}  \n            {props.job.started && !props.job.finished ? <Label color='blue' key='grey' size='tiny'>Running...</Label> : <div/>}\n            {props.job.queued & !props.job.started? <Label color='green' size='tiny'>Queued</Label> : <div/>}  \n            {!props.job.queued & !props.job.started? <div><Label color='grey' size='tiny'>NOT Started</Label></div> : <div/>}\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <div>\n                { buttons }\n            </div>\n        </Table.Cell>\n    </Table.Row>);\n}\n\nexport default JobRow;","import React from 'react';\nimport { \n    Table,\n    Segment,\n    Dimmer,\n    Loader\n} from 'semantic-ui-react';\n\nexport const JobTable = (props) => {\n    return (\n        <Segment raised style={{\n            padding:'0px',\n            height:'60vh',\n            overflow:'scroll'\n        }}>\n            { props.loading ? <Dimmer active inverted>\n                <Loader inverted>Loading scripts...</Loader>\n            </Dimmer> : <></> }\n            <Table selectable structured size='small'>\n                <Table.Header>\n                    <Table.Row textAlign='center'>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Type</Table.HeaderCell>\n                        <Table.HeaderCell>Start Time</Table.HeaderCell>\n                        <Table.HeaderCell>End Time</Table.HeaderCell>\n                        <Table.HeaderCell>Num Docs</Table.HeaderCell>\n                        <Table.HeaderCell>State</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {props.children}\n                </Table.Body>\n            </Table>\n        </Segment>);\n}","import React from 'react';\nimport { \n    Segment,\n    Message,\n } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { NodeResultStats, NodePanelHeader } from '../../../Shared/DetailsWidgets';\nimport { NodeInputTab, NodeOutputTab } from '../../../Shared/SidebarTabs';\nimport LogModal from '../../../Shared/LogModal';\nimport { SidebarLoadingPlaceholder } from '../../../Shared/Placeholders';\n\nexport class NodeResultPanel extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state={\n            showLogModal: false\n        };\n    }\n\n    setShowLogModal = (showLogModal) => {\n        this.setState({\n            showLogModal\n        });\n    }\n\n    componentDidMount() {\n         // If a node is selected and there's already a summary result, try to fetch detailed results on mount.\n        if (this.props.selectedNodeResult && !this.props.selectedNodeResult.hasOwnProperty('node_output_data')) {\n            try {\n                this.props.handleFetchResultData(this.props.selectedNodeResult.id);\n            }\n            catch {}\n        } \n    }\n\n    loadAndShowLog = (jobId, stepId) => {\n        this.props.handleFetchJobStepLog(jobId, stepId);\n        this.setShowLogModal(true);\n    }\n\n    render() {\n        const { \n            selectedNode,\n            sidebarTab,\n            selectedNodeResult,\n            toggleDeleteConfirm,\n            handleDownloadResult,\n            handleScriptSelect,\n            scripts, \n            pipelinesteps, \n            loading,\n            jobs \n        } = this.props;\n\n        //If loading, then nothing to display yet and just indicate loading underway\n        if (loading) {\n            return (\n                <SidebarLoadingPlaceholder LoadingText=\"Loading Data...\"/>\n            );\n        }\n        //If we don't have any node details yet store is no longer trying to load... assume there is no results obj for node...\n        else if (selectedNode && !selectedNodeResult) {\n            return (\n                <Segment>\n                    <Message\n                        error\n                        header='This node has no results...'\n                        list={[\n                            'DON\\'T PANIC! This node may not have started yet...',\n                            'FIRST... If the job hasn\\'t completed...try checking again later.',\n                            'SECOND... If your job is data or memory intensive... try breaking it into smaller pieces.',\n                            'If you\\'re still having trouble or the job has completed without returning a node result, please reach out on our Github.',\n                        ]}\n                    />               \n                </Segment>\n            );\n        }\n        else {\n            let output_data = {};\n            try {\n                output_data = selectedNodeResult.node_output_data;\n            } catch {}\n\n            let raw_input_data = {};\n            try {\n                raw_input_data = selectedNodeResult.start_state;\n            } catch {}\n\n            // TODO - switch backend from JSON strings to JSON objs.\n            let transformed_input_data = {};\n            try {\n                transformed_input_data = JSON.parse(selectedNodeResult.transformed_input_data);\n            } catch {}\n\n            const log = jobs.selectedJob ? \n                        jobs.jobStepLogs[parseInt(selectedNode.id)] || \"No logs...\" :\n                        \"No job selected...\";\n            \n\n            let tabs = [];\n            if (selectedNode)\n            {\n                let script = _.find(scripts.items,{id: selectedNodeResult.script_id});\n                let pipelinestep = _.find(pipelinesteps.items, {id:parseInt(selectedNode)});\n                let transform_script = pipelinestep ? \n                                        pipelinestep.input_transform ?\n                                        pipelinestep.input_transform :\n                                        \"No transformation in pipeline\" :\n                                        \"Error loading pipeline details...!\"\n\n                let startTime = \"N/A\";\n                let startDate = \"N/A\";\n                if (selectedNodeResult.start_time) {\n                    var dStart = new Date(selectedNodeResult.start_time);\n                    startTime = dStart.toLocaleTimeString();\n                    startDate = dStart.toLocaleDateString();\n                }\n                let endTime = \"N/A\"; \n                let endDate = \"N/A\";\n                if (selectedNodeResult.stop_time) {\n                    var dEnd = new Date(selectedNodeResult.stop_time);\n                    endTime = dEnd.toLocaleTimeString();\n                    endDate = dEnd.toLocaleDateString()\n                }\n\n                let imageUrl = '';\n                if (script && script.type){\n                    switch (script.type) {\n                        case 'RUN_ON_JOB_DOCS_PARALLEL':\n                            imageUrl = './parallel_job.png';\n                            break;\n                        case 'RUN_ON_JOB':\n                            imageUrl = './serial_job.png';\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                \n                tabs = [(<>\n                            <LogModal\n                                handleModalToggle={() => this.setShowLogModal(!this.state.showLogModal)}\n                                visible={this.state.showLogModal}\n                                log={log}\n                                loading={jobs.logs_loading}\n                            />\n                            <NodePanelHeader\n                                selectedNode = {selectedNode}\n                                script = {script}\n                            />\n                            <NodeResultStats\n                                selectedNode = {selectedNode}\n                                imageUrl = {imageUrl}\n                                script = {script}\n                                startTime = {startTime}\n                                startDate = {startDate}\n                                endTime = {endTime}\n                                endDate = {endDate}\n                                result = {selectedNodeResult}\n                                toggleDeleteConfirm = {toggleDeleteConfirm}\n                                handleDownloadResult = {handleDownloadResult}\n                                loadAndShowLog = {this.loadAndShowLog}\n                                handleScriptSelect = {handleScriptSelect}\n                                style={{marginTop:'1vh'}}\n                            />\n                        </>),\n                        (<>\n                            <NodePanelHeader\n                                selectedNode = {selectedNode}\n                                script = {script}\n                            />\n                            <NodeInputTab\n                                raw_input_data={raw_input_data}\n                                input_data_label=\"Data Received from Preceding Node:\" \n                                transform_script={transform_script}\n                                transformed_input_data={transformed_input_data} \n                                transformed_input_data_label=\"Data Fed to Script (Post Transform):\"\n                                style={{marginBottom:'1vh'}}\n                            />\n                        </>),\n                        (<>\n                            <NodePanelHeader\n                                selectedNode = {selectedNode}\n                                script = {script}\n                            />\n                            <NodeOutputTab output_data={output_data}/>\n                        </>)\n                ];\n            }\n            \n            return (\n                <Segment raised style={{height:'100%', width:'100%', overflowY:'scroll'}}>\n                    {tabs[sidebarTab]}\n                </Segment>\n            );\n        }  \n    }\n}","import React from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport LogModal from '../../../Shared/LogModal';\nimport { JobResultStats, JobPanelHeader } from '../../../Shared/DetailsWidgets';\nimport { NodeOutputTab } from '../../../Shared/SidebarTabs';\nimport { \n    JobDocumentReadOnlyTab,\n    JobInputReadOnlyTab\n} from '../../../Shared/SidebarTabs';\nimport { SidebarLoadingPlaceholder } from '../../../Shared/Placeholders';\n\n// Made this a class component to take advantage of lifecycle methods, though now I don't need them (and realize I could have used hooks, ugh).\n// TODO - rever\nexport class JobResultPanel extends React.PureComponent {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            showLogModal: false\n        };\n    }\n\n    setShowLogModal = (showLogModal) => {\n        this.setState({\n            showLogModal\n        });\n    }\n\n    loadAndShowLog = () => {\n        this.props.handleFetchJobLog();\n        this.setShowLogModal(true);\n    }\n\n    // If the job is finished and the results object doesn't already include the output data, fetch it.\n    componentDidMount() {\n        if (this.props.jobResult && this.props.selectedJob.finished && !this.props.jobResult.hasOwnProperty('output_data')) {\n            this.props.handleFetchResultData(this.props.jobResult.id);\n        }\n    }\n\n    render() {\n\n        const { \n            handleDocumentPageChange,\n            selectedJob,\n            sidebarTab,\n            documents,\n            handleDownloadDocument,\n            jobs,\n            jobResult } = this.props;\n    \n        let tabs = [];\n        if (!selectedJob) {\n            return (\n                <SidebarLoadingPlaceholder LoadingText=\"Loading Data...\"/>\n            );\n        }\n        else\n        {\n    \n            let input_data = {data:\"No inputs provided...\"};\n            try {\n                input_data = JSON.parse(selectedJob.job_inputs);\n            } catch {}\n    \n            let output_data = {data:'No output data...'};\n            try {\n                output_data = JSON.parse(jobResult.output_data);\n            } catch {}\n    \n            const log = selectedJob ? jobs.selectedJobLog || \"No logs.\" : \"No job selected...\";\n    \n            let startTime = \"N/A\";\n            let startDate = \"N/A\";\n            if (selectedJob.start_time) {\n                var dStart = new Date(selectedJob.start_time);\n                startTime = dStart.toLocaleTimeString();\n                startDate = dStart.toLocaleDateString();\n            }\n            let endTime = \"N/A\"; \n            let endDate = \"N/A\";\n            if (selectedJob.stop_time) {\n                var dEnd = new Date(selectedJob.stop_time);\n                endTime = dEnd.toLocaleTimeString();\n                endDate = dEnd.toLocaleDateString()\n            }\n            \n            tabs = [(\n                        <>\n                            <LogModal\n                                handleModalToggle={() => this.setShowLogModal(!this.state.showLogModal)}\n                                visible={this.state.showLogModal}\n                                log={log}\n                                loading={this.props.jobs.logs_loading}\n                            />\n                            <JobPanelHeader\n                                selectedJob = {selectedJob}\n                            />\n                            <JobResultStats\n                                notification_email={selectedJob.notification_email}\n                                selectedJob = {selectedJob}\n                                startTime = {startTime}\n                                startDate = {startDate}\n                                endTime = {endTime}\n                                endDate = {endDate}\n                                loadAndShowLog = {this.loadAndShowLog}\n                                toggleDeleteConfirm = {this.props.toggleDeleteConfirm}\n                                handleDownloadJob = {this.props.handleDownloadJob}\n                                style={{marginTop:'1vh'}}\n                            />\n                        </>\n                    ),\n                    (\n                        <>\n                            <JobPanelHeader\n                                selectedJob = {selectedJob}\n                            />\n                            <JobDocumentReadOnlyTab\n                                documents={documents.items}\n                                selectedPage={documents.selectedPage}\n                                pageCount={documents.pages}\n                                handleDownloadDocument={handleDownloadDocument}\n                                handleChangePage={handleDocumentPageChange}\n                            />\n                        </>\n                    ),\n                    ( \n                        <>\n                            <JobPanelHeader\n                                selectedJob = {selectedJob}\n                            />\n                            <JobInputReadOnlyTab input_data={input_data}/>\n                        </>\n                    ),\n            ];\n    \n            if (selectedJob.finished) tabs.push((\n            <>\n                 <JobPanelHeader\n                    selectedJob = {selectedJob}\n                />\n                <NodeOutputTab output_data={output_data}/>\n            </>));\n    \n        }\n        \n        return (\n            <Segment raised style={{height:'100%', width:'100%'}}>\n                {tabs[sidebarTab]}\n            </Segment>\n        );\n    }\n\n}\n","import React from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { JobStatusCol } from '../../../Shared/Controls';\nimport { DocumentInputPane, DataInputPane } from '../../../Shared/DetailsWidgets';\n\nexport const JobLaunchPanel = (props) => {\n\n    const { \n        selectedJob,\n        jobLogsLoading,\n        pipelines,\n        documents,\n        sidebarTab,\n        handleDocumentDelete,\n        handleUploadDocument,\n        handleUpdateJob,\n        toggleDeleteConfirm,\n        handleDocumentPageChange\n    } = props;\n\n    const pipeline = pipelines.selectedPipeline;\n\n    let tabs = [];\n\n    let input_data = {data:\"No inputs provided...\"};\n    try {\n        input_data = JSON.parse(selectedJob.job_inputs);\n    } catch {}\n    \n    tabs = [\n        <JobStatusCol\n            job={selectedJob}\n            pipeline={pipeline}\n            jobLogsLoading={jobLogsLoading}\n            handleUpdateJob={handleUpdateJob}\n        />,\n        <DocumentInputPane\n            job={selectedJob}\n            documents={documents}\n            handleDocumentDelete={handleDocumentDelete}\n            handleUploadDocument={handleUploadDocument}\n            handleDocumentPageChange={handleDocumentPageChange}\n        />,\n        <DataInputPane\n            job={selectedJob}\n            jobSettings={input_data}\n            handleUpdateJob={handleUpdateJob}\n        />\n    ];\n    \n    return (\n        <Segment\n            style={{\n                overflowY:'auto',\n                height:'100%'\n            }}\n        >\n            {tabs[sidebarTab]}\n            <Button\n                key=\"delete_button\"\n                size='small'\n                labelPosition='left'\n                icon='trash'\n                color='red'\n                content='Delete Job'\n                onClick={() => toggleDeleteConfirm()}\n                style={{\n                    marginTop:'10px'\n                }}\n            />\n        </Segment>\n    );\n}\n","import * as React from 'react';\nimport { \n    Confirm\n } from 'semantic-ui-react';\n import _ from 'lodash';\nimport { NodeResultPanel } from './NodeResultPanel';\nimport { JobResultPanel } from './JobResultPanel';\nimport { JobLaunchPanel } from './JobLaunchPanel';\n\nexport class ResultPanel extends React.PureComponent {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            showDeleteConfirm: false,\n        };\n    }\n\n    toggleDeleteConfirm = () => {\n        this.setState({\n            showDeleteConfirm: !this.state.showDeleteConfirm\n        });\n    }\n\n    render() {\n\n        const { \n            selectedNode,\n            jobs,\n            selectedJob,\n            results,\n            pipelines,\n            documents,\n            scripts,\n            pipelinesteps,\n            sidebarTab,\n            jobResult,\n            handleDocumentDelete,\n            handleUploadDocument,\n            handleUpdateJob,\n            handleDocumentPageChange\n        } = this.props;\n        const { loading } = results;\n        \n        if (!selectedJob || !selectedJob.started) {\n            return (\n                <JobLaunchPanel\n                    selectedJob={selectedJob} \n                    jobLogsLoading={jobs.logs_loading}\n                    pipelines={pipelines} \n                    documents={documents}\n                    sidebarTab={sidebarTab}\n                    handleDocumentDelete={handleDocumentDelete}\n                    handleUploadDocument={handleUploadDocument}\n                    handleUpdateJob={handleUpdateJob}\n                    toggleDeleteConfirm={this.toggleDeleteConfirm}\n                    handleDocumentPageChange={handleDocumentPageChange}\n                />\n            );\n        }\n\n        if (!selectedNode) {\n            return (\n                <>\n                    <Confirm\n                        header=\"Delete this job and its results??\"\n                        content=\"Are you sure you want to delete this job? All data will be deleted, including documents, job settings and results.\"\n                        open={this.state.showDeleteConfirm}\n                        onCancel={() => this.toggleDeleteConfirm()}\n                        onConfirm={() => this.props.handleDeleteJob(this.props.selectedJobId)}\n                    /> \n                    <JobResultPanel \n                        selectedJob={selectedJob}\n                        jobs={jobs}\n                        documents={documents}\n                        sidebarTab={sidebarTab}\n                        jobResult={jobResult}\n                        handleDocumentPageChange={handleDocumentPageChange}\n                        handleFetchJobLog={this.props.handleFetchJobLog}\n                        toggleDeleteConfirm={this.toggleDeleteConfirm} \n                        handleDownloadJob={this.props.handleDownloadJob}\n                        handleFetchResultData={this.props.handleFetchResultData}\n                        handleDownloadDocument={this.props.handleDownloadDocument}\n                    />  \n                </>\n            );\n        }\n        \n        let selectedNodeResult = null;\n        try{\n            selectedNodeResult = _.find(this.props.results.items, {\n                pipeline_node: pipelinesteps.selectedPipelineStepId,\n                type: \"STEP\"\n            });\n        } catch {}\n\n        return (\n            <>\n                <Confirm\n                    header=\"Delete this job and its results??\"\n                    content=\"Are you sure you want to delete this job? All data will be deleted, including documents, job settings and results.\"\n                    open={this.state.showDeleteConfirm}\n                    onCancel={() => this.toggleDeleteConfirm()}\n                    onConfirm={() => this.props.handleDeleteJob(this.props.selectedJobId)}\n                />              \n                <NodeResultPanel \n                    jobs={jobs}\n                    pipelinesteps={pipelinesteps}\n                    scripts={scripts}\n                    loading={loading}\n                    selectedNode={selectedNode}\n                    sidebarTab={sidebarTab}\n                    selectedNodeResult={selectedNodeResult}\n                    handleFetchResultData={this.props.handleFetchResultData}\n                    handleScriptSelect={this.props.handleScriptSelect}\n                    toggleDeleteConfirm={this.toggleDeleteConfirm}\n                    handleDownloadResult={this.props.handleDownloadResult}\n                    handleFetchJobStepLog={this.props.handleFetchJobStepLog}\n                />\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { Card, Image, Loader, Dimmer } from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { StepStatusLabel } from '../../../Shared/StatusLabels';\n\nconst ResultNode = (props) => {\n\n    const { node, scripts, results } = props;\n\n    let myScript = null;\n    try {\n        myScript = _.find(scripts.items, {id: node.script.id});\n    } catch {}\n\n    let myResult = null;\n    try {\n        myResult = _.find(results.items, {pipeline_node: parseInt(node.id)})\n    } catch {}\n\n    let nodeStyle = {};\n    let loaderObj = <></>;\n    \n    if (myResult) {\n        if (myResult.started) {\n            if (!myResult.finished && !myResult.error) {\n                loaderObj = <Dimmer active inverted><Loader size='medium'>Running...</Loader></Dimmer>;\n            }\n        }\n    }\n\n    if (node.type === 'THROUGH_SCRIPT') {\n        return (\n            <div>\n                <Card style={nodeStyle}>\n                    <Card.Content>\n                        { loaderObj }\n                        <Image\n                            floated='right'\n                            size='mini'\n                            src={\n                                node.script.type === 'RUN_ON_JOB'\n                                    ? 'serial_job.png'\n                                    : 'parallel_job.png'\n                            }\n                        />\n                        <Card.Header>{node.name} (<b>ID {node.id}</b>)</Card.Header>\n                        <Card.Meta>Script: {myScript ? myScript.human_name : \"Can't Find Script.\"}</Card.Meta>\n                        <Card.Description>\n                            {myScript ? myScript.description : \"Can't Find Script.\" }\n                            <i>\n                                {/* {myScript.type === 'RUN_ON_JOB'\n                                    ? 'This script will run single-threaded over all documents in a job, sequentially.' : \"\"}\n                                {myScript.type === 'RUN_ON_JOB_DOCS'\n                                    ? 'This script will run multithreaded over all document in a job, in parallel.' : \"\"} */}\n                            </i>\n                            )\n                            <br/>\n                            <br/>\n                            <StepStatusLabel step={myResult}/>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </div>\n        );\n    } else {\n\n        // Currently we only support custom through scripts. Anything else is assumed to be the default (hard-coded)\n        // root node. Job status should dictate the \n\n        return (\n            <div>\n                <Card style={nodeStyle}>\n                    <Card.Content>\n                        { loaderObj }\n                        <Image\n                            floated='right'\n                            size='mini'\n                            src='start_icon_128.png'\n                        />\n                        <Card.Header>START SCRIPT: Extracter</Card.Header>\n                        <Card.Meta>Script: {node.script.id === -1 ? \"Built-In\" : node.script.human_name}</Card.Meta>\n                        <Card.Description>\n                            Currently, the root node of every Gremlin job checks for any provided documents and extracts\n                            any text found therein (OCRed PDFs, .docx, .doc, etc.). In the future, you'll be able to override\n                            this default root step and write your own (or dispense with it entirely) in a new, advanced mode.\n                            <br/>\n                            <br/>\n                            <StepStatusLabel step={myResult}/>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            </div>\n\n        );\n    }\n};\n\nfunction mapStateToProps(state) {\n    \n    const {\n        results, \n        scripts\n    } = state;\n  \n    return {\n        results,\n        scripts\n    };\n  }\n\nexport default connect(mapStateToProps)(ResultNode);","import React from 'react'\nimport { Menu, Icon } from 'semantic-ui-react'\n\nexport const TrayControls = (props) => {\n    const { \n        selectedTab,\n        selectTab,\n        selectedJob,\n        selectedNode,\n        jobResult,\n        handleFetchResultData\n    } = props;\n\n    if (!selectedJob || !selectedJob.started) return <StartTrayControls selectedTab={selectedTab} selectTab={selectTab}/>;\n\n    if (!selectedNode) return <JobTrayControls selectedTab={selectedTab} selectTab={selectTab} finished={selectedJob.finished} jobResult={jobResult} handleFetchResultData={handleFetchResultData}/>\n\n    return <NodeResultControls selectedTab={selectedTab} selectTab={selectTab}/>;\n\n\n}\n\nexport const NodeResultControls = (props) => {\n    \n    const { selectedTab, selectTab} = props;\n\n    return (\n        <Menu icon='labeled' vertical>\n            <Menu.Item\n                name='node'\n                active={selectedTab===0}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(0);\n                }}\n            >\n                <Icon name='code branch' />\n                Node\n            </Menu.Item>\n            <Menu.Item\n                name='inputs'\n                active={selectedTab===1}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(1);\n                }}\n            >\n                <Icon name='cloud upload' />\n                Input\n            </Menu.Item>\n            <Menu.Item\n                name='outputs'\n                active={selectedTab===2}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(2);\n                }}\n            >\n                <Icon name='cloud download' />\n                Output\n            </Menu.Item> \n        </Menu>);\n}\n\nexport const StartTrayControls = (props) => {\n\n    const { selectedTab, selectTab} = props;\n\n    return (\n        <Menu icon='labeled' vertical>\n            <Menu.Item\n                name='launch'\n                active={selectedTab===0}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(0);\n                }}\n            >\n                <Icon name='circle play' icon='green' />\n                Run\n            </Menu.Item>\n            <Menu.Item\n                name='documents'\n                active={selectedTab===1}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(1);\n                }}\n            >\n                <Icon name='file text outline'/>\n                Documents\n            </Menu.Item>\n            <Menu.Item\n                name='data'\n                active={selectedTab===2}\n                onClick={(e)=> {\n                    e.stopPropagation();\n                    selectTab(2);\n                }}\n            >\n                <Icon name='cloud upload' />\n                Input Data\n            </Menu.Item> \n        </Menu>);\n}\n\nexport const JobTrayControls = (props) => {\n    \n    const { \n        selectedTab,\n        selectTab,\n        finished,\n        jobResult,\n        handleFetchResultData\n    } = props;\n\n    let buttons = [\n        (<Menu.Item\n            name='job'\n            active={selectedTab===0}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(0);\n            }}\n        >\n            <Icon name='briefcase' />\n            Job\n        </Menu.Item>),\n        (<Menu.Item\n            name='documents'\n            active={selectedTab===1}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(1);\n            }}\n        >\n            <Icon name='file text outline'/>\n            Documents\n        </Menu.Item>),\n        (<Menu.Item\n            name='data'\n            active={selectedTab===2}\n            onClick={(e)=> {\n                e.stopPropagation();\n                selectTab(2);\n            }}\n        >\n            <Icon name='cloud upload' />\n            Input Data\n        </Menu.Item>) ];\n\n    if (finished) buttons.push((<Menu.Item\n        name='data'\n        active={selectedTab===2}\n        onClick={(e)=> {\n            if (jobResult && !jobResult.hasOwnProperty('output_data')) {\n                handleFetchResultData(jobResult.id);\n            }\n            e.stopPropagation();\n            selectTab(3);\n        }}\n    >\n        <Icon name='cloud download' />\n        Output Data\n    </Menu.Item>));\n\n    return (\n        <Menu icon='labeled' vertical>\n            {buttons}\n        </Menu>);\n}\n","import React from 'react'\nimport { Menu, Icon } from 'semantic-ui-react'\n\nexport const PrimaryJobControls = (props) => {\n    \n    const { job, startJob, deleteJob, downloadJob} = props;\n\n    let buttons = [];\n\n    if (!job.started) buttons.push(\n        <Menu.Item\n            name='startJob'\n            onClick={(e)=> {\n                e.stopPropagation();\n                let startedJob = { id: job.id, queued: true};\n                startJob(startedJob);\n            }}\n        >\n            <Icon name='play' color='green'/>\n            Start\n        </Menu.Item>);\n\n    buttons.push(\n        <Menu.Item\n            name='deleteJob'\n            onClick={(e)=> {\n                e.stopPropagation();\n                deleteJob(job.id);\n            }}\n        >\n            <Icon name='trash' color='red'/>\n            Delete\n        </Menu.Item>);\n\n    if (job.file) buttons.push(\n        <Menu.Item\n            name='downloadJob'\n            onClick={(e)=> {\n                e.stopPropagation();\n                downloadJob(job.id);\n            }}\n        >\n            <Icon name='download'/>\n            Download\n        </Menu.Item> \n    );\n\n    return (\n        <Menu icon='labeled'>\n            {buttons}\n        </Menu>);\n}\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport _ from 'lodash';\nimport { Breadcrumb, \n    Pagination,\n    Segment,\n    Table,  \n} from 'semantic-ui-react';\n\nimport {\n    fetchDocuments,\n    clearResults,\n    downloadSelectedResult,\n    fetchPipelineScripts,\n    fetchSummaryResultsForJob,\n  } from '../../Redux/actions';\n\nimport {\n    loadFullPipeline,\n    selectPipeline,\n} from '../../Redux/pipeline_actions';\n\nimport {\n    selectJob,\n    fetchJobs,\n    unselectJob,\n    clearJobLogs,\n    requestJobStepLogs,\n    refreshSelectedJob,\n} from '../../Redux/job_actions';\n\nimport {\n    changeTab\n} from '../../Redux/app_actions';\n\nimport { HeaderContainer } from '../Layouts/Layouts';\nimport JobRow from './components/Controls/JobRow';\nimport { JobTable } from './components/Controls/JobTable';\nimport { ResultPanel } from './components/SidebarPanels/ResultPanel';\nimport ResultNode from './components/Nodes/ResultNode';\nimport { VerticallyCenteredDiv } from '../Shared/Wrappers';\nimport { CreateAndSearchBar, JobDigraphButtonPanel } from '../Shared/Controls';\nimport { Digraph } from '../Digraph/Digraph';\nimport { TrayControls } from './components/Controls/TrayControls';\nimport { PrimaryJobControls } from './components/Controls/PrimaryJobControls';\nimport ConfirmModal from '../Shared/ConfirmModal';\nimport { JobHeaderWidget } from './components/Header/JobHeaderWidget';\n\n\nclass JobDigraphTab extends React.PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showLog:false,\n            timer: null,\n            showSidebar:true,\n            showDeleteConfirm:false,\n            sidebarTab:0\n        };\n    }\n\n    componentDidMount() {\n\n        // Set the digraph to readonly\n        this.props.digraphEngine.setLocked(true);\n\n        // Refresh the pipelines\n        this.props.fetchPipelines();\n\n        // Refresh script summaries\n        this.props.handleFetchScripts();\n\n        // Setup the timer\n        let timer = setInterval(this.tick, 5000);\n        this.setState({timer});\n\n        //Refetch jobs\n        this.handleFetchJobs();\n\n        // If we already have a job selected, make sure pipeline digraph is loaded\n        if (this.props.jobs.selectedJobId) {\n            console.log(\"TODO - Refresh job digraph\"); \n        }\n\n    }\n\n    toggleDeleteConfirm = () => {\n        this.setState({\n            showDeleteConfirm: !this.state.showDeleteConfirm\n        });\n    }\n\n    toggleSidebar = () => {\n        this.setState({\n            showSidebar: !this.state.showSidebar\n        });\n    }\n\n    closeSidebar = () => {\n        if (this.state.showSidebar) this.setState({showSidebar: false});\n    }\n\n    openSidebar = () => {\n        if (!this.state.showSidebar) this.setState({showSidebar: true});\n    }\n\n    setSidebarTab = (tabNum) => {\n        if (this.state.sidebarTab === tabNum) {\n            this.toggleSidebar();\n        } else {\n            this.setState({\n                sidebarTab: tabNum\n            }, this.openSidebar());\n        }\n    }\n\n    onConfirmDelete = (id) => {\n        this.props.handleDeleteJob(id);\n        this.toggleDeleteConfirm();\n    }\n\n    componentWillUnmount() {\n\n        // Clean up the timer. \n        clearInterval(this.state.timer);\n\n        // Set the digraph to back to editable (this is the engine itself, not the view lawyer)\n        // don't want the read only setting to persist \n        this.props.digraphEngine.setLocked(false);\n    }\n\n    tick = () => {\n        let myJob = _.find(this.props.jobs.items, {id: this.props.jobs.selectedJobId});\n        console.log(\"Job Result Digraph Tick\");\n        if(myJob)\n        {\n            // If job is running, get the results on each tick\n            if (myJob.queued || (myJob.started && !myJob.finished && !myJob.error)) {\n                console.log(\"Job selected started and has not finished or errored out\");\n                this.refreshResultDigraphData();\n            }\n            //If job hasn't started, get documents on each tick.\n            if (!myJob.started) {\n                this.props.dispatch(fetchDocuments());\n            }\n        }\n    }\n\n    //Todo... clear and then loading is causing flickering... update objs\n    refreshResultDigraphData = () => {\n        this.props.dispatch(fetchSummaryResultsForJob(this.props.jobs.selectedJobId));\n        this.props.dispatch(refreshSelectedJob());\n    }\n\n    handleSelectJob = (job) => {\n        console.log(\"Job selected\", job);\n        this.props.dispatch(selectJob(job.id)).then(() => {\n          Promise.all([\n            this.props.dispatch(clearJobLogs()),\n            this.props.dispatch(clearResults()),\n            this.props.dispatch(selectPipeline(job.pipeline.id)),\n          ])\n          .then(() => {\n              Promise.all([\n                this.props.dispatch(fetchPipelineScripts()), //Shouldn't this be summary scripts? If it already is, rename\n                this.props.dispatch(fetchSummaryResultsForJob(job.id)),\n                this.props.dispatch(loadFullPipeline(job.pipeline.id))\n              ]).then(()=>{\n                this.props.digraphEngine.renderPipeline();\n              });\n          });\n        });\n      }\n\n    handleFetchJobs = () => {\n        this.props.dispatch(fetchJobs());\n    }\n\n    handleUnselectJob = () => {\n        this.props.dispatch(unselectJob());\n        this.props.dispatch(fetchJobs());\n    }\n\n    handleDownloadResult = (resultId) => {\n        this.props.dispatch(downloadSelectedResult(resultId));\n    }\n\n    loadAndShowNodeLog = (jobId, stepId) => {\n        this.props.dispatch(requestJobStepLogs(jobId, stepId)).then(()=>{\n            this.toggleLogModal();\n        });\n    }\n\n    ZoomCanvas = (scaleLevel) => {\n        \n        let zoomedDigraph = {...this.state.digraph};\n        zoomedDigraph.scale = scaleLevel;\n\n        this.setState(zoomedDigraph);\n    }\n\n    handleTabChange = (tabIndex) => {\n        this.props.dispatch(changeTab(tabIndex));\n    }\n\n    handleSelectPipeline = (pipelineId) => {\n        console.log(\"HandleSelectPipelineRow\");\n        console.log(\"Pipeline selected\");\n        this.props.dispatch(selectPipeline(pipelineId)).then(() => {\n          this.props.dispatch(loadFullPipeline(pipelineId)).then(() => {\n            this.handleTabChange(2);\n          });\n        });\n      }\n\n    render() {\n\n        let crumbs = [\n            <Breadcrumb.Section\n                key={0}\n                link\n                onClick={() => this.handleUnselectJob()}\n            >\n                Jobs\n            </Breadcrumb.Section>,\n        ];\n\n      const jobs = this.props.jobs.items ? this.props.jobs.items : [];\n      const pipelinesteps = this.props.pipelinesteps.items ? this.props.pipelinesteps.items : [];\n      let selectedJob = _.find(jobs, {id: this.props.jobs.selectedJobId});\n      let selectedNode = _.find(pipelinesteps, {id: this.props.pipelinesteps.selectedPipelineStepId});\n      let jobResult = null;\n      try {\n          jobResult = _.find(this.props.results.items, {type: 'JOB'});\n      } catch {}\n\n      let rows = [];\n      if (jobs.length > 0) {\n          for (let count = 0; count < jobs.length; count++) {\n              rows.push(<JobRow \n                  key={jobs[count].id}\n                  job={jobs[count]}\n                  selected={jobs[count].id===this.props.jobs.selectedJobId}\n                  pipeline={jobs[count].pipeline}\n                  handleDeleteJob={this.props.handleDeleteJob}\n                  handleDownloadJob={this.props.handleDownloadJob}\n                  handleSelectJobRow={() => this.handleSelectJob(jobs[count])}\n                  handleUpdateJob={this.props.handleUpdateJob}\n                  handleTabChange={this.handleTabChange}\n                  handleSelectPipeline={this.handleSelectPipeline}\n                  handlePipelineModalToggle={this.props.handlePipelineModalToggle}\n                  />);\n          }\n      }\n      else {\n          rows.push(<Table.Row  key={0}>\n              <Table.Cell textAlign='center' colSpan='8'>No jobs match your selection</Table.Cell>\n          </Table.Row>);\n      }\n      let table = <JobTable jobs={this.props.jobs} handleSelectJobPage={this.props.handleSelectJobPage}>\n          {rows}\n      </JobTable>;\n\n        if (this.props.jobs.selectedJob) {\n            crumbs.push(<Breadcrumb.Divider key={1}/>);\n            crumbs.push(\n                <Breadcrumb.Section active key={2}>\n                    {this.props.jobs.selectedJob.name}\n                </Breadcrumb.Section>\n            );\n        }\n\n        let breadcrumbs = \n            <Segment raised style={{width:'100%'}}>\n                <Breadcrumb>\n                    {crumbs}\n                </Breadcrumb>\n            </Segment>;\n\n        return (\n            <VerticallyCenteredDiv>\n                <ConfirmModal\n                    visible={this.state.showDeleteConfirm} \n                    message=\"You have chosen to delete this job. ARE YOU SURE? This cannot be undone. You will lose uploaded documents and any processed results.\"\n                    yesAction={() => this.onConfirmDelete(this.props.jobs.selectedJobId)}\n                    noAction={this.toggleDeleteConfirm}\n                    toggleModal={this.toggleDeleteConfirm}\n                />\n                { this.props.jobs.selectedJobId === -1 ? <div>\n                    <CreateAndSearchBar\n                        onChange={this.props.handleSetJobSearchString}\n                        onCreate={this.props.handleNewJobModalToggle}\n                        onSubmit={this.props.fetchJobs}\n                        placeholder='Search Jobs by Name...'\n                        value={this.props.jobs.searchString} \n                    />\n                </div> : <></> }\n                <div>\n                    { this.props.jobs.selectedJobId === -1 ? \n                        <HeaderContainer \n                            header={breadcrumbs}\n                            loading={this.props.jobs.loading}\n                            loadingText=\"Fetching Job Details...\"\n                            body={table}\n                        /> : \n                        <Digraph\n                            key={this.props.jobs.selectedJob ? this.props.jobs.selectedJob.id : -1}\n                            digraphEngine={this.props.digraphEngine}                                \n                            toggleSidebar={this.toggleSidebar}\n                            showSidebar={this.state.showSidebar}\n                            exitDigraph={this.handleUnselectJob}\n                            showSidebarToggle={false}\n                            detailPanel={\n                                <ResultPanel\n                                    results={this.props.results}\n                                    jobs={this.props.jobs}\n                                    pipelinesteps={this.props.pipelinesteps}\n                                    scripts={this.props.scripts}\n                                    documents={this.props.documents}\n                                    pipelines={this.props.pipelines}\n                                    selectedJob={selectedJob}\n                                    selectedNode={selectedNode}\n                                    jobResult={jobResult}\n                                    setSidebarTab={this.setSidebarTab}\n                                    sidebarTab={this.state.sidebarTab}\n                                    handleFetchResultData={this.props.handleFetchResultData}\n                                    handleFetchJobLog={this.props.handleFetchJobLog}\n                                    handleFetchJobStepLog={this.props.handleFetchJobStepLog}\n                                    handleDownloadResult={this.props.handleDownloadResult}\n                                    handleDownloadJob={this.props.handleDownloadJob}\n                                    handleDeleteJob={this.props.handleDeleteJob}\n                                    handleDownloadDocument={this.props.handleDownloadDocument}\n                                    handleScriptSelect={this.props.handleScriptSelect}\n                                    handleDocumentDelete={this.props.handleDocumentDelete}\n                                    handleUploadDocument={this.props.handleUploadDocument}\n                                    handleUpdateJob={this.props.handleUpdateJob}\n                                    handleDocumentPageChange={this.props.handleDocumentPageChange}\n                                />\n                            }\n                            controls={\n                                <JobDigraphButtonPanel digraphEngine={this.props.digraphEngine}/>\n                            }\n                            trayControls={\n                                <TrayControls\n                                    selectedTab={this.state.sidebarTab}\n                                    selectTab={this.setSidebarTab}\n                                    selectedJob={selectedJob}\n                                    selectedNode={selectedNode}\n                                    jobResult={jobResult}\n                                    handleFetchResultData={this.props.handleFetchResultData}\n                                />\n                            }\n                            playControls={\n                                <PrimaryJobControls\n                                    job={selectedJob}\n                                    startJob={this.props.handleUpdateJob}\n                                    deleteJob={this.toggleDeleteConfirm}\n                                    downloadJob={this.props.handleDownloadJob}\n                                />\n                            }\n                            // headerWidget={\n                            //     <JobHeaderWidget selectedJob={selectedJob}/>\n                            // }\n                            nodeClass={ResultNode}\n                        />\n                    }\n                </div>\n                {\n                    this.props.jobs.selectedJobId === -1 ? \n                    <div style={{\n                        display:'flex',\n                        flexDirection:'row',\n                        justifyContent:'center',\n                        alignItems:'center',\n                        marginTop:'2vh'\n                    }}>\n                \n                        <div>\n                            <Pagination\n                                activePage={this.props.jobs.selectedPage}\n                                onPageChange={(e, { activePage }) => this.props.handleSelectJobPage(activePage)} \n                                totalPages={this.props.jobs.total_pages}\n                            />\n                        </div>  \n                    </div> : <></> \n                }\n            </VerticallyCenteredDiv>);\n    }\n}\n\nfunction mapStateToProps(state) {\n    \n    const {\n        results, \n        documents,\n        jobs,\n        scripts,\n        pipelines,\n        pipelinesteps,\n        application\n    } = state;\n  \n    return {\n        results,\n        documents,\n        jobs,\n        scripts,\n        pipelines,\n        pipelinesteps,\n        application\n    };\n  }\n\nexport default connect(mapStateToProps)(JobDigraphTab);","import React, { PureComponent } from 'react'\nimport { \n    Header, \n    Dimmer, \n    Loader, \n    Segment, \n    Icon, \n    Image\n} from 'semantic-ui-react'\n\nexport default class AdminHomeTab extends PureComponent {\n\n    componentDidMount() {\n        this.props.handleRefreshSystemStats();\n    }\n\n    render() {\n\n        const {system} = this.props;\n\n        return (\n        <div style={{\n            height:'100%',\n            width:'100%',\n            display:'flex',\n            flexDirection:'column',\n            justifyContent:'center'\n        }}>\n            { system.loading ? <Dimmer active>\n                    <Loader>Updating System Stats...</Loader>\n                </Dimmer> : <></>}\n            <div style={{width:'100%', display:'flex', flexDirection:'row', justifyContent:'center', alignItems:'center', marginBottom:'1vh'}}>\n                <div>\n                    <Header size='massive' icon style={{fontSize:'2em'}}>\n                        <Icon name='dashboard'/>\n                        System Dashboard\n                        <Header.Subheader>\n                        Current Gremlin usage, user count and system status at-a-glance.\n                        </Header.Subheader>\n                    </Header>\n                </div>\n            </div>\n            <div style={{width:'100%', display:'flex', flexDirection:'row', justifyContent:'center', alignItems: 'center'}}>\n                <Segment style={{width: '30vw', height:'30vh', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='fire' color='red' size='massive'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.error_job_count}\n                                <Header.Subheader>\n                                FAILED JOBS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n                <Segment style={{width: '30vw', height:'30vh', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='play' color='green' size='massive'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.running_job_count}\n                                <Header.Subheader>\n                                RUNNING JOBS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n                <Segment style={{width: '30vw', height:'30vh', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='ordered list'color='blue' size='massive'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.queued_job_count}\n                                <Header.Subheader>\n                                QUEUED JOBS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n            </div>\n            <div style={{width:'100%', display:'flex', flexDirection:'row', justifyContent:'center', alignItems: 'center'}}>\n                <Segment style={{width: '18vw', height: '18vh', textAlign:'center', verticalAlign:'middle', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='users' size='huge'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.user_count}\n                                <Header.Subheader>\n                                TOTAL USERS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div> \n                </Segment>\n                <Segment style={{width: '18vw', height: '18vh', textAlign:'center', verticalAlign:'middle', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='shuffle' size='huge'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.pipeline_count}\n                                <Header.Subheader>\n                                PIPELINES\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n                <Segment style={{width: '18vw', height: '18vh', textAlign:'center', verticalAlign:'middle', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='code' size='huge'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'> \n                                {system.script_count}\n                                <Header.Subheader>\n                                SCRIPTS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div> \n                </Segment>\n                <Segment style={{width: '18vw', height: '18vh', textAlign:'center', verticalAlign:'middle', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='file text outline' size='huge'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.doc_count}\n                                <Header.Subheader>\n                                DOCUMENTS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n                <Segment style={{width: '18vw', height: '18vh', textAlign:'center', verticalAlign:'middle', margin:'1vh'}} raised>\n                    <div style={{height:'100%', display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>\n                        <div style={{marginBottom:'1vh'}}>\n                            <Icon name='file text' size='huge'/>\n                        </div>\n                        <div>\n                            <Header as='h1' textAlign='center'>\n                                {system.parsed_doc_count}\n                                <Header.Subheader>\n                                OCRed DOCUMENTS\n                                </Header.Subheader>\n                            </Header>\n                        </div>\n                    </div>\n                </Segment>\n            </div>\n            <div style={{\n                    zIndex: 100,\n                    position: 'absolute',\n                    bottom: '1vh',\n                    right: '1vw'\n\n                }}>\n                <Image style={{height:'6vh'}} src='/gordium_128_name_left.png'/>\n            </div>\n        </div>);\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Header,\n  Dropdown,\n  Segment,\n  Image,\n  Icon,\n  Container,\n  Menu,\n  Sidebar\n} from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport {\n  clearJobs,\n  createJob,\n  updateJob,\n  deleteJob,\n  selectJob,\n  clearJobLogs,\n  setJobSearchString,\n  selectJobPage,\n  fetchJobs,\n  requestJobStepLogs,\n  downloadJobResultsById,\n  requestSelectedJobLog,\n  unselectJob\n} from '../Redux/job_actions';\n\nimport {\n  requestTestJobStepLog,\n  requestTestJobLog,\n  deleteDocument,\n  uploadDocument,\n  fetchDocuments,\n  selectDocumentPage,\n  downloadSelectedDocument,\n  clearDocuments,\n  fetchSummaryResultsForJob,\n  clearResults,\n  selectResult,\n  downloadSelectedResult,\n  fetchFullResult,\n  fetchScripts,\n  selectScript,\n  refreshScriptById,\n  requestCreateScript,\n  requestDeleteScript,\n  requestUpdateScript,\n  clearSelectedScript,\n  fetchSelectedScriptDetails,\n  requestDownloadPythonScript,\n  requestUploadPythonScript,\n  requestCreateTestJobForPipeline,\n  fetchTestDocuments,\n  clearTestData,\n  updateTestJob,\n  setTestDocumentPage,\n  refreshTestJob,\n  runTestJobToNode,\n  uploadTestDocument,\n  tryTestNewTransformForStepResult,\n  fetchSystemStats,\n  clearStats,\n} from '../Redux/actions';\n\nimport {\n  fetchPipelines,\n  clearPipelines,\n  removePipeline,\n  unselectPipeline,\n  selectPipeline,\n  refreshPipeline,\n  loadFullPipeline,\n  requestCreatePipeline,\n  requestUpdatePipeline,\n  requestDownloadPipelineYAML,\n  requestUploadPipelineYAML,\n  requestDeletePipeline,\n  setPipelineSearchString\n} from '../Redux/pipeline_actions';\n\nimport {\n  selectPipelineStep,\n  clearSelectedPipelineNode,\n  requestUpdatePipelineStep,\n  requestRefreshPipelineStep,\n  createNewPipelineStep,\n  requestDeletePipelineStep,\n  fetchPipelineStepsForPipeline,\n  requestAddPipelineNode,\n} from '../Redux/node_actions';\n\nimport {\n  createPipelineEdge,\n  deletePipelineEdge\n} from '../Redux/edge_actions';\n\nimport {\n  changeTab,\n  toggleNewJobModal,\n  toggleScriptModal,\n  toggleInviteUserModal,\n  toggleNewScriptModal,\n  toggleNewPipelineModal,\n  toggleBuildMode,\n  setNewJobName,\n  showSuccessToast,\n  showErrorToast,\n  setScriptNameFilter\n} from '../Redux/app_actions';\n\nimport {\n  requestDeleteUserRequest,\n  fetchUsers,\n  selectUserPage,\n  setUserNameFilter,\n  inviteNewUser,\n  requestChangeUserPermissions,\n  changePassword,\n  tryLogout\n} from '../Redux/auth_actions';\n\nimport AddPipelineModal from '../Components/PipelineDigraph/components/Modals/AddPipelineModal';\nimport ScriptModal from '../Components/Scripts/ScriptModal';\nimport CreateNewScriptModal from '../Components/Scripts/CreateNewScriptModal';\nimport NewJobModal from '../Components/PipelineDigraph/components/Modals/NewJobModal';\nimport UserTab from '../Components/Users/UserTab';\nimport ScriptGridTab from '../Components/Scripts/ScriptGridTab';\nimport SettingsTab from '../Components/Settings/SettingsTab';\nimport PipelineDigraphTab from '../Components/PipelineDigraph/PipelineDigraphTab';\nimport JobDigraphTab from '../Components/JobDigraph/JobDigraphTab';\nimport HomeTab from '../Components/Home/HomeTab';\n\nimport withWindowDimensions from './withWindowDimensions';\n\nclass AsyncApp extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      showSidebar:false,\n      timer: null,\n      lastNodeMoves:{}\n    };\n\n    // Register key listeners with the diagram engine so changes to the digraph \n    // relationships and positioning can be reflected in the DB: 1) node moves,\n    // 2) node deletes, 3) edges creation and 4) edge deletion \n    this.props.digraphEngine.registerNodeMoveListener(this.logMove);\n    this.props.digraphEngine.registerNodeSelectedListener(this.handleNodeSelect);\n    this.props.digraphEngine.registerNodeUnselectedListener(this.handleNodeUnselect);\n    this.props.digraphEngine.registerNodeDeleteListener(this.handleDeletePipelineNode);\n    this.props.digraphEngine.registerLinkCreateListener((args)=> {\n      try{\n        if (Number.isInteger(args.entity.sourcePort.parent.id) && \n              Number.isInteger(args.entity.targetPort.parent.id)) {\n                let edge = {\n                  parent_pipeline: this.props.pipelines.selectedPipelineId,\n                  start_node: args.entity.sourcePort.parent.id,\n                  end_node: args.entity.targetPort.parent.id\n                };\n                this.handleCreatePipelineEdge(edge, args.entity.options.id);\n          }\n      } catch {}\n    });\n    this.props.digraphEngine.registerLinkDeleteListener(this.handleDeletePipelineEdge);\n  }\n\n  ///////////////////////////////////////////////////////////////////////\n  // Code to keep track of node moves and update if no moves made      //\n  // within 1 seconds                                                  //\n  ///////////////////////////////////////////////////////////////////////\n\n    logMove = (node) => {\n\n      let lastNodeMoves = {...this.state.lastNodeMoves};\n      lastNodeMoves[node.id] = { x: node.position.x, y: node.position.y, lastTime: Date.now() };\n\n      this.setState({\n        lastNodeMoves\n      });\n\n    }\n\n    syncStaleNodeMoves = () => {\n\n      let now = Date.now();\n      \n      for (var key in this.state.lastNodeMoves){\n        if (now - this.state.lastNodeMoves[key].lastTime > 1000) {\n          this.handleUpdatePipelineStep({\n            id: key,\n            x_coord: this.state.lastNodeMoves[key].x,\n            y_coord: this.state.lastNodeMoves[key].y\n          });\n          delete this.state.lastNodeMoves[key];\n        }\n      }\n\n    }\n  \n  ///////////////////////////////////////////////////////////////////////\n  // JOB Actions                                                       //\n  ///////////////////////////////////////////////////////////////////////\n\n    fetchJobs = () => {\n      this.props.dispatch(fetchJobs());\n    }\n\n    // When you select a job row, clear + fetch docs, clear + fetch results, clear logs, select job \n    // pipeline. Then, when all of those are complete, show the job modal.  \n    handleSelectJobRow = (jobId, pipelineId) => {\n      this.props.dispatch(selectJob(jobId)).then(() => {\n        Promise.all([\n          this.props.dispatch(clearJobLogs()),\n          this.props.dispatch(fetchDocuments()),\n          this.props.dispatch(clearResults()),\n          this.props.dispatch(fetchSummaryResultsForJob(jobId)),\n          this.props.dispatch(selectPipeline(pipelineId))\n        ]);\n      });\n    } \n\n    handleDownloadJobResult = (jobId) => {\n      this.props.dispatch(downloadJobResultsById(jobId));\n    }\n\n    handleDeleteJob = (jobId) => {\n      this.props.dispatch(unselectJob()).then(() => {\n        this.props.dispatch(deleteJob(jobId)).then(() => {\n          this.props.dispatch(fetchJobs());\n          this.props.dispatch(clearResults());\n          this.props.dispatch(clearDocuments());\n        });\n      });\n    }\n\n    handleSetJobSearchString = (searchString) => {\n      this.props.dispatch(setJobSearchString(searchString));\n    }\n\n    handleSelectJobPage = (page) => {\n      this.props.dispatch(selectJobPage(page)).then(() => {\n        this.props.dispatch(fetchJobs());\n      });\n    }\n\n    handleUpdateJob = (updatedJobObj) => {\n      this.props.dispatch(updateJob(updatedJobObj));\n    }\n\n    //Create a new job with fields in the jobObj. Then fetch related docs and results. \n    //Then close the newjobmodal and, if we're not on the job tab, switch to job tab.\n    handleCreateJob = (jobObj) => {\n      this.props.dispatch(createJob(jobObj)).then((response) => {\n        if (response) {\n          this.props.dispatch(fetchJobs()).then(() => {\n            this.props.dispatch(selectJob(response.id)).then(()=>{\n              Promise.all([\n                this.props.dispatch(fetchDocuments()), \n                this.props.dispatch(clearDocuments()),\n                this.props.dispatch(clearResults()),\n                this.props.dispatch(toggleNewJobModal())\n              ]);\n            });\n          });\n        }\n      });\n    }\n\n    handleFetchJobStepLog = (jobId, stepId) => {\n      this.props.dispatch(requestJobStepLogs(jobId, stepId));\n    }\n\n    handleFetchJobLog = () => {\n      this.props.dispatch(requestSelectedJobLog());\n    }\n\n    handleClearLogs = () => {\n      this.props.dispatch(clearJobLogs());\n    }\n\n  ///////////////////////////////////////////////////////////////////////\n  // APP Actions\n  ///////////////////////////////////////////////////////////////////////\n    \n    handleUpdateNewJobName = (newJobName) => {\n      this.props.dispatch(setNewJobName(newJobName));\n    }\n\n    showSidebar = (show) => {\n      this.setState({showSidebar: show});\n    }\n\n    handleRefreshSystemStats = () => {\n      this.props.dispatch(fetchSystemStats());\n    }\n\n    handleRefreshSystemStats = () => {\n      this.props.dispatch(clearStats());\n    }\n\n    handleShowSuccessToast = (message) => {\n      this.props.dispatch(showSuccessToast(message));\n    }\n\n    handleShowErrorToast = (message) => {\n      this.props.dispatch(showErrorToast(message));\n    }\n\n    handleNewJobModalToggle = () => {\n      this.props.dispatch(toggleNewJobModal());\n    }\n  \n    handleScriptModalToggle = () => {\n      this.props.dispatch(toggleScriptModal());\n    }\n  \n    handleToggleInviteUserModal = () => {\n      this.props.dispatch(toggleInviteUserModal());\n    }\n\n    handleNewScriptModalToggle = () => {\n      this.props.dispatch(toggleNewScriptModal());\n    }\n  \n    handleNewPipelineModalToggle = () => {\n      this.props.dispatch(toggleNewPipelineModal());\n    }\n\n    handleTabChange = (newTabIndex, action) => {\n      this.props.dispatch(changeTab(newTabIndex)).then(() => {\n        if (action) {\n          action();\n        }\n      });\n    }\n\n  ///////////////////////////////////////////////////////////////////////\n  // AUTH Actions\n  ///////////////////////////////////////////////////////////////////////\n\n   handleLogout = () => {\n    Promise.all([\n      this.props.dispatch(clearDocuments()),\n      this.props.dispatch(clearResults()),\n      this.props.dispatch(clearJobs()),\n      this.props.dispatch(clearPipelines()),\n      this.props.dispatch(clearSelectedPipelineNode()),\n      this.props.dispatch(clearStats())\n    ]).then(() => {\n      this.props.dispatch(tryLogout());\n    });\n  }\n\n  ///////////////////////////////////////////////////////////////////////\n  // TEST Actions\n  ///////////////////////////////////////////////////////////////////////\n\n    handleToggleBuildMode = () => {   \n      this.props.dispatch(toggleBuildMode()).then(() => {\n        // If, after toggling, we're now in buildMode, create a test job.\n        if (this.props.application.buildMode) {\n          this.handleCreateTestJob(this.props.pipelines.selectedPipelineId);    \n        } \n        // Otherwise, we've just exited buildMode and should clean up the test data\n        else {\n            this.clearTestData();\n        }\n      });\n    }\n\n    handleFetchTestJobStepLog = (jobId, stepId) => {\n      this.props.dispatch(requestTestJobStepLog(jobId, stepId));\n    }\n\n    handleFetchTestJobLog = () => {\n      this.props.dispatch(requestTestJobLog());\n    }\n\n    handleTestTransformForResult = (resultId, transform) => {\n      this.props.dispatch(tryTestNewTransformForStepResult(resultId, transform));\n    }\n\n    refreshTestDocuments = () => {\n      this.props.dispatch(fetchTestDocuments());\n    }\n  \n    refreshSummaryTestResults = () => {\n      this.props.dispatch(fetchSummaryResultsForJob(this.props.test_job.test_job.id));\n    }\n\n    handleUploadTestDocument = (file) => {\n      this.props.dispatch(uploadTestDocument(file)).then(() => {\n        this.props.dispatch(fetchTestDocuments());\n      });\n    }\n\n    handleTestDocumentPageChange = (documentPage) => {\n      this.props.dispatch(setTestDocumentPage(documentPage)).then(() => {\n        this.props.dispatch(fetchTestDocuments());\n      });\n    }\n  \n    handleDeleteTestDocument = (docId) => {\n      this.props.dispatch(deleteDocument(docId)).then(() => {\n        this.props.dispatch(fetchTestDocuments());\n      });\n    }\n\n    handleCreateTestJob = (pipelineId) => {\n      this.clearTestData();\n      this.props.dispatch(requestCreateTestJobForPipeline(pipelineId)).then((result) => {\n        if(result.id) {\n          this.updateTestDocuments();\n          this.props.dispatch(fetchSummaryResultsForJob(result.id));\n        }\n      });\n    }\n  \n    handleRunTestJobToNode = (nodeId) => {\n      this.props.dispatch(runTestJobToNode(nodeId));\n    }\n  \n    handleUpdateTestJob = (updatedJobObj) => {\n      this.props.dispatch(updateTestJob(updatedJobObj));\n    }\n  \n    handleRefreshTestJob = () => {\n      this.props.dispatch(refreshTestJob());\n    }\n  \n    updateTestDocuments = () => {\n      this.props.dispatch(fetchTestDocuments());\n    }\n  \n    clearTestData = () => {\n      this.props.dispatch(clearTestData()).then(() => {\n        this.props.dispatch(clearResults());\n      });\n    }  \n\n  ///////////////////////////////////////////////////////////////////////\n  // USER Actions\n  ///////////////////////////////////////////////////////////////////////\n\n    // Change the page # in the redux store and then refetch users (pagination is injected to url\n    // request automatically)\n    handleUserPageChange = (pageNo) => {\n      this.props.dispatch(selectUserPage(pageNo)).then(() => {\n        this.props.dispatch(fetchUsers());\n      });\n    }\n\n    handleChangeUserPermissions = (userId, newRole) => {\n      this.props.dispatch(requestChangeUserPermissions(userId, newRole)).then(() => {\n        this.props.dispatch(fetchUsers());\n      });\n    }\n\n    handleSetUserNameFilter = (userName) => {\n      this.props.dispatch(setUserNameFilter(userName));\n    }\n\n    handleFetchUsers = () => {\n      this.props.dispatch(fetchUsers());\n    }\n\n    handleInviteUser = (userObjData) => {\n      this.props.dispatch(inviteNewUser(userObjData)).then(() => {\n        this.handleToggleInviteUserModal();\n      });\n    }\n\n    handleChangePassword = (old_password, new_password) => {\n      return this.props.dispatch(changePassword(old_password, new_password));\n    }\n\n    handleDeleteUser = (userId) => {\n      this.props.dispatch(requestDeleteUserRequest(userId));\n    }\n\n    SetUserNameFilter = (filter) => {\n      this.props.dispatch(setUserNameFilter(filter));\n    }\n\n///////////////////////////////////////////////////////////////////////\n// PIPELINE Actions\n///////////////////////////////////////////////////////////////////////\n\n  setPipelineNameFilter = (filterString) => {\n    this.props.dispatch(setPipelineSearchString(filterString));\n  }\n\n  handleSelectPipelineRow = (pipelineId) => {\n    this.props.dispatch(selectPipeline(pipelineId)).then(() => {\n      this.props.dispatch(loadFullPipeline(pipelineId));\n    });\n  }\n\n  fetchPipelines = () => {\n    this.props.dispatch(fetchPipelines());\n  }\n\n  refreshSelectedPipelineDigraph = () => {\n    try {\n      this.props.dispatch(loadFullPipeline(this.props.pipelines.selectedPipelineId));\n    }\n    catch (exception) {\n      console.log(\"Unabe to refresh selected pipeline digraph:\", exception);\n    }\n  }\n\n  handleUploadPipeline = (file) => {\n    this.props.dispatch(requestUploadPipelineYAML(file));\n  }\n\n  handleCreatePipeline = (pipelineObj) => {\n    this.props.dispatch(requestCreatePipeline(pipelineObj));\n  }\n\n  handleDeletePipeline = (pipelineId) => {\n    this.props.dispatch(requestDeletePipeline(pipelineId)).then((successId) => {\n      this.props.dispatch(removePipeline(successId));\n    })\n  }\n\n  handleUpdatePipeline = (pipelineObj) => {\n    this.props.dispatch(requestUpdatePipeline(pipelineObj)).then(() => {\n      this.props.dispatch(refreshPipeline(pipelineObj.id));  \n    });\n  }\n\n  handleDownloadPipeline = (pipelineId) => {\n    this.props.dispatch(requestDownloadPipelineYAML(pipelineId));\n  }\n\n  handleUnselectPipeline = () => {\n    this.props.dispatch(unselectPipeline()).then(() => {\n      this.props.digraphEngine.clearAllValues();\n    });\n  }\n\n  handleSelectPipeline = (pipelineId) => {\n    return this.props.dispatch(selectPipeline(pipelineId)).then(() => {\n      this.props.dispatch(loadFullPipeline(pipelineId)).then(() => {\n        this.props.digraphEngine.renderPipeline();\n      })\n    });\n  }\n\n  handleSelectResult = (selectedResultId) => {\n    this.props.dispatch(selectResult(selectedResultId));\n  }\n\n///////////////////////////////////////////////////////////////////////\n// RESULT Actions                                                    //\n///////////////////////////////////////////////////////////////////////\n\n  handleDownloadResult = (resultId) => {\n    this.props.dispatch(downloadSelectedResult(resultId));\n  }\n\n  handleFetchFullResultData = (resultId) => {\n    this.props.dispatch(fetchFullResult(resultId));\n  }\n\n  handleFetchSummaryResults = () => {\n    this.props.dispatch(fetchSummaryResultsForJob(this.props.jobs.selectedJobId));\n  }\n\n///////////////////////////////////////////////////////////////////////\n// DOCUMENTS Actions                                                 //\n///////////////////////////////////////////////////////////////////////\n\n  handleUploadDocument = (file) => {\n    this.props.dispatch(uploadDocument(file)).then(() => {\n      this.props.dispatch(fetchDocuments());\n    });\n  }\n\n  handleDownloadDocument = (docId) => {\n    this.props.dispatch(downloadSelectedDocument(docId));\n  }\n\n  handleDocumentDelete = (docId) => {\n    this.props.dispatch(deleteDocument(docId));\n  }\n\n  handleDocumentPageChange = (documentPage) => {\n    this.props.dispatch(selectDocumentPage(documentPage));\n    this.props.dispatch(fetchDocuments());\n  }\n\n///////////////////////////////////////////////////////////////////////\n// SCRIPTS Actions                                                   //\n///////////////////////////////////////////////////////////////////////\n\n  SetScriptNameFilter = (filter) => {\n    this.props.dispatch(setScriptNameFilter(filter));\n  }\n\n  handleDownloadScript = (scriptId) => {\n    this.props.dispatch(requestDownloadPythonScript(scriptId));\n  }\n\n  handleUploadScript = (file) => {\n    this.props.dispatch(requestUploadPythonScript(file)).then(() => {\n      this.props.dispatch(fetchScripts());\n    });\n  }\n\n  handleScriptSelect = (selectedScriptId) => {\n    this.props.dispatch(selectScript(selectedScriptId)).then(() => {\n      this.props.dispatch(fetchSelectedScriptDetails()).then(()=> {\n        this.props.dispatch(toggleScriptModal());        \n      });\n    }); \n  }\n\n  handleFetchScripts = () => {\n    this.props.dispatch(fetchScripts());\n  }\n\n  handleRefreshScript = (scriptId) => {\n    this.props.dispatch(refreshScriptById(scriptId));\n  }\n\n  handleDeleteScript = (scriptId) => {\n    this.props.dispatch(requestDeleteScript(scriptId));\n  }\n\n  handleClearScript = () => {\n    this.props.dispatch(clearSelectedScript());\n  }\n\n  handleUpdateScript = (updatedScriptObj) => {\n    this.props.dispatch(requestUpdateScript(updatedScriptObj));\n  }\n\n  handleCreateScript = (name, type, script) => {\n    this.props.dispatch(requestCreateScript(name, type, script));\n  }\n\n///////////////////////////////////////////////////////////////////////\n// NODE Actions (Slowly changing naming over from pipeline step)     //\n///////////////////////////////////////////////////////////////////////\n\n  handleNodeSelect = (id) => {\n    this.props.dispatch(selectPipelineStep(id)).then(() => {\n      this.props.dispatch(requestRefreshPipelineStep(id))\n    });\n  }\n\n  handleNodeUnselect = () => {\n    this.props.dispatch(clearSelectedPipelineNode());\n  }\n\n  handleCreatePipelineStep = (name, script, pipeline, step_settings, step_number) => {\n    this.props.dispatch(createNewPipelineStep(name, script, pipeline, step_settings, step_number)).then(() => {\n      this.RefreshPipelineModal();\n    });\n  }\n\n  refreshPipelineStepsForSelectedPipeline = () => {\n      this.props.dispatch(fetchPipelineStepsForPipeline(this.props.pipelines.selectedPipelineId));\n  }\n\n  handleUpdatePipelineStep = (updatedObj) => {\n    this.props.dispatch(requestUpdatePipelineStep(updatedObj)).then(() => {\n      this.props.dispatch(requestRefreshPipelineStep(updatedObj.id));\n    });\n  }\n\n  // This is ONLY called from within the react-diagram view. After model is created on Gremlin, \n  // the id received from Gremlin is injected into the link model in react-diagrams. That way, \n  // if the user deletes the edge before reloading the graph, we have a valid Gremlin Id to delete\n  // in the DB.\n  handleCreatePipelineEdge = (edge, reactDiagramId) => {\n    this.props.dispatch(createPipelineEdge(edge)).then((data) => {\n      this.props.digraphEngine.linkInjectGremlinId(reactDiagramId, data.id);\n    });\n  }\n\n  // Nothing fancy here. Delete edge in DB. This action will also remove the edge from the reducer.\n  handleDeletePipelineEdge = (edgeId) => {\n    this.props.dispatch(deletePipelineEdge(edgeId));\n  }\n\n  // Create pipeline node on the backend and, once successful, load it into the render engine and display\n  handleAddPipelineNode = async (name, script, step_settings) => {\n    let node = await this.props.dispatch(requestAddPipelineNode(name, script, step_settings));\n    if (node) {\n      try{\n        this.props.digraphEngine.handleCreateNode(node.id, node.name, node.x_coord, node.y_coord);\n        this.props.digraphEngine.repaint();\n      }\n      catch(err) {\n        console.log(\"Error creating node: \", err);\n      }\n    }\n    else {\n      console.log(\"Error creating node on backend\");\n    }\n  }\n\n  // Delete node (which will also remove it from reducer since we always load ALL valid nodes for a give pipeline)\n  // so, once one is deleted, no worries about pagination or the like and can safely remove it from list.\n  handleDeletePipelineNode = (pipelineNodeId) => {\n    this.props.dispatch(requestDeletePipelineStep(pipelineNodeId));\n  }\n\n  handleRefreshPipelineStep = (pipelineStepId) => {\n    this.props.dispatch(requestRefreshPipelineStep(pipelineStepId));\n  }\n\n  handleRequestPipelineStepDelete = (pipelineStepId) => {\n    this.props.dispatch(requestDeletePipelineStep(pipelineStepId)).then(() => {\n      this.RefreshPipelineModal();\n    });\n  }\n\n///////////////////////////////////////////////////////////////////////\n// OTHER Actions                                                     //\n///////////////////////////////////////////////////////////////////////\n\n  requestHomeViewDataRefresh = () => {\n    this.props.dispatch(fetchSystemStats());  \n  }\n\n///////////////////////////////////////////////////////////////////////\n//                   ---- React Component ----                       //\n///////////////////////////////////////////////////////////////////////\n\n  // Grab home data when AsyncApp mounts (engineer and admin views).\n  componentDidMount() {\n    this.requestHomeViewDataRefresh();\n\n    // Setup the background timer that runs ever second which we'll use\n    //  to do various checks and updates if necessary\n    let timer = setInterval(this.tick, 2000);\n    this.setState({timer});\n  }\n\n  tick = () => {\n    this.syncStaleNodeMoves();\n  }\n\n  render() {\n\n    const {\n      pipelines,\n      pipelinesteps,\n      jobs,\n      users,\n      test_job,\n      scripts,\n      results,\n      application,\n      system,\n      auth,\n      windowHeight\n    } = this.props;\n\n    const {role} = auth.user;\n\n\n    // Default Display\n    let DisplayPane = <></>;\n\n    switch(application.selectedTabIndex) {\n      case(0):\n        DisplayPane = \n        (\n          <Container style={{width:'100vw', height:'100%'}}>\n            <HomeTab \n              system={system}\n              handleRefreshSystemStats={this.handleRefreshSystemStats}\n              handleNewJobModalToggle={this.handleNewJobModalToggle}\n            />\n          </Container>\n        );\n        break;\n      case(1):\n        DisplayPane = \n        (\n          <JobDigraphTab\n            fetchJobs={this.fetchJobs}\n            digraphEngine={this.props.digraphEngine}\n            handleSelectJobPage={this.handleSelectJobPage}\n            handleFetchJobLog={this.handleFetchJobLog}\n            handleFetchJobStepLog={this.handleFetchJobStepLog}\n            handleDeleteJob={this.handleDeleteJob}    \n            handleSelectJobRow={this.handleSelectJobRow}\n            handleDownloadResult={this.handleDownloadResult}\n            handleFetchResultData={this.handleFetchFullResultData}\n            handleFetchScripts={this.handleFetchScripts}\n            fetchPipelines={this.fetchPipelines}\n            handleDownloadJob={this.handleDownloadJobResult}\n            handleDownloadDocument={this.handleDownloadDocument}\n            handleScriptSelect={this.handleScriptSelect}\n            handleDocumentDelete={this.handleDocumentDelete}\n            handleUploadDocument={this.handleUploadDocument}\n            handleUpdateJob={this.handleUpdateJob}\n            handleNewJobModalToggle={this.handleNewJobModalToggle}\n            handleSetJobSearchString={this.handleSetJobSearchString}\n            handleDocumentPageChange={this.handleDocumentPageChange}\n          />\n        );\n        break;\n      case(2):\n        DisplayPane = \n        (\n          <Container style={{width:'100vw'}}>\n            <PipelineDigraphTab\n              windowHeight={windowHeight} \n              digraphEngine={this.props.digraphEngine}\n              user = {auth.user}\n              pipelines={pipelines}\n              scripts={scripts}\n              results={results}\n              test_job={test_job}\n              pipelinesteps={pipelinesteps}\n              fetchPipelines={this.fetchPipelines}\n              handleDownloadJobResult={this.handleDownloadJobResult}\n              handleUpdateJob={this.handleUpdateJob}\n              handleUpdateTestJob = {this.handleUpdateTestJob}\n              handleFetchResultData={this.handleFetchFullResultData}\n              handleRunTestJobToNode = {this.handleRunTestJobToNode}\n              handleRefreshTestJob = {this.handleRefreshTestJob}\n              handleFetchTestResultData={this.handleFetchTestResultData}\n              handleFetchScripts={this.handleFetchScripts}\n              handleTestTransformForResult={this.handleTestTransformForResult}\n              refreshTestDocuments={this.refreshTestDocuments}\n              refreshSummaryTestResults={this.refreshSummaryTestResults}\n              refreshSelectedPipelineDigraph = {this.refreshSelectedPipelineDigraph}\n              handleScriptSelect={this.handleScriptSelect}\n              handleSelectPipeline={this.handleSelectPipeline}\n              handleUploadPipeline={this.handleUploadPipeline}\n              handleUnselectPipeline={this.handleUnselectPipeline}\n              selectedPipelineId={pipelines.selectedPipelineId}\n              handlePipelineStepSelect={this.handleNodeSelect}\n              handleDownloadPipeline={this.handleDownloadPipeline}\n              selectedPipelineStepId={pipelinesteps.selectedPipelineStepId}\n              handleAddPipelineNode={this.handleAddPipelineNode}\n              refreshPipelineStepsForSelectedPipeline={this.refreshPipelineStepsForSelectedPipeline}\n              handleUpdatePipelineStep={this.handleUpdatePipelineStep}\n              handleUpdatePipeline={this.handleUpdatePipeline}\n              handleDeletePipelineNode={this.handleDeletePipelineNode}\n              handleCreatePipelineEdge={this.handleCreatePipelineEdge}\n              handleDeletePipelineEdge={this.handleDeletePipelineEdge}\n              handleDeletePipeline={this.handleDeletePipeline}\n              handleNewPipelineModalToggle={this.handleNewPipelineModalToggle}\n              setPipelineNameFilter={this.SetPipelineNameFilter}\n              filterValue={application.pipelineNameFilter}\n              handleCreateTestJob={this.handleCreateTestJob}\n              handleDeleteTestDocument={this.handleDeleteTestDocument}\n              handleUploadTestDocument={this.handleUploadTestDocument}\n              handleDownloadDocument={this.handleDownloadDocument}\n              clearTestData = {this.clearTestData}\n              handleFetchTestJobStepLog={this.handleFetchTestJobStepLog}\n              handleFetchTestJobLog={this.handleFetchTestJobLog}\n              buildMode={application.buildMode}\n              handleToggleBuildMode={this.handleToggleBuildMode}\n              handleTestDocumentPageChange ={this.handleTestDocumentPageChange}\n            />\n          </Container>\n        );\n        break;\n      case(3):\n        DisplayPane = \n        (\n          <Container style={{width:'100vw'}}>\n            <ScriptGridTab\n              pipelines={pipelines}\n              pipelinesteps={pipelinesteps}\n              scripts={scripts}\n              handleScriptSelect={this.handleScriptSelect}\n              handleCreateScript={this.handleCreateScript}\n              handleUpdateScript={this.handleUpdateScript}\n              handleDownloadScript={this.handleDownloadScript}\n              handleUploadScript={this.handleUploadScript}\n              handleDeleteScript={this.handleDeleteScript}\n              handleChangeScriptNameFilter={this.SetScriptNameFilter}\n              handleNewScriptModalToggle={this.handleNewScriptModalToggle}\n              handleScriptModalToggle={this.handleScriptModalToggle}\n              nameFilterValue={application.scriptNameFilter}\n            />\n            </Container>\n        );\n        break;\n      case 4:\n        DisplayPane = \n        (\n          <Container style={{width:'100vw'}}>\n              <SettingsTab \n                user = {auth.user}\n                users = {users}\n                handleCreateUser = {this.handleInviteUser}\n                handleChangePassword = {this.handleChangePassword}\n              />\n          </Container>\n        );\n        break;\n      case 5:\n          DisplayPane = \n          (\n            <Container style={{width:'100vw'}}>\n              <UserTab\n                users={users}\n                handleCreateUser={this.handleInviteUser}\n                handleFetchUsers={this.handleFetchUsers}\n                handleUserPageChange={this.handleUserPageChange}\n                handleFilterUserName={this.handleFilterUserName} \n                handleDeleteUser={this.handleDeleteUser}\n                showInviteModal={application.showInviteUserModal}\n                handleToggleInviteUserModal={this.handleToggleInviteUserModal}\n                handleSetUserNameFilter={this.handleSetUserNameFilter}\n                handleChangeUserPermissions={this.handleChangeUserPermissions}\n              />\n            </Container>\n          );\n          break;\n      default:\n        break;\n    }\n\n    const SidebarButtons = [\n      <Menu.Item key=\"sidebar_button_0\" as='a' onClick={() => this.handleTabChange(0, this.handleRefreshSystemStats)}>\n        <Icon name='dashboard'/>\n        Dashboard\n      </Menu.Item>,\n      <Menu.Item key=\"sidebar_button_1\" as='a' onClick={() => this.handleTabChange(1)}>\n        <Icon name='briefcase' />\n        Jobs\n      </Menu.Item>\n    ];\n\n    if(role===\"ADMIN\" || role===\"LEGAL_ENG\") {\n      SidebarButtons.push\n      ( \n        <Menu.Item\n          key={`sidebar_button_${SidebarButtons.length+1}`}\n          as='a'\n          onClick={() => this.handleTabChange(2)}\n        >\n          <Icon name='code branch'/>\n          Pipelines\n        </Menu.Item>\n      );\n      SidebarButtons.push\n      ( \n        <Menu.Item\n          key={`sidebar_button_${SidebarButtons.length+1}`}\n          as='a'\n          onClick={() => this.handleTabChange(3, this.props.dispatch(fetchScripts()))}\n        >\n          <Icon name='code' />\n          Scripts\n        </Menu.Item>\n      );\n    }\n    SidebarButtons.push\n    (\n      <Menu.Item \n        key={`sidebar_button_${SidebarButtons.length+1}`}\n        as='a'\n        onClick={() => this.handleTabChange(4)}\n      >\n        <Icon name='settings' />\n        Settings\n      </Menu.Item>\n    );  \n\n    // Certain admin-only GUI elements (to administer docs and users on the platform)\n    if(role===\"ADMIN\") {\n      SidebarButtons.push\n      (\n        <Menu.Item \n          key={`sidebar_button_${SidebarButtons.length+1}`}\n          as='a'\n          onClick={() => this.handleTabChange(5)}\n        >\n          <Icon name='user circle' />\n          Users\n        </Menu.Item>\n      ); \n    }\n\n    return (\n      <>\n        <NewJobModal\n          application={application}\n          jobs={jobs}\n          pipelines={pipelines}\n          clearPipeline={clearPipelines}\n          visible={application.showNewJobModal}\n          handleNewJobModalToggle={this.handleNewJobModalToggle}\n          handleUpdateNewJobName={this.handleUpdateNewJobName}\n          handleCreateJob={this.handleCreateJob}\n          handleSelectPipeline={this.handleSelectPipeline}\n        />\n        <CreateNewScriptModal\n          visible={application.showNewScriptModal}\n          objectType='Script'\n          handleCreate={this.handleCreateScript}\n          toggleModal={() => this.handleNewScriptModalToggle()}\n        />\n        <ScriptModal \n          visible = {application.showScriptModal}\n          handleScriptModalToggle={this.handleScriptModalToggle}\n          selectedScriptData = {scripts.selectedScriptData}\n          loading = {scripts.loading}\n          windowHeight = {windowHeight}\n          detailsAreFetching = {scripts.detailsAreFetching}\n          handleUpdateScript = {this.handleUpdateScript}\n          handleDeleteScript = {this.handleDeleteScript}\n          handleClearScript = {this.handleClearScript}\n          handleRefreshScript = {this.handleRefreshScript}\n        />\n        <AddPipelineModal\n          visible={application.showNewPipelineModal}\n          handleNewPipelineModalToggle={this.handleNewPipelineModalToggle}\n          handleCreatePipeline={this.handleCreatePipeline}\n        />\n        <Menu inverted style={{borderRadius: \"0px\", height:'8vh', margin:'0px', padding:'0px'}}>\n          <Menu.Item\n            style={{width:\"8vw\"}}\n            header\n            onClick={() => this.setState({showSidebar: !this.state.showSidebar})}\n          >\n            <div style={{display:'flex', flexDirection:'row', justifyContent:'center'}}>\n              <div>\n                <Image style={{maxHeight:'5vh', paddingRight:'.5vw'}} src='/gremlin_inverted_128.png' />\n              </div>\n              <div style={{display:'flex', flexDirection:'column', justifyContent:'center'}}>\n                <div>\n                  <Header textAlign='center' size='small' inverted>\n                    GREMLIN\n                  </Header>\n                </div>\n              </div>\n            </div>\n          </Menu.Item> \n          <Container fluid>          \n            <Menu.Menu\n              position='right'\n            >\n              <div style={\n                {\n                  display:'flex',\n                  flexDirection:'colomn',\n                  justifyContent:'center',\n                  alignItems:'center',\n                  height: '100%'\n                }\n              }>\n                <div>\n                  <Header style={{marginRight:'1vw'}}>\n                    <Icon inverted name='user circle outline' />\n                    <Header.Content style={{padding:'0px', paddingLeft:'5px'}}>\n                      <Dropdown\n                          item\n                          simple\n                          icon={<Icon style={{marginLeft:'5px'}} name='dropdown'/>}\n                          text={`User: ${auth.username}`}\n                          style={{margin:'0px', padding:'0px'}} \n                          header='Logout'>\n                          <Dropdown.Menu>\n                            <Dropdown.Item \n                              text='Logout'\n                              onClick={this.handleLogout}\n                              icon={<Icon name='log out'/>}/>\n                          </Dropdown.Menu>\n                      </Dropdown>\n                    </Header.Content>\n                  </Header>\n                </div>\n              </div>\n            </Menu.Menu>\n          </Container>\n        </Menu>\n        <Sidebar.Pushable style={{height: '92vh', width:'100vw', padding:'0px'}}>\n          <Sidebar\n            as={Menu}\n            animation='push'\n            icon='labeled'\n            inverted\n            onHide={() => this.showSidebar(false)}\n            vertical\n            visible={this.state.showSidebar}\n            style={{height: '100%', width:'8vw'}}\n          >\n            {SidebarButtons}\n            <div style={{\n              position:'absolute',\n              width:'100%',\n              bottom:'2vh',\n              display:'flex',\n              direction:'row',\n              justifyContent:'center',\n              alignItems:'center'\n            }}>\n                <Image style={{width:'4vw'}} src='/gordium_128_name_left.png'/>\n            </div>\n          </Sidebar>\n          <Sidebar.Pusher \n            style={this.state.showSidebar ? {height: '92vh', transform: 'translate3d(8vw, 0px, 0px)'} : {height: '92vh'}}\n            dimmed={this.state.showSidebar}>\n              <Segment style={{width:'100%', height:'100%'}}>\n                {DisplayPane}\n              </Segment>\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n    </>);\n  }\n}\n\nfunction mapStateToProps(state) {\n\n  const { loggedIn, username } = state.auth;\n  const { \n    jobs,\n    users,\n    test_job,\n    results,\n    documents,\n    pipelines,\n    scripts,\n    pipelinesteps,\n    edges,\n    application,\n    system,\n    auth } = state;\n\n  return {\n    jobs,\n    users,\n    test_job,\n    results,\n    scripts,\n    pipelinesteps,\n    edges,\n    documents,\n    pipelines,\n    loggedIn,\n    username,\n    application,\n    system,\n    auth\n  }\n}\n\nexport default connect(mapStateToProps)(withWindowDimensions(AsyncApp));","import React, { Component } from \"react\";\n\nexport default function withWindowDimensions(WrappedComponent) {\n    return class extends Component {\n        state = { width: 0, height: 0 };\n\n        componentDidMount() {\n            this.updateWindowDimensions();\n            window.addEventListener(\"resize\", this.updateWindowDimensions);\n        }\n\n        componentWillUnmount() {\n            window.removeEventListener(\"resize\", this.updateWindowDimensions);\n        }\n\n        updateWindowDimensions = () => {\n            this.setState({ width: window.innerWidth, height: window.innerHeight });\n        };\n\n        render() {\n            return (\n                <WrappedComponent\n                    {...this.props}\n                    windowWidth={this.state.width}\n                    windowHeight={this.state.height}\n                    isMobileSized={this.state.width < 700}\n                />\n            );\n        }\n    };\n}","import React from 'react';\nimport { \n    Modal,\n    Segment,\n    Header,\n    Label,\n    Icon,\n    Grid,\n    Divider,\n    Button,\n    Message\n} from 'semantic-ui-react';\nimport Circle from 'react-circle';\nimport { CenteredIconDiv } from '../Layouts/Layouts';\n\nexport const JobResult = (props) => {\n    \n    const {job, handleDownloadJob} = props;\n\n    if (job && job.file) {\n        return(\n            <div>\n                <Header icon>\n                    <Icon name='file text' />\n                    Download Job Results \n                </Header>\n                <Button onClick={() => handleDownloadJob(job.id)} primary>Download</Button>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <Header icon>\n                    <Icon name='x' />\n                    No Results...\n                </Header>\n                <Button primary disabled>Download</Button>\n            </div>\n        );\n    }\n}\n\nexport const ResultsModal = (props) => {\n\n    const { visible, toggleModal, handleUpdateJob, selectedJob } = props;\n\n    if (!selectedJob) {\n        return <></>;\n    }\n\n    return (  \n        <Modal\n            open={visible}\n        >\n            <Label\n                    corner='right' \n                    icon='x'\n                    onClick={toggleModal}\n                />\n            <Modal.Content>\n                <Segment placeholder>\n                    <Grid columns={2} stackable textAlign='center'>\n                        <Divider vertical>Result:</Divider>\n                        <Grid.Row verticalAlign='middle'>\n                            <Grid.Column>\n                                <Grid>\n                                    <Grid.Row stretched>\n                                        <Grid.Column stretched>\n                                            <Header textAlign='center' as='h2'>\n                                                <Header.Content>\n                                                    { selectedJob.name }\n                                                    <Header.Subheader>({selectedJob.pipeline.name})</Header.Subheader>\n                                                </Header.Content>\n                                            </Header>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row stretched>\n                                        <Grid.Column stretched textAlign='center'>\n                                        {\n                                            selectedJob.started ? (\n                                                <>\n                                                    <Header textAlign='center' as='h5'>Progress:</Header>\n                                                    { selectedJob.error ?\n                                                        <CenteredIconDiv\n                                                            icon='warning sign'\n                                                            size='huge'\n                                                            color='red'\n                                                            header='ERROR'\n                                                            subheader='See status'\n                                                        /> :\n                                                        <div>\n                                                            <Circle \n                                                                style={{textAlign:\"center\"}}\n                                                                progress={(100 * selectedJob.completed_tasks/selectedJob.task_count).toFixed(2)}\n                                                            />\n                                                        </div> \n                                                    }\n                                                </>\n                                            ) : (\n                                                <div style={{margin:'auto'}} onClick={() => {\n                                                    let updatedObject = {...selectedJob};\n                                                    updatedObject.queued = true;\n                                                    handleUpdateJob(updatedObject);\n                                                }}>\n                                                    <Header textAlign='center' as='h4' style={{cursor: 'pointer'}}>\n                                                        <Icon size='big' style={{margin: 'auto'}} name='video play'/>\n                                                        Start\n                                                    </Header>   \n                                                </div>\n                                            )\n                                        }\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row columns={2}>\n                                        <Grid.Column textAlign='center'>\n                                            <Header textAlign='center' as='h5'>Status:</Header>\n                                            {selectedJob.queued ? <Label color='green' size='tiny'>Queued</Label> : <div/>}  \n                                            {selectedJob.started & !selectedJob.finished ? <Label color='blue' size='tiny'>Running...</Label> : <div/>}\n                                            {selectedJob.error ? <Label color='red' size='tiny'>ERROR</Label> : <div/>}  \n                                            {selectedJob.finished ? <Label color='green' size='tiny'>Finished</Label> : <div/>}  \n                                        </Grid.Column>\n                                        <Grid.Column textAlign='center'>\n                                            <Header textAlign='center' as='h5'>Notified Email:</Header>\n                                            {selectedJob.notification_email ? \n                                                <Label color='green' size='tiny'>{selectedJob.notification_email}</Label> : \n                                                <Label color='grey' size='tiny'>N/A</Label>}  \n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row stretched>\n                                        <Grid.Column stretched textAlign='center'>\n                                            <Message size='tiny' style={{overflowWrap:\"break-word\"}}>\n                                                <Message.Content>\n                                                <Message.Header as='h6'>State:</Message.Header>\n                                                    {selectedJob.status}\n                                                </Message.Content>\n                                            </Message>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid> \n                            </Grid.Column>\n                            <Grid.Column>\n                                <JobResult job={selectedJob} handleDownloadJob={props.handleDownloadJob}/>\n                            </Grid.Column>\n                        </Grid.Row>\n                    </Grid>\n                </Segment>\n            </Modal.Content>\n        </Modal>\n    );\n}  ","import React, {useState} from 'react'\nimport { Table, Label, Button, Statistic, Confirm } from 'semantic-ui-react'\n\nexport const JobRow = (props) => {\n    \n    const [showConfirm, setShowConfirm] = useState(false);\n    const {job} = props;\n\n    if (!job) {\n        return <Table.Row>Job Data Missing</Table.Row>;\n    }\n\n    function confirmDelete() {\n        props.handleDeleteJob(props.job.id);\n        setShowConfirm(false);\n    }\n\n    let startTime = \"\";\n    let startDate = \"N/A\";\n    if (job.start_time) {\n        var dStart = new Date(job.start_time);\n        startTime = dStart.toLocaleTimeString();\n        startDate = dStart.toLocaleDateString();\n    }\n    let endTime = \"\"; \n    let endDate = \"N/A\";\n    if (job.stop_time) {\n        var dEnd = new Date(job.stop_time);\n        endTime = dEnd.toLocaleTimeString();\n        endDate = dEnd.toLocaleDateString()\n    }\n\n    // Build the array of action buttons\n    let buttons = [<Button \n        key=\"job_row_button_0\"\n        icon='trash'\n        basic\n        circular\n        color='red'\n        onClick={() => setShowConfirm(!showConfirm)}\n    />];\n    if (props.job.finished && props.job.file) {\n        buttons.push( \n            <Button \n                key={`job_row_button_${buttons.length+1}`}\n                icon='save'\n                basic\n                circular\n                color='grey'\n                onClick={()=>{props.handleDownloadJob(props.job.id)}}\n            />);\n    }\n    if (!props.job.queued && !props.job.started && !props.job.error && !props.job.finished) {\n        buttons.push(\n            <Button \n                key={`job_row_button_${buttons.length+1}`}\n                icon='play circle outline'\n                basic\n                circular\n                color='green'\n                onClick={()=> {\n                    let updatedObject = {...props.job};\n                    updatedObject.queued = true;\n                    props.handleUpdateJob(updatedObject);\n                }}\n            />\n        );\n    } \n\n    let progress = \"0\";\n    if (props.job){\n        if (props.job.started) {\n            if (props.job.error) progress = \"FAILED\";\n            else if (props.job.finished) progress = \"100%\";\n            else progress = `${(100 * props.job.completed_tasks/props.job.task_count).toFixed(2)}%`\n        }\n    }\n\n    return (\n    <Table.Row\n        style={props.selected ? {backgroundColor: '#e2ffdb', overflowWrap:\"break-word\"} : {overflowWrap:\"break-word\"}}\n    >\n        <Confirm\n          open={showConfirm}\n          content=\"You have chosen to delete a job (which will delete all of its result and logs).\n            ARE YOU SURE? This cannot be undone.\"\n          confirmButton=\"DELETE\"\n          onCancel={() => setShowConfirm(!showConfirm)}\n          onConfirm={() => confirmDelete()}\n        />\n        <Table.Cell \n            onClick={() => props.handleSelectJob(props.job.id)}\n            style={{\n                cursor:\"pointer\",\n                color:\"blue\",\n                textDecoration:\"underline\"\n            }}>\n                {props.job.name}\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            {props.job.pipeline ? props.job.pipeline.name : \"N/A\"}\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{progress}</Statistic.Value>\n            </Statistic>  \n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{startDate} {startTime}</Statistic.Value>\n            </Statistic>  \n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{endDate} {endTime}</Statistic.Value>\n            </Statistic>  \n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <Statistic size='mini'>\n                <Statistic.Value>{props.job.num_docs}</Statistic.Value>\n            </Statistic>\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            {props.job.finished ? <Label color='green' key='grey' size='tiny'>Finished</Label> : <div/>}\n            {props.job.error ? <Label color='red' key='red' size='tiny'>ERROR</Label> : <div/>}  \n            {props.job.started && !props.job.finished ? <Label color='blue' key='grey' size='tiny'>Running...</Label> : <div/>}\n            {props.job.queued & !props.job.started? <Label color='green' size='tiny'>Queued</Label> : <div/>}  \n            {!props.job.queued & !props.job.started? <div><Label color='grey' size='tiny'>NOT Started</Label></div> : <div/>}\n        </Table.Cell>\n        <Table.Cell textAlign='center'>\n            <div>\n                { buttons }\n            </div>\n        </Table.Cell>\n    </Table.Row>);\n}","import React from 'react';\nimport { \n    Table,\n    Segment,\n} from 'semantic-ui-react';\n\nexport const JobTable = (props) => {\n    return (\n        <Segment style={{minHeight: 300}}>\n        <Table selectable celled structured size='small'>\n            <Table.Header>\n                <Table.Row textAlign='center'>\n                    <Table.HeaderCell>Name</Table.HeaderCell>\n                    <Table.HeaderCell>Pipeline</Table.HeaderCell>\n                    <Table.HeaderCell>Progress</Table.HeaderCell>\n                    <Table.HeaderCell>Start Time</Table.HeaderCell>\n                    <Table.HeaderCell>End Time</Table.HeaderCell>\n                    <Table.HeaderCell>Num Docs</Table.HeaderCell>\n                    <Table.HeaderCell>State</Table.HeaderCell>\n                    <Table.HeaderCell>Actions</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {props.children}\n            </Table.Body>\n        </Table>\n    </Segment>);\n}","import React from 'react';\nimport { \n    Table,\n    Icon,\n    Pagination,\n    Header,\n    Dimmer, \n    Loader, \n    Segment,\n    Form,\n    Label\n} from 'semantic-ui-react';\n\nimport { JobRow } from './Jobs/JobRow';\nimport { JobTable } from './Jobs/JobTable';\n\nimport _ from 'lodash';\n\nexport const ResultsSegment = (props) => {\n\n    const { jobs } = props;\n\n    // Render the results rows, or, if there are no results, then show empty row\n    let grid = [];\n    if (jobs.items.length > 0) {\n        grid = jobs.items.map((job) => \n        <JobRow \n            key={job.id}\n            job={job}\n            selected={jobs.selectedJobId===job.id}\n            onDownload={props.handleDownloadJob}\n            handleDeleteJob={props.handleDeleteJob}\n            handleUpdateJob={props.handleUpdateJob}\n            handleSelectJob={props.handleSelectJob}\n        />);\n    }\n    else {\n        grid = [<Table.Row key='EmptyJobRow'>\n                    <Table.Cell textAlign='center' colSpan=\"3\">\n                        <Header textAlign='center' icon>\n                            <Icon size='small' name='pdf file outline' />\n                            No Matching Jobs...\n                        </Header>\n                    </Table.Cell>\n                </Table.Row>];\n    };\n\n    return (  \n        <Segment style={{width:'80vw', height:'100%', backgroundColor:'#f3f4f5'}}>\n            <div \n                style={{\n                display:'flex',\n                flexDirection:'column',\n                justifyContent:'space-between',\n                alignItems:'center', \n                height: '100%',\n                width: '100%'\n            }}>\n                <Dimmer active={jobs.loading} inverted>\n                    <Loader inverted>Loading...</Loader>\n                </Dimmer>\n                <div style={{\n                    display:'flex',\n                    flexDirection:'row',\n                    justifyContent:'flex-end',\n                    width: '100%'\n                }}>\n                    <div style={{width:'25vw', height:'10%'}}>\n                        <Label\n                            color='blue'\n                            corner='left' \n                            icon='home'\n                            onClick={props.setHomeView}\n                        />\n                        <Form onSubmit={() => props.handleFetchJobs()}>\n                            <Form.Input\n                                icon={<Icon name='search' inverted circular link />}\n                                placeholder='Search Results...'\n                                onChange={(data)=> props.handleSetJobsSearchString(data.target.value)}\n                                value={jobs.searchText}\n                            />\n                        </Form>\n                    </div>\n                </div>\n                <Segment style={{height:'80%', width:'100%', overflowY:'scroll'}}>\n                    <JobTable>\n                        { grid }\n                    </JobTable>\n                </Segment>\n                <Pagination\n                    style={{height:'10%'}}\n                    activePage={jobs.selectedPage}\n                    onPageChange={(e, { activePage }) => props.handleSelectJobPage(activePage)}\n                    totalPages={jobs.total_pages}\n                />\n            </div>\n        </Segment>\n    );\n}  ","import React from 'react'\nimport { \n    Grid,\n    Button,\n    Header,\n    Icon, \n    Segment,\n    Divider, \n    Form,\n    Image\n} from 'semantic-ui-react';\n\nexport const LandingSegment = (props) => {\n    \n    return (\n        <div style={{\n                display:'flex',\n                flexDirection:'column',\n                justifyContent:'center',\n                alignItems:'center', \n                height: '75vh',\n                width: '100%'\n            }}>\n            <div style={{\n                    display:'flex',\n                    flexDirection:'row',\n                    justifyContent:'center',\n                    alignItems:'center', \n                }}>\n                <div>\n                    <Image circular src='/gremlin_128.png' size='tiny'/>\n                </div>\n                <div>\n                    \n                    <Header as='h2' textAlign='center'>\n                        Welcome to Gremlin\n                        <Header.Subheader>\n                        Click \"Analyze\" below to analyze a document or search for a completed job.\n                        </Header.Subheader>\n                    </Header>\n                </div>\n            </div>\n            <Segment placeholder style={{width: '75vw'}}>\n                <Grid columns={2} textAlign='center'>\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                        <Grid.Column>\n                            <Header icon>\n                                <Icon name='search' />\n                                View Results\n                            </Header>\n                            <div style={{\n                                width:'100%',\n                                display:'flex',\n                                flexDirection:'row',\n                                justifyContent:'center', \n                                alignItems:'center'}}\n                            >\n                                <div>\n                                    <Form onSubmit={() => props.handleLandingJobSearch()}>\n                                        <Form.Input\n                                            icon={<Icon name='search' inverted circular link />}\n                                            placeholder='Search Jobs...'\n                                            onChange={(data)=> props.handleSetJobsSearchString(data.target.value)}\n                                            value={props.jobs.searchText}\n                                        />\n                                    </Form>\n                                </div>\n                                <div style={{marginLeft:'5px', marginRight:'5px'}}>\n                                    <b>-OR-</b>\n                                </div>\n                                <div>\n                                    <Button primary onClick={props.setResultView}>Browse</Button>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                \n                        <Grid.Column>\n                        <Header icon>\n                            <Icon name='file text outline' />\n                            Analyze Documents\n                        </Header>\n                        <Button primary onClick={props.setWizardView}>Analyze</Button>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        </div>\n        );\n}","import React from 'react';\nimport { Grid, Header, Icon, Label, Message } from 'semantic-ui-react';\nimport Circle from 'react-circle';\n\nexport function JobControl(props) {\n\n    const {\n        job,\n        pipeline,\n        handleUpdateJob, \n    } = props;\n\n    if (!job) {\n        return <></>;\n    }\n\n    return ( \n        <Grid>\n            <Grid.Row stretched>\n                <Grid.Column stretched>\n                    <Header textAlign='center' as='h2'>\n                        <Header.Content>\n                            { job ? job.name : \"[JOB NAME]\"}\n                            <Header.Subheader>({pipeline ? pipeline.name : \"[PIPELINE NAME]\"})</Header.Subheader>\n                        </Header.Content>\n                    </Header>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n                <Grid.Column stretched textAlign='center'>\n                {\n                    job.started ? (\n                        <div>\n                            <Header textAlign='center' as='h5'>Progress:</Header>\n                            <Circle \n                                style={{textAlign:\"center\"}}\n                                progress={(100 * job.completed_tasks/job.task_count).toFixed(2)}\n                            />\n                        </div>\n                    ) : (\n                        <div style={{margin:'auto'}} onClick={() => {\n                            let updatedObject = {id: job.id, queued: true};\n                            handleUpdateJob(updatedObject);\n                        }}>\n                            <Header textAlign='center' as='h4' style={{cursor: 'pointer'}}>\n                                <Icon size='big' style={{margin: 'auto'}} name='video play'/>\n                                Start\n                            </Header>   \n                        </div>\n                    )\n                }\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column textAlign='center'>\n                    <Header textAlign='center' as='h5'>Status:</Header>\n                    \n                    {job.queued ? <Label color='green' size='tiny'>Queued</Label> : <div/>}  \n                    {job.started & !job.finished ? <Label color='blue' size='tiny'>Running...</Label> : <div/>}\n                    {job.error ? <Label color='red' size='tiny'>ERROR</Label> : <div/>}  \n                    {job.finished ? <Label color='green' size='tiny'>Finished</Label> : <div/>}  \n                </Grid.Column>\n                <Grid.Column textAlign='center'>\n                    <Header textAlign='center' as='h5'>Notified Email:</Header>\n                    {job.notification_email ? \n                        <Label color='green' size='tiny'>{job.notification_email}</Label> : \n                        <Label color='grey' size='tiny'>None Provided</Label>}  \n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n                <Grid.Column stretched textAlign='center'>\n                    <Message size='tiny' style={{overflowWrap:\"break-word\"}}>\n                        <Message.Content>\n                        <Message.Header as='h6'>State:</Message.Header>\n                            {job.status}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>                \n    );\n}  ","import React from 'react';\nimport { \n    Segment,\n    Grid,\n    Divider,\n    Header,\n    Icon,\n    Button\n} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport { JobControl } from './Jobs/JobControl';\n\nexport const JobResult = (props) => {\n    \n    const {results, handleDownloadResult} = props;\n    let result = results ? _.find(results.items, {type:\"JOB\"}) : null;\n\n    if (result) {\n        return(\n            <div>\n                <Header icon>\n                    <Icon name='file text' />\n                    Download Results \n                </Header>\n                <Button onClick={() => handleDownloadResult(result.id)} primary>Download</Button>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div>\n                <Header icon>\n                    <Icon name='x' />\n                    No Results Yet...\n                </Header>\n                <Button primary disabled>Download</Button>\n            </div>\n        );\n    }\n}\n\nexport const JobStatusStep = (props) => {\n    \n    const {results, selectedJob, pipelines, handleUpdateJob, handleDownloadResult} = props;\n\n    return (\n        <Segment placeholder style={{width:'100%', height:'100%', backgroundColor:'#f3f4f5'}}>\n            <Grid columns={2} stackable textAlign='center'>\n                <Divider vertical>Result:</Divider>\n                <Grid.Row verticalAlign='middle'>\n                    <Grid.Column>\n                        <JobControl\n                            job={selectedJob}\n                            pipeline={pipelines.selectedPipeline}\n                            handleUpdateJob={handleUpdateJob}\n                        />\n                    </Grid.Column>\n                    <Grid.Column>\n                        <JobResult results={results} handleDownloadResult={handleDownloadResult}/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Segment>\n    );\n}","import React from 'react';\nimport { \n    Segment\n} from 'semantic-ui-react';\nimport {\n    newJob_Schema,\n    newJob_Ui_Schema,\n} from '../Forms/FormSchemas';\nimport Form from \"@rjsf/semantic-ui\";\n\nexport const JobDetailsStep = (props) => {\n    \n    const {name, notification_email, handleJobFormChange} = props;\n\n    return (\n        <Segment style={{width:'100%', height:'100%', overflowY: 'scroll', backgroundColor:'#f3f4f5'}}>\n            <Form \n                schema={newJob_Schema}\n                uiSchema={newJob_Ui_Schema}\n                onChange={(args) => handleJobFormChange(args.formData)}\n                formData={{name, notification_email}}\n            >\n                <></>\n            </Form>\n        </Segment>\n    );\n}","import React from 'react'\nimport { Label } from 'semantic-ui-react'\n\nconst SupportedFileTypes = (props) => {\n    let labels = <></>;\n    if (props.extensions.length > 0) {\n        labels = props.extensions.map(ext => <Label color='grey' key={`${ext}`} size='tiny'>{ext}</Label>);\n    }\n    else{\n        labels = [<Label key='Nothing' color='yellow' size='tiny'>No File Type Restrictions</Label>];\n    }\n    return (\n    <div style={{padding:'5px'}}>\n        {labels}\n    </div>);\n}\n\nexport default SupportedFileTypes;","import React from 'react'\nimport { Card } from 'semantic-ui-react';\nimport SupportedFileTypes from '../Shared/SupportedFileTypes';\n\n\nexport const PipelineCard = (props) => {\n    \n    let {pipeline, selected, maxLength} = props;\n\n    // Parse the file type json from the string stored in the db\n    let fileTypes = [];\n    try {\n    fileTypes = JSON.parse(props.pipeline.supported_files).supported_files;\n    } catch (e) {}\n\n    let description = pipeline.description !== \"\" ? \n                        pipeline.description : \n                        `There appears to be no description for this analysis. ` + \n                        `Contact the author at ${pipeline.owner_email} for more information.`; \n\n    console.log(\"Description length: \", description.length);\n\n    return (\n        <Card \n            fluid\n            style={ props.selectedPipelineId===pipeline.id ? {backgroundColor: '#2185d0'} : {}}\n            onClick={() => props.handleSelectPipeline(pipeline.id)}\n        >\n            <Card.Content>\n                <Card.Header>{pipeline.name}</Card.Header>\n                <Card.Meta><span>Author: {pipeline.owner}</span></Card.Meta>\n                <Card.Description>\n                    {description}\n                </Card.Description>\n                <Card.Meta>\n                    <SupportedFileTypes extensions={fileTypes}/>\n                </Card.Meta>\n            </Card.Content>\n        </Card>\n    );\n}\n\n","import React from 'react'\nimport { Item, Placeholder } from 'semantic-ui-react';\nimport SupportedFileTypes from './SupportedFileTypes';\n\nexport const NoResultsItem = () => {\n    \n    return(\n        <Item key='No_Result'>\n            <Item.Image src='/images/wireframe/image.png' />\n            <Item.Content>\n                <Item.Header as='a'>No Matching Pipelines</Item.Header>\n                <Item.Meta>\n                    <Placeholder.Line />\n                </Item.Meta>\n                <Item.Description>\n                    <Placeholder fluid>\n                        <Placeholder.Header image>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder.Header>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                </Item.Description>\n                <Item.Extra>\n                    <SupportedFileTypes extensions={[]}/>\n                </Item.Extra>\n            </Item.Content>\n        </Item>\n    );\n}\n\n","import React from 'react'\nimport { \n    Card, \n    Segment,\n    Pagination,\n    Dimmer,\n    Loader,\n    Form,\n    Icon\n} from 'semantic-ui-react';\nimport { PipelineCard } from './PipelineCard';\nimport { NoResultsItem } from '../Shared/NoResultsItem';\n\nexport const PipelineView = (props) => {\n    \n    const {pipelines} = props;\n    \n    let items = [];\n    if (pipelines.items.length > 0) {\n        for (let count = 0; count < pipelines.items.length; count++) {\n            items.push(<PipelineCard \n                            key={count}\n                            handleSelectPipeline={props.handleSelectPipeline}\n                            pipeline={pipelines.items[count]}\n                            maxLength={50}\n                            selectedPipelineId={props.pipelines.selectedPipelineId}\n                        />);\n        }\n    }\n    else {\n        items.push(<NoResultsItem/>);\n    }\n    \n    return (\n        <Segment style={{width:'100%', height:'100%', backgroundColor:'#f3f4f5'}}>\n            <div \n                style={{\n                display:'flex',\n                flexDirection:'column',\n                justifyContent:'space-between',\n                alignItems:'center', \n                height: '100%',\n                width: '100%'\n            }}>\n                <Dimmer active={pipelines.loading} inverted>\n                    <Loader inverted>Loading...</Loader>\n                </Dimmer>\n                <div style={{\n                    display:'flex',\n                    flexDirection:'row',\n                    justifyContent:'flex-end',\n                    width: '100%'\n                }}>\n                    <div style={{width:'25vw', height:'10%'}}>\n                        <Form onSubmit={() => props.refreshPipelines()}>\n                            <Form.Input\n                                icon={<Icon name='search' inverted circular link />}\n                                placeholder='Search...'\n                                onChange={(data)=> props.handleSetPipelineSearchString(data.target.value)}\n                                value={pipelines.pipelineSearchText}\n                            />\n                        </Form>\n                    </div>\n                </div>\n                <Segment style={{height:'80%', width:'100%', overflowY:'scroll'}}>\n                    <Card.Group itemsPerRow={2} style={{width:'100%'}}>\n                        {items}\n                    </Card.Group>\n                </Segment>\n                <Pagination\n                    style={{height:'10%'}}\n                    activePage={pipelines.selectedPage}\n                    onPageChange={(e, { activePage }) => console.log(\"Page change: \", activePage)}\n                    totalPages={pipelines.pages}\n                />\n            </div>\n        </Segment>\n    );\n}","import React from 'react';\nimport { \n    Segment\n} from 'semantic-ui-react';\nimport { DocumentList } from '../Documents/DocumentList';\n\nexport const DocumentSelectionStep = (props) => {\n    \n    const {documents, onDelete, onUpload, onDownload} = props;\n\n    return (\n        <Segment style={{width:'100%', height:'100%', backgroundColor:'#f3f4f5'}}>\n            <DocumentList\n                documents={documents.items}\n                page={documents.selectedPage}\n                pages={documents.pages}\n                onDelete={onDelete}\n                onDownload={onDownload}\n                onUpload={onUpload}\n                handleSelectDocumentPage={props.handleSelectDocumentPage}\n            />\n        </Segment>\n    );\n}","import React from 'react'\nimport { \n    Step,\n    Icon, \n    Segment,\n    Button\n} from 'semantic-ui-react';\nimport { JobStatusStep } from '../LawyerUI/JobStatusStep';\nimport { JobDetailsStep } from './JobDetailsStep';\nimport { PipelineView } from '../Pipelines/PipelineView';\nimport { DocumentSelectionStep } from './DocumentSelectionStep';\nimport { VerticallyCenteredDiv, HorizontallyCenteredDiv } from '../Shared/Wrappers';\n\nimport _ from 'lodash';\n\nexport const totalSteps = 4;\n \nfunction NavButtons(props) {\n    \n    const { step } = props;\n\n    let prevButton = <></>;\n    let nextButton = <></>;\n\n    if (step === 0) {\n        \n        prevButton = (\n            <Button\n                primary\n                icon\n                labelPosition='left'\n                onClick={props.reverseStep}\n                style={{width:'10vw'}}\n            >\n                Home\n                <Icon name='home' />\n            </Button>\n        );\n\n        nextButton = (\n            <Button\n                icon\n                positive\n                labelPosition='right'\n                onClick={props.advanceStep}\n                style={{width:'10vw'}}\n            >\n                Next\n                <Icon name='right arrow' />\n            </Button>\n        );\n    } \n    if (step === 1) {\n        \n        prevButton = \n        (<Button\n            icon\n            labelPosition='left'\n            onClick={props.reverseStep}\n            style={{width:'10vw'}}\n        >\n            Back\n            <Icon name='left arrow' />\n        </Button>);\n\n        nextButton = (\n            <Button\n                icon\n                positive\n                labelPosition='right'\n                onClick={props.advanceStep}\n                style={{width:'10vw'}}\n            >\n                Next\n                <Icon name='right arrow' />\n            </Button>\n        );\n    }\n    if (step === 2) {\n        \n        prevButton = \n        (<Button\n            disabled\n            icon\n            labelPosition='left'\n            onClick={props.reverseStep}\n            style={{width:'10vw'}}\n        >\n            Back\n            <Icon name='left arrow' />\n        </Button>);\n\n        nextButton = (\n            <Button\n                icon\n                positive\n                labelPosition='right'\n                onClick={props.advanceStep}\n                style={{width:'10vw'}}\n            >\n                Start\n                <Icon name='play circle outline' />\n            </Button>\n        );\n    }\n\n    if (step===3) {\n        prevButton = \n        (<Button\n            disabled\n            icon\n            labelPosition='left'\n            onClick={props.reverseStep}\n            style={{width:'10vw'}}\n        >\n            Back\n            <Icon name='left arrow' />\n        </Button>);\n\n        nextButton = \n        (<Button\n            primary\n            icon\n            labelPosition='right'\n            onClick={props.advanceStep}\n            style={{width:'10vw'}}\n        >\n            Home\n            <Icon name='home' />\n        </Button>);\n    }\n        \n    return (\n        <Button.Group>\n            {prevButton}\n            <Button.Or />\n            {nextButton}\n        </Button.Group>\n    );\n}\n\nfunction StepDisplay(props) {\n    return (\n        <Step.Group style={{width:'100%'}}>\n            <Step active={props.step===0}>\n                <Icon name='shuffle' />\n                <Step.Content>\n                    <Step.Title>Pipeline</Step.Title>\n                    <Step.Description>Choose Analysis Type</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step active={props.step===1}>\n                <Icon name='briefcase' />\n                <Step.Content>\n                    <Step.Title>Job Settings</Step.Title>\n                    <Step.Description>Job Name, Notifications, etc.</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step active={props.step===2}>\n                <Icon name='file text outline' />\n                <Step.Content>\n                    <Step.Title>Documents</Step.Title>\n                    <Step.Description>Upload Your Documents</Step.Description>\n                </Step.Content>\n            </Step>\n            <Step active={props.step===3}>\n                <Icon name='play' />\n                <Step.Content>\n                    <Step.Title>Start</Step.Title>\n                    <Step.Description>Launch Your Job</Step.Description>\n                </Step.Content> \n            </Step>\n        </Step.Group>\n    );\n}\n\nexport const JobWizardSegment = (props) => {\n    \n    const {pipelines, documents, jobs, results} = props;\n    \n    let selectedJob = _.find(jobs.items, {id: jobs.selectedJobId});\n\n    let steps={\n        0: <PipelineView \n            pipelines={pipelines}\n            refreshPipelines={props.refreshPipelines}\n            handleSelectPipeline={props.handleSelectPipeline}\n            handleSetPipelineSearchString ={props.handleSetPipelineSearchString}\n            handlePipelinePageChange = {props.handlePipelinePageChange}/>,\n        1: <JobDetailsStep\n            handleJobFormChange={props.handleJobFormChange}\n            name={props.name}\n            notification_email={props.notification_email}/>,\n        2: <DocumentSelectionStep\n            documents={documents}\n            onDelete={props.handleDeleteDocument}\n            onDownload={props.handleDownloadDocument}\n            onUpload={props.handleUploadDocument}\n            handleSelectDocumentPage={props.handleSelectDocumentPage}\n            pages={document.pages}/>,\n        3: <JobStatusStep\n            handleUpdateJob = {props.handleUpdateJob}\n            handleDownloadResult = {props.handleDownloadResult}\n            selectedJob={selectedJob}\n            pipelines={pipelines}\n            results={results}/>\n        };\n\n    return (\n        <VerticallyCenteredDiv>\n            <HorizontallyCenteredDiv>\n                <Segment style={{width: '75vw', height:'100%'}}>\n                    <div style={{\n                        display:'flex',\n                        flexDirection:'column',\n                        justifyContent:'space-between',\n                        alignItems:'center', \n                        height: '100%',\n                        width: '100%'\n                    }}>\n                        <div style={{width:'100%', height: '10%', marginBottom: '10px'}}>\n                            <StepDisplay step={props.step}/>\n                        </div>\n                        <div style={{height: '80%', width: '100%', flexGrow: 4, marginBottom: '10px'}}>\n                            {steps[props.step] ? steps[props.step] : <></>}\n                        </div>\n                        <div style={{\n                            display:'flex',\n                            flexDirection:'row',\n                            justifyContent:'flex-end',\n                            alignItems:'center', \n                            width: '100%',\n                            height: '10%'\n                        }}>\n                            <NavButtons\n                                step={props.step}\n                                advanceStep={props.advanceStep}\n                                reverseStep={props.reverseStep}\n                            />\n                        </div>\n                    </div>\n                </Segment>\n            </HorizontallyCenteredDiv>\n        </VerticallyCenteredDiv>    \n    );\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    Dropdown,\n    Grid,\n    Header,\n    Icon,\n    Image\n} from 'semantic-ui-react';\n\nimport { ResultsModal } from '../Components/LawyerUI/ResultsModal';\nimport { ResultsSegment } from '../Components/LawyerUI/ResultsSegment';\nimport { LandingSegment } from '../Components/LawyerUI/LandingSegment';\nimport { JobWizardSegment } from '../Components/LawyerUI/JobWizardSegment';\n\nimport {\n  fetchJobs,\n  createJob,\n  deleteJob,\n  updateJob,\n  selectJob,\n  unselectJob,\n  selectJobPage,\n  refreshSelectedJob,\n  setJobSearchString,\n  downloadJobResultsById\n} from '../Redux/job_actions';\n\nimport {\n  tryLogout,\n} from '../Redux/auth_actions';\n\nimport {\n  clearDocuments,\n  clearResults,\n  downloadSelectedResult,\n  fetchSummaryResultsForJob,\n  uploadDocument,\n  selectDocumentPage,\n  fetchDocuments,\n  deleteDocument,\n  downloadSelectedDocument,\n} from '../Redux/actions';\n\nimport { \n  setPipelineSearchString,\n  selectPipelinePage,\n  fetchPipelines,\n  clearPipelines,\n  selectPipeline,\n  unselectPipeline, \n} from '../Redux/pipeline_actions';\n\nimport _ from 'lodash';\n\nclass LawyerHome extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      step:0,\n      view:'LANDING',\n      name:'',\n      notification_email:'',\n      timer:null,\n      showResultModal:false\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(fetchPipelines());\n    let timer = setInterval(this.tick, 2000);\n    this.setState({timer});\n  }\n\n  componentWillUnmount() {\n      clearInterval(this.state.timer);\n  }\n\n  tick = () => {\n\n    console.log(\"Tick\");\n\n    //On the document step, refresh docs to show updates to extract.\n    if(this.state.step === 2) {\n      this.handleRefreshDocuments();\n    } \n\n    //On the job step (final step), refresh results and job stat\n    if (this.state.step === 3 && this.props.jobs.selectedJobId!==-1) {\n      this.handleRefreshSelectedJob();\n      this.handleFetchSummaryResults();\n    }\n  }\n\n  toggleResultModal = () => {\n    this.setState({\n      showResultModal: !this.state.showResultModal\n    });\n  }\n\n  handleRefreshSelectedJob = () => {\n    this.props.dispatch(refreshSelectedJob());\n  }\n\n  handleJobFormChange = (obj) => {\n    this.setState({\n      ...obj\n    });\n  }\n\n  setHomeView = () => {\n    Promise.all([\n      this.props.dispatch(setJobSearchString(\"\")),\n      this.props.dispatch(clearResults()),\n      this.props.dispatch(clearDocuments()),\n      this.props.dispatch(unselectJob())\n    ]).then(() => {\n      this.props.dispatch(fetchJobs()).then(() => {\n        this.setState({view:'LANDING'});\n      });\n    });\n  }\n\n  setWizardView = () => {\n    this.setState({view:'WIZARD'});\n  }\n\n  setResultView = () => {\n    this.props.dispatch(fetchJobs()).then(() => {\n      this.setState({view:'RESULTS'});\n    });\n  }\n\n  setStep = (step) => {\n    this.setState({step});\n  }\n\n  advanceStep = () => {\n    if (this.state.step===0){\n      this.setStep(this.state.step + 1);\n    }\n    else if (this.state.step===1) {\n      this.handleCreateJob({\n        name: this.state.name,\n        notification_email: this.state.notification_email,\n        pipeline: this.props.pipelines.selectedPipelineId\n      });\n    }\n    else if (this.state.step===2) {\n      this.handleStartSelectedJob();\n      this.setStep(this.state.step + 1);\n    }\n    else if (this.state.step===3) {\n      this.handleStartWizardOver()\n    }\n  }\n\n  reverseStep = () => {\n    if (this.state.step===0){\n      this.setHomeView();\n    }\n    else {\n      this.setStep(this.state.step - 1);\n    }\n  }\n\n  //Create a new job with fields in the jobObj. Then advance the wizard step to doc section.\n  handleCreateJob = (jobObj) => {\n    this.props.dispatch(createJob(jobObj)).then((response) => {\n      this.props.dispatch(selectJob(response.id)).then(() => {\n        this.setStep(2);\n      });\n    });\n  }\n\n  handleDownloadResult = (resultId) => {\n    this.props.dispatch(downloadSelectedResult(resultId));\n  }\n\n  handleFetchSummaryResults = () => {\n    this.props.dispatch(fetchSummaryResultsForJob(this.props.jobs.selectedJobId));\n  }\n\n  handleRefreshDocuments = () => {\n    this.props.dispatch(fetchDocuments());\n  }\n\n  handleUploadDocument = (file) => {\n    this.props.dispatch(uploadDocument(file)).then(() => {\n      this.props.dispatch(fetchDocuments());\n    });\n  }\n\n  handleDeleteDocument = (docId) => {\n    this.props.dispatch(deleteDocument(docId));\n  }\n\n  handleDownloadDocument = (docId) => {\n    this.props.dispatch(downloadSelectedDocument(docId));\n  }\n\n  handleSelectDocumentPage = (pageNo) => {\n    this.props.dispatch(selectDocumentPage(pageNo)).then(() => {\n      this.props.dispatch(fetchDocuments());\n    });\n  }\n\n  // Set the pipeline name filter\n  handleSetPipelineSearchString = (pipelineSearchString) => {\n    this.props.dispatch(setPipelineSearchString(pipelineSearchString));\n  }\n  \n  handleSelectPipeline = (pipelineId) => {\n    this.props.dispatch(selectPipeline(pipelineId));\n  }\n\n  handleSelectJob = (jobId) => {\n    this.props.dispatch(selectJob(jobId)).then(() => {\n      console.log(\"Toggle modal!\");\n      this.toggleResultModal();\n    });\n  }\n\n  // Change the page # in the redux store and then refetch pipelines (pagination is injected to url\n  // request automatically)\n  handlePipelinePageChange = (pageNo) => {\n    this.props.dispatch(selectPipelinePage(pageNo)).then(() => {\n      this.props.dispatch(fetchPipelines());\n    });\n  }\n\n  refreshPipelines = () => {\n    this.props.dispatch(fetchPipelines()); \n  }\n\n  handleUpdateJob = (updatedJobObj) => {\n    this.props.dispatch(updateJob(updatedJobObj));\n  }\n\n  handleDeleteJob = (jobId) => {\n    this.props.dispatch(deleteJob(jobId)).then(() => {\n      this.props.dispatch(clearResults());\n      this.props.dispatch(clearDocuments());\n      this.props.dispatch(unselectJob());\n    }).then(() => {\n      this.props.dispatch(fetchJobs());\n    });\n  }\n\n  // Fetch jobs matching the selected page and the given filter (if any)\n  handleFetchJobs = () => {\n    this.props.dispatch(fetchJobs());\n  }\n\n  handleLandingJobSearch = () => {\n    this.props.dispatch(fetchJobs()).then(() => {\n      this.setResultView();\n    });\n  }\n  \n  // Set the job search filter which is applied automatically when fetchFilteredJobs is called\n  handleSetJobsSearchString = (searchString) => {\n    this.props.dispatch(setJobSearchString(searchString));\n  }\n\n  // Set the selected job page. Semantic UI pagination keeps track of what options are valid so\n  // so no validation on this. \n  handleSelectJobPage = (selectedPage) => {\n    this.props.dispatch(selectJobPage(selectedPage)).then(() => {\n      this.props.dispatch(fetchJobs());\n    });\n  }\n\n  handleStartSelectedJob = () => {\n    this.handleUpdateJob({id: this.props.jobs.selectedJobId, queued: true});\n  }\n\n  handleDownloadJob = (jobId) => {\n    this.props.dispatch(downloadJobResultsById(jobId));\n  }\n\n  handleStartWizardOver = () => {\n    // Log out the current user (also clears selected job + associated docs and results)\n    Promise.all([\n      this.props.dispatch(clearDocuments()),\n      this.props.dispatch(clearResults()),\n      this.props.dispatch(unselectJob()),\n      this.props.dispatch(unselectPipeline()),\n    ]).then(() => {\n      this.setHomeView();\n      this.setStep(0);\n    });\n  }\n\n  // Log out the current user (also clears selected job + associated docs and results)\n  handleLogout = () => {\n    Promise.all([\n      this.props.dispatch(clearDocuments()),\n      this.props.dispatch(clearResults()),\n      this.props.dispatch(unselectJob()),\n      this.props.dispatch(clearPipelines()),\n      this.props.dispatch(unselectPipeline()),\n    ]).then(() => {\n      this.props.dispatch(tryLogout());\n    });\n  }\n\n  render() {\n\n    const { pipelines, documents, jobs, results, auth } = this.props;\n\n    let selectedJob = null;\n    try {\n        selectedJob = _.find(jobs.items, {id: jobs.selectedJobId})\n    } catch {}\n\n    let view = <></>;\n    if(this.state.view==='WIZARD') {\n      view = <JobWizardSegment\n                pipelines={pipelines}\n                jobs={jobs}\n                documents={documents}\n                results={results}\n                refreshPipelines={this.refreshPipelines}\n                handleUpdateJob={this.handleUpdateJob}\n                handleSetPipelineSearchString ={this.handleSetPipelineSearchString}\n                handleSelectPipeline={this.handleSelectPipeline}\n                handlePipelinePageChange ={this.handlePipelinePageChange}\n                handleSelectDocumentPage={this.handleSelectDocumentPage}\n                handleDeleteDocument={this.handleDeleteDocument}\n                handleUploadDocument={this.handleUploadDocument}\n                handleDownloadDocument={this.handleDownloadDocument}\n                handleDownloadResult={this.handleDownloadResult}\n                step={this.state.step}\n                advanceStep={this.advanceStep}\n                reverseStep={this.reverseStep}\n                handleJobFormChange={this.handleJobFormChange}\n                name={this.state.name}\n                notification_email={this.state.notification_email}\n              />;\n    }\n    if(this.state.view==='LANDING') {\n      view = <LandingSegment\n                jobs={jobs}\n                setWizardView={this.setWizardView}\n                setResultView={this.setResultView}\n                handleSetJobsSearchString={this.handleSetJobsSearchString}\n                handleLandingJobSearch={this.handleLandingJobSearch}\n            />;\n    }\n    if(this.state.view==='RESULTS'){\n      view = <ResultsSegment\n                jobs={jobs}\n                handleFetchJobs={this.handleFetchJobs}\n                handleSetJobsSearchString={this.handleSetJobsSearchString}\n                handleSelectJobPage={this.handleSelectJobPage}\n                handleDownloadJob={this.handleDownloadJob}\n                handleDeleteJob={this.handleDeleteJob}\n                handleUpdateJob={this.handleUpdateJob}\n                handleSelectJob={this.handleSelectJob}\n                setHomeView={this.setHomeView}\n            />;\n    }\n\n    return (\n        <div style={{height:'100%', width:'100%'}}>\n          <ResultsModal \n            jobs={jobs}\n            selectedJob={selectedJob}\n            visible={this.state.showResultModal}\n            toggleModal={this.toggleResultModal}\n            handleDownloadJob={this.handleDownloadJob}\n            handleUpdateJob={this.handleUpdateJob}\n          />\n          <Grid>\n            <Grid.Row style={{height:\"10vh\"}}>\n                <Grid.Column verticalAlign='middle' textAlign='right'>\n                  <div style={\n                    {\n                      display:'flex',\n                      flexDirection:'row',\n                      justifyContent:'flex-end',\n                      alignItems:'stretch', \n                      height: '100%',\n                      width: '100%'\n                    }\n                  }>\n                    <div style={{marginRight:'1vw'}}>\n                      <Header as='h3'>\n                        <Icon name='user circle outline' />\n                        <Header.Content style={{padding:'0px', paddingLeft:'5px'}}>\n                          <Dropdown\n                              item\n                              simple\n                              icon={<Icon style={{marginLeft:'5px'}} name='dropdown'/>}\n                              text={`User: ${auth.username}`}\n                              style={{margin:'0px', padding:'0px'}} \n                              header='Logout'>\n                              <Dropdown.Menu>\n                                <Dropdown.Item \n                                  text='Logout'\n                                  onClick={this.handleLogout}\n                                  icon={<Icon name='log out'/>}/>\n                              </Dropdown.Menu>\n                          </Dropdown>\n                        </Header.Content>\n                      </Header>\n                    </div>\n                  </div>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row centered stretched style={{width:'100%', height:'80vh'}}>\n              {view}                  \n            </Grid.Row>\n            <Grid.Row style={{height:\"10vh\"}}>\n                <Grid.Column verticalAlign='middle' textAlign='right'>\n                </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <div style={{\n            zIndex: 9,\n            position: 'absolute',\n            bottom: '2vh',\n            right: '2vw'\n\n          }}>\n              <Image style={{height:'8vh'}} src='/gordium_128_name_left.png'/>\n          </div>\n        </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n\n  const {\n    jobs,\n    results,\n    documents,\n    pipelines,\n    scripts,\n    pipelinesteps,\n    auth } = state;\n\n  return {\n    jobs,\n    results,\n    scripts,\n    pipelinesteps,\n    documents,\n    pipelines,\n    auth\n  }\n}\n\nexport default connect(mapStateToProps)(LawyerHome)","import React from 'react'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom'\n\nclass RoleProtectedRoute extends React.Component {\n\n    render() {\n        const {componentOptions} = this.props;\n        const {role} = this.props.auth.user;\n        const {loggedIn} = this.props.auth;\n\n        console.log(\"Role Protected Route: \", this.props);\n        \n        let Component = componentOptions[role];\n       \n        return loggedIn ? (\n            <Component {...this.props}/>\n        ) : (\n            <Redirect to={{ pathname: '/login' }} />\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n\n    const {\n      application,\n      auth \n    } = state;\n  \n    return {\n      application,\n      auth\n    }\n  }\n  \nexport default connect(mapStateToProps)(RoleProtectedRoute);","import React, {Component} from 'react';\nimport { \n    Label,\n    Modal,\n    Button,\n    Grid, \n    Divider,\n    Segment,\n    Header,\n    Icon,\n    Form\n} from 'semantic-ui-react';\n\nconst RecoverForms = (state, setState, selectUser, selectPassword, handleSubmit, handleChange) => {\n\n    if (state.type===\"PASSWORD\") {\n        return (\n            <Form onSubmit={handleSubmit}>\n                <div style={{\n                        display: 'flex',\n                        flexDirection:'row',\n                        justifyContent: 'center',\n                        alignItems:'center'\n                    }}>\n                    <div>\n                        <Header as='h2' icon>\n                            <Icon name='lock open' />\n                            Reset Password\n                            <Header.Subheader>\n                            Enter your username. If it's valid, we'll email a temporary password to you.\n                            </Header.Subheader>\n                        </Header>\n                    </div>\n                </div>\n                <Form.Input\n                    label='Username:'\n                    placeholder='Username:'\n                    name='username'\n                    value={state.username}\n                    onChange={handleChange}\n                />\n                <Form.Button content='Submit' />\n            </Form>\n        );\n    }\n    else if (state.type===\"USERNAME\") {\n        return (\n            <Form onSubmit={handleSubmit}>\n                 <div style={{\n                        display: 'flex',\n                        flexDirection:'row',\n                        justifyContent: 'center',\n                        alignItems:'center'\n                    }}>\n                    <div>\n                        <Header as='h2' icon>\n                            <Icon name='user circle outline' />\n                            Recover Username\n                            <Header.Subheader>\n                            Enter your eMail. If it's valid, we'll send you an e-mail with your username.\n                            </Header.Subheader>\n                        </Header>\n                    </div>\n                </div>\n                <Form.Input\n                    label='E-Mail'\n                    placeholder='E-Mail'\n                    name='email'\n                    value={state.password}\n                    onChange={handleChange}    \n                />\n                <Form.Button content='Submit' />\n            </Form>\n        )\n    }\n    else {\n        return(\n            <Segment placeholder>\n                <Grid columns={2} stackable textAlign='center'>\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                        <Grid.Column>\n                            <Header icon>\n                                <Icon name='user circle outline' />\n                            </Header>\n                            <Button primary onClick={selectUser}>Forgot Username</Button>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <Header icon>\n                                <Icon name='lock open'/>  \n                            </Header>\n                            <Button primary onClick={selectPassword}>Forgot Password</Button>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        );\n    }\n}\n\nconst defaultProps = {\n    username:\"\",\n    email:\"\",\n    type: null,\n    error: false,\n    success: false\n};\n\n//This is a pop-up modal that lets you create a new job.\nexport default class RecoverAccountModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state=defaultProps;\n    }\n    \n    resetState = () => {\n        this.setState(defaultProps);\n        this.props.toggle();\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n\n        const { username, email, type } = this.state\n        const { handleRecoverUsername, handleResetPassword } = this.props;\n\n        if (type===\"PASSWORD\") {\n            console.log(\"Reset password for username:\", username);\n            handleResetPassword(username); \n        }\n        else if (type===\"USERNAME\") {\n            console.log(\"Send username to:\", email);\n            handleRecoverUsername(email);\n        }\n        else {\n            this.setState({\n                error: true\n            });\n            this.props.toggle();\n        }\n        setTimeout(this.resetState, 2000);\n    }\n\n    selectPassword = () => {\n        this.setState({\n            type: \"PASSWORD\"\n        });\n    }\n\n    selectUser = () => {\n        this.setState({\n            type: \"USERNAME\"\n        });\n    }\n\n    toggleModal = () => {\n        this.props.toggle();\n        this.setState(defaultProps);\n    }\n\n    render() {\n        return(\n            <Modal open={this.props.visible} size='mini'>\n                <Label \n                    corner='right'\n                    color='grey'\n                    icon='cancel'\n                    onClick={()=>this.toggleModal()}\n                />\n                <Modal.Content>\n                   {RecoverForms(this.state, this.setState, this.selectUser, this.selectPassword, this.handleSubmit, this.handleChange)} \n                </Modal.Content>\n            </Modal>\n          );\n    }\n}\n","import React, { Component } from 'react';\nimport { Button, Form, Header, Image, Message, Segment } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\n\nimport {\n  tryLogin, \n  tryLogout,\n  getUserDetails,\n  recoverUsername,\n  resetPassword\n} from '../Redux/auth_actions';\n\nimport {\n  unselectJob\n} from '../Redux/job_actions';\n\nimport {\n  clearSelectedPipelineNode,\n} from '../Redux/node_actions';\n\nimport {\n  clearPipelines,\n  unselectPipeline,\n} from '../Redux/pipeline_actions';\n\nimport {\n  clearDocuments,\n  clearResults,\n  clearStats,\n} from '../Redux/actions';\n\nimport RecoverAccountModal from '../Components/Users/RecoverAccountModal';\n\nconst backgroundImage = require('../assets/background2.jpg');\nconst divStyle = {\n  width: '100vw',\n  height: '102vh',\n  backgroundImage: `url(${backgroundImage})`,\n  backgroundSize: 'cover'\n};\n\n\nclass Login extends Component {\n\n  // Try login with provider username and password\n  handleLoginClick = (username, password) => {\n    this.props.dispatch(tryLogin(username, password)).then((loggedIn) => {\n      if(loggedIn) {\n        this.props.dispatch(getUserDetails()).then((fetchedUserDetails) => {\n          if (fetchedUserDetails) {\n            this.props.history.push(\"/home\");\n          }\n          else{\n            this.handleLogout();\n          }\n        });\n      }\n    });\n  }\n\n  handleRecoverUsername = (email) => {\n    this.props.dispatch(recoverUsername(email));\n  }\n\n  handleResetPassword = (username) => {\n    this.props.dispatch(resetPassword(username));\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        userNameValue: \"Username...\",\n        passwordValue: \"Password...\",\n        showRecoveryModal: false\n    };\n  }\n\n  clear = () => {\n    this.setState(\n        {\n            userNameValue: \"Username...\",\n            passwordValue: \"Password...\"\n        }\n    );\n  }\n\n  handleKeyPress = (e) => {\n    if (e.charCode === 13) {\n      // Prevent the default action to stop scrolling when space is pressed\n      e.preventDefault()\n      this.tryLogin();\n    }\n  }\n\n  toggleRecoveryModal = () => {\n    this.setState({\n      showRecoveryModal: !this.state.showRecoveryModal\n    });\n  }\n\n  tryLogin = () => {\n    this.handleLoginClick(this.state.userNameValue, this.state.passwordValue);\n    this.clear();\n  }\n\n  handleLogout = () => {\n    Promise.all([\n      this.props.dispatch(clearDocuments()),\n      this.props.dispatch(clearResults()),\n      this.props.dispatch(clearPipelines()),\n      this.props.dispatch(clearSelectedPipelineNode()),\n      this.props.dispatch(clearStats()),\n      this.props.dispatch(unselectJob()),\n      this.props.dispatch(unselectPipeline())\n    ]).then(() => {\n      this.props.dispatch(tryLogout());\n    });\n  }\n\n  render() {\n\n    return (\n      <div style={divStyle} >\n        <RecoverAccountModal\n          toggle={this.toggleRecoveryModal}\n          visible={this.state.showRecoveryModal}\n          handleRecoverUsername={this.handleRecoverUsername}\n          handleResetPassword={this.handleResetPassword}\n        />\n        <div style={{ \n          display:'flex', \n          flexDirection:'column',\n          justifyContent:'center', \n          alignItems: 'center',\n          alignContent: 'center',\n          height: '100%'\n        }}>\n          <div style={{ \n            display:'flex', \n            flexDirection:'row',\n            justifyContent:'center',\n            width:'100%',\n            marginBottom:'1vh'\n          }}>\n            <div style={{\n              flex:'column',\n              textAlign: 'right',\n              justifyContent:'center',\n              marginLeft:'10%',\n              height: '10%',\n              bottomPadding:'1vh'\n            }}>\n              <Image style={{maxHeight:'100px', height:'10vh'}} src='/gremlin_128.png'/>\n            </div>\n            <div style={{\n              flex:'column',\n              textAlign: 'left',\n              alignSelf:'center',\n              alignItems:'center',\n              alignContent:'center',\n              justifyContent:'center',\n              height:'auto',\n              marginRight:'10%'\n            }}>\n              <div>\n                <Header style={{fontSize:'3em'}}>\n                  GREMLIN\n                  <Header.Subheader style={{fontSize:'.5em'}}>Low-Code Microservices</Header.Subheader>\n                </Header>\n              </div>\n            </div>\n          </div>\n          <div>\n            <Form size='large'>\n              <Segment style={{width:'25vw', maxWidth:'300px'}}>\n                <Header as='h4' textAlign='left'>Please Login:</Header>\n                <Form.Input \n                  fluid\n                  icon='user'\n                  iconPosition='left'\n                  placeholder='Username'\n                  value={this.state.userNameValue}\n                  onChange = {(data) => {this.setState({userNameValue: `${data.target.value}`})}}\n                />\n                <Form.Input\n                  fluid\n                  icon='lock'\n                  iconPosition='left'\n                  placeholder='Password'\n                  type='password'\n                  value={this.state.passwordValue}\n                  onChange = {(data) => {this.setState({passwordValue: `${data.target.value}`})}}\n                />\n                <Button color='teal' fluid size='large' onClick={() => this.tryLogin()}>\n                  Login\n                </Button>\n              </Segment>\n              </Form>\n              <Message>\n                <span \n                  style={{\n                    cursor:\"pointer\",\n                    color:\"blue\",\n                    textDecoration:\"underline\"\n                  }}\n                  onClick={()=>this.toggleRecoveryModal()}\n                >\n                  Forgot\n                </span> your password or username?\n              </Message>\n          </div>\n        </div>\n        <div style={{\n            zIndex: 100,\n            position: 'absolute',\n            bottom: '1vh',\n            right: '1vw'\n          }}>\n            <Image style={{height:'6vh'}} src='/gordium_128_name_left.png'/>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { auth } = state;\n  return {\n    auth\n  }\n}\n\nexport default connect(mapStateToProps)(Login)","import {\n    AbstractDisplacementState,\n    Action,\n    InputType,\n  } from '@projectstorm/react-canvas-core';\n  \n  export default class SelectLinkState extends AbstractDisplacementState {\n    constructor() {\n      super({ name: 'select-link' });\n  \n      this.registerAction(\n        new Action({\n          type: InputType.MOUSE_DOWN,\n          fire: event => {\n            const link = this.engine.getMouseElement(event.event);\n  \n            if (link.isLocked()) {\n              this.eject();\n            }\n  \n            this.engine.getModel().clearSelection();\n            link.setSelected(true);\n          },\n        }),\n      );\n    }\n\n    fireMouseMoved(event) {\n      // do nothing\n    }\n  }","import {\n    State,\n    Action,\n    InputType,\n    SelectingState,\n    DragCanvasState,\n    MoveItemsState,\n  } from '@projectstorm/react-canvas-core';\n  import {\n    PortModel,\n    LinkModel,\n    DragNewLinkState\n  } from '@projectstorm/react-diagrams-core';\n  \n  import SelectLinkState from './SelectLinkState';\n  \n  /**\n   * This class defines custom handlers (called states) to respond to\n   * clicking events on certain elements.\n   */\n  export default class CustomState extends State {\n    constructor() {\n      super({\n        name: 'diagram-states',\n      });\n\n      this.childStates = [new SelectingState()];\n      this.dragCanvas = new DragCanvasState();\n      this.dragNewLink = new DragNewLinkState();\n      this.dragItems = new MoveItemsState();\n  \n      // Prevent \"loose\" links - links where there is there is no end or start node\n      this.dragNewLink.config.allowLooseLinks = false;\n\n      // But this is a custom one!\n     this.selectLink = new SelectLinkState();\n  \n      // Determine what was clicked on\n      this.registerAction(\n        new Action({\n          type: InputType.MOUSE_DOWN,\n          fire: event => {\n            const element = this.engine\n              .getActionEventBus()\n              .getModelForEvent(event);\n  \n            // The canvas was clicked on, transition to the dragging canvas state\n            if (!element) {\n              this.transitionWithEvent(this.dragCanvas, event);\n            }\n            // Initiate dragging a new link\n            else if (element instanceof PortModel) {\n              this.transitionWithEvent(this.dragNewLink, event);\n            }\n            // Link selection <============================================\n            else if (element instanceof LinkModel) {\n              this.transitionWithEvent(this.selectLink, event);\n            }\n            // Move items\n            else {\n              this.transitionWithEvent(this.dragItems, event);\n            }\n          },\n        }),\n      );\n    }\n  }","import {\n  DefaultLinkModel,\n} from '@projectstorm/react-diagrams-defaults';\n\nexport default class GremlinLinkModel extends DefaultLinkModel {\n  constructor(id, options={}) {\n    super({\n      type: 'link',\n      ...options,\n    });\n\n    this.id = id || -1;\n  }\n\n}\n","import { DefaultPortModel } from '@projectstorm/react-diagrams';\nimport GremlinLinkModel from './GremlinLinkModel';\n\nexport class GremlinPortModel extends DefaultPortModel {\n\tcreateLinkModel() {\n\t\treturn new GremlinLinkModel();\n\t}\n}","import { NodeModel } from '@projectstorm/react-diagrams';\nimport { GremlinPortModel } from '../../Links/GremlinPortModel';\n\n/**\n * Example of a custom model using pure javascript\n */\nexport class JSCustomNodeModel extends NodeModel {\n\tconstructor(id=-1, name=\"Unnamed\", options={}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'js-custom-node'\n\t\t});\n\t\tthis.id = id;\n\t\tthis.name = name;\n\n\t\t// setup an in and out port\n\t\tthis.addPort(\n\t\t\tnew GremlinPortModel({\n\t\t\t\tin: true,\n\t\t\t\tname: 'in'\n\t\t\t})\n\t\t);\n\t\tthis.addPort(\n\t\t\tnew GremlinPortModel({\n\t\t\t\tin: false,\n\t\t\t\tname: 'out'\n\t\t\t})\n\t\t);\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tcolor: this.color\n\t\t};\n\t}\n\n\tdeserialize(ob, engine) {\n\t\tsuper.deserialize(ob, engine);\n\t\tthis.color = ob.color;\n\t}\n}\n","import * as React from 'react';\nimport { connect } from \"react-redux\";\nimport { PortWidget } from '@projectstorm/react-diagrams';\nimport { \n\tIcon,\n\tCard,\n\tDimmer,\n\tLoader,\n\tImage,\n\tButton,\n\tLabel\n} from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport { runTestJobToNode } from '../../../../Redux/actions';\nimport { StepStatusRibbons } from '../../../Shared/StatusLabels';\n\n\nclass JSCustomNodeWidget extends React.Component {\n\t\t\n\thandleRunTestJobToNode = (nodeId) => {\n        this.props.dispatch(runTestJobToNode(nodeId));\n    }\n\n\trender() {\n\n\t\tlet cardStyle = {\n\t\t\tdisplay:'flex',\n\t\t\tjustifyContent:'center',\n\t\t\tminWidth:'150px',\n\t\t\twidth:'7.5vw',\n\t\t\tmargin: '0 auto'\n\t\t};\n\n\t\tconst { \n\t\t\tresults, \n\t\t\tscripts, \n\t\t\tpipelinesteps, \n\t\t\tnode,\n\t\t\tapplication,\n\t\t\ttest_job \n\t\t} = this.props;\n\t\tconst { buildMode } = application;\n\n\t\tconst myNode = _.find(pipelinesteps.items, {id: node.id});\n\t\tconst myResult = _.find(results.items, {pipeline_node: node.id, type:\"STEP\"});\n\t\tconst myScript = myNode.script ? _.find(scripts.items, {id: myNode.script}) : null;\n\n\t\tlet loaderObj = <></>;\n\t\tif (myResult) {\n\t\t\tif (myResult.started) {\n\t\t\t\tif (!myResult.finished && !myResult.error) {\n\t\t\t\t\tloaderObj = <Dimmer active inverted><Loader size='medium'>Running...</Loader></Dimmer>;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (pipelinesteps.selectedPipelineStepId===myNode.id)  cardStyle['backgroundColor']='#2185d0';\n\n\t\tif (myNode.type === 'THROUGH_SCRIPT') {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t{ buildMode && test_job.test_job && !test_job.test_job.finished ? \n\t\t\t\t\t\t<div style={{ textAlign: 'right', zIndex:200, position:'absolute', top:'-10px', right:'-10px' }}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tcircular\n\t\t\t\t\t\t\t\tsize='small'\n\t\t\t\t\t\t\t\tcolor='green'\n\t\t\t\t\t\t\t\ticon='play'\n\t\t\t\t\t\t\t\tonClick={() => this.handleRunTestJobToNode(myNode.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: <></>\n\t\t\t\t\t}\n\t\t\t\t\t<div style={{position:'absolute', zIndex:100, top:'-15px', width:'100%' }}>\n\t\t\t\t\t\t<div style={{display:'flex', flexDirection:'row', alignItems:'center', justifyContent:'center'}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('in')}>\n\t\t\t\t\t\t\t\t\t<Icon circular inverted color='blue' name='arrow down'/>\n\t\t\t\t\t\t\t\t</PortWidget>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Card style={cardStyle}>\n\t\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t\t{ loaderObj }\n\t\t\t\t\t\t\t{ myScript ? \n\t\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\t\tfloated='right'\n\t\t\t\t\t\t\t\t\tsize='mini'\n\t\t\t\t\t\t\t\t\tsrc={ myScript.type === 'RUN_ON_JOB' ? 'serial_job.png' : 'parallel_job.png'}\n\t\t\t\t\t\t\t\t/> : <Icon name='cancel'/> \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t<Card.Header>{myNode.name} (<b>ID {myNode.id}</b>)</Card.Header>\n\t\t\t\t\t\t\t<Card.Meta>Script: {myScript ? myScript.human_name : \"N/A\"}</Card.Meta>\n\t\t\t\t\t\t\t<Card.Description><StepStatusRibbons step={myResult}/></Card.Description>\n\t\t\t\t\t\t</Card.Content>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<div style={{position:'absolute', zIndex:100, bottom:'-15px', width:'100%' }}>\n\t\t\t\t\t\t<div style={{display:'flex', flexDirection:'row', alignItems:'center', justifyContent:'center'}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('out')}>\n\t\t\t\t\t\t\t\t\t<Icon circular inverted color='green' name='arrow down'/>\n\t\t\t\t\t\t\t\t</PortWidget>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}  else {\n\n\t\t\t// Currently we only support custom through scripts. Anything else is assumed to be the default (hard-coded)\n\t\t\t// root node. Job status should dictate the\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<div style={{position:'absolute', zIndex:100, top:'-15px', width:'100%' }}>\n\t\t\t\t\t\t<div style={{display:'flex', flexDirection:'row', alignItems:'center', justifyContent:'center'}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('in')}>\n\t\t\t\t\t\t\t\t\t<Icon circular inverted color='blue' name='arrow down'/>\n\t\t\t\t\t\t\t\t</PortWidget>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Card style={cardStyle}>\n\t\t\t\t\t\t<Card.Content>\n\t\t\t\t\t\t\t{ loaderObj }\n\t\t\t\t\t\t\t<Image\n\t\t\t\t\t\t\t\tfloated='right'\n\t\t\t\t\t\t\t\tsize='mini'\n\t\t\t\t\t\t\t\tsrc='start_job.png'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Card.Header>START SCRIPT: Extracter</Card.Header>\n\t\t\t\t\t\t\t<Card.Meta>Script: { myScript ? myScript.human_name : \"N/A\"}</Card.Meta>\n\t\t\t\t\t\t\t<Card.Description><StepStatusRibbons step={myResult}/></Card.Description>\n\t\t\t\t\t\t</Card.Content>\n\t\t\t\t\t</Card>\n\t\t\t\t\t<div style={{position:'absolute', zIndex:100, bottom:'-15px', width:'100%' }}>\n\t\t\t\t\t\t<div style={{display:'flex', flexDirection:'row', alignItems:'center', justifyContent:'center'}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<PortWidget engine={this.props.engine} port={this.props.node.getPort('out')}>\n\t\t\t\t\t\t\t\t\t<Icon circular inverted color='green' name='arrow down'/>\n\t\t\t\t\t\t\t\t</PortWidget>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction mapStateToProps(state) {\n    \n    const {\n\t\tresults,\n\t\tapplication, \n\t\tscripts,\n\t\tpipelinesteps, \n\t\ttest_job\n    } = state;\n  \n    return {\n\t\tresults,\n\t\tapplication,\n        scripts,\n\t\tpipelinesteps,\n\t\ttest_job\n    };\n  }\n\nexport default connect(mapStateToProps)(JSCustomNodeWidget);","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from './reducers'\n\n//import { createLogger } from 'redux-logger'\n//const loggerMiddleware = createLogger()\n// add this as arg to \"applyMiddleware\" to turn logging back on: , loggerMiddleware\n// you can make this smarter so it only logs in development by using this example code: https://reactnativeforyou.com/how-to-remove-logs-of-redux-logger-in-production/\n\nexport default function configureStore(preloadedState) {\n  \n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunkMiddleware)\n  )\n}\n\n","import * as React from 'react';\nimport { JSCustomNodeModel } from './JSCustomNodeModel';\nimport JSCustomNodeWidget from './JSCustomNodeWidget';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\n\nexport class JSCustomNodeFactory extends AbstractReactFactory {\n\tconstructor() {\n\t\tsuper('js-custom-node');\n\t}\n\n\tgenerateModel(event) {\n\t\treturn new JSCustomNodeModel();\n\t}\n\n\tgenerateReactWidget(event) {\n\t\treturn <JSCustomNodeWidget engine={this.engine} node={event.model} />;\n\t}\n}\n","import { DefaultLinkFactory } from '@projectstorm/react-diagrams-defaults';\nimport GremlinLinkModel from './GremlinLinkModel';\n\n\nexport default class LinkFactory extends DefaultLinkFactory {\n    constructor() {\n        super('link');\n    }\n\n    generateModel() {\n        return new GremlinLinkModel();\n    }\n\n}\n","import { Action, InputType } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\n\n/**\n * Deletes all selected items\n */\nexport default class GremlinDeleteItemsAction extends Action {\n\tconstructor(options = {}, nodeDeleteHandler=null, linkDeleteHandler=null) {\n\t\tconst keyCodes = options.keyCodes || [46, 8];\n\t\tconst modifiers = {\n\t\t\tctrlKey: false,\n\t\t\tshiftKey: false,\n\t\t\taltKey: false,\n\t\t\tmetaKey: false,\n\t\t\t...options.modifiers\n\t\t};\n\n\t\tsuper({\n\t\t\ttype: InputType.KEY_DOWN,\n\t\t\tfire: (event) => {\n\t\t\t\tconst { keyCode, ctrlKey, shiftKey, altKey, metaKey } = event.event;\n\n\t\t\t\tif (keyCodes.indexOf(keyCode) !== -1 && _.isEqual({ ctrlKey, shiftKey, altKey, metaKey }, modifiers)) {\n\t\t\t\t\t_.forEach(this.engine.getModel().getSelectedEntities(), (model) => {\n\t\t\t\t\t\t// only delete items which are not locked\n\t\t\t\t\t\tif (!model.isLocked()) {\n                            // Injecting listeners at this part of the event handler because, unfortunately, there's no way that I could see to differentiate why a model was removed \n                            // by listening to the defauly actions. When I unloaded the digraphs and removed the nodes and edges, the listeners were seeing those as the same kind of \n                            // remove as if I had deleted them with a delete key or backspace... so everytime I unloaded the digraph, I destroyed it! Totally not what was desired\n                            // so intercept user inputs here for *actual* delete and DO NOTHING for the remove event itself that is emitted from the edges, nodes or model.\n                            console.log(\"Custom delete\", model);\n                            console.log(\"Type is\", model.options.type);\n                            console.log(model.hasOwnProperty('sourcePort'));\n                            \n                            // Setup the delete listeners...\n                            if (nodeDeleteHandler && model.options.type==='js-custom-node') nodeDeleteHandler(model.id);\n                            if (linkDeleteHandler && model.options.type==='link') linkDeleteHandler(model.id);\n\n                            // remove the the engine model itself to perform updates on screen\n\t\t\t\t\t\t\tmodel.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}","import 'react-toastify/dist/ReactToastify.css';\nimport 'semantic-ui-less/semantic.less';\n\nimport 'babel-polyfill';\nimport { Provider } from 'react-redux';\nimport configureStore from './Redux/configureStore';\nimport { ToastContainer } from 'react-toastify';\nimport React from 'react';\nimport { render } from 'react-dom';\nimport {\n    BrowserRouter,\n    Switch,\n    Route \n} from \"react-router-dom\";\nimport AsyncApp from './Containers/AsyncApp';\nimport LawyerHome from './Containers/LawyerHome';\nimport RoleProtectedRoute from './Routes/RoleProtectedRoute';\nimport Login from './Containers/Login';\nimport DigraphEngine from './DigraphEngine/DigraphEngine';\n\n\nconst store = configureStore();\nconst digraphEngine = new DigraphEngine(store);\n\nconst homeOptions = {\n    \"ADMIN\": AsyncApp,\n    \"LEGAL_ENG\": AsyncApp,\n    \"LAWYER\": LawyerHome\n};\n\nconsole.log(\"Index.js\");\n\nrender((\n    <Provider store={store}>\n        <ToastContainer/>\n        <BrowserRouter>\n            <Switch>\n                <Route key={0} path=\"/login\" component={Login}/>\n                <RoleProtectedRoute key={1} exact={true} digraphEngine={digraphEngine} path=\"/\" componentOptions={homeOptions}/>\n                <RoleProtectedRoute key={1} exact={true} digraphEngine={digraphEngine} path=\"/home\" componentOptions={homeOptions}/>\n            </Switch>\n        </BrowserRouter>\n    </Provider>\n), document.getElementById('root'));\n","import createEngine, {\n  DiagramModel,\n} from '@projectstorm/react-diagrams';\n\nimport CustomState from '../Components/DigraphToo/State/CustomState';\nimport { JSCustomNodeFactory } from '../Components/DigraphToo/Nodes/Script/JSCustomNodeFactory';\nimport { JSCustomNodeModel } from '../Components/DigraphToo/Nodes/Script/JSCustomNodeModel';\nimport GremlinLinkFactory from '../Components/DigraphToo/Links/GremlinLinkFactory';\nimport GremlinLinkModel from '../Components/DigraphToo/Links/GremlinLinkModel';\nimport GremlinDeleteItemsAction from '../Components/DigraphToo/Actions/GremlinDeleteItemsAction';\n\nexport default class DigraphEngine {\n  constructor(store, components=[]) \n  {\n    this.components = components;\n    this.locked = false;\n    this.store = store;\n\n    // Store listeners / callbacks for key user actions on the digram. Nodes are added via a separate menu\n    // that isn't part of this component. As long as the action to refresh the node also refreshes  \n    this.handleNodeMove = null;\n    this.handleNodeSelect = null;\n    this.handleNodeUnselected = null;\n    this.handleNodeDelete = null;\n    this.handleLinkCreate = null;\n    this.handleLinkUpdate = null;\n    this.handleLinkDelete = null;\n\n    this.initializeEngine();\n    this.initializeModel();\n  }\n\n  registerNodeMoveListener = (listener) => {\n    this.handleNodeMove = listener;\n  }\n\n  registerNodeSelectedListener = (listener) => {\n    this.handleNodeSelect = listener;\n  }\n\n  registerNodeUnselectedListener = (listener) => {\n    this.handleNodeUnselected = listener;\n  }\n\n  registerNodeDeleteListener = (listener) => {\n    this.handleNodeDelete = listener;\n  }\n\n  registerLinkCreateListener = (listener) => {\n    this.handleLinkCreate = listener;\n  }\n\n  registerLinkUpdateListener = (listener) => {\n    this.handleLinkUpdate = listener;\n  }\n\n  registerLinkDeleteListener = (listener) => {\n    this.handleLinkDelete = listener;\n  }\n\n  renderPipeline = (selectedPipelineObj) => {\n    \n    // Blow out whatever model is displayed / rendered\n    this.clearAllValues();\n\n    let nodes = [];\n    let links = [];\n\n    if (selectedPipelineObj) {\n      nodes = selectedPipelineObj.nodes || [];\n      links = selectedPipelineObj.edges || [];\n    }\n    else if (this.store) {\n      let state = this.store.getState();\n      nodes = state.pipelinesteps.items || [];\n      links = state.edges.items || [];\n    }\n\n    if (nodes.length > 0) {\n      nodes.forEach(node => {\n        try{\n          this.handleCreateNode(node.id, node.name, node.x_coord, node.y_coord);\n        }\n        catch(err) {\n          console.log(\"Error creating node: \", err);\n        }\n         \n        }); \n    }\n\n    if (links.length > 0) {\n      links.forEach(link => {\n        try {\n          this.handleCreateLink(link.id, link.start_node, link.end_node);\n        }\n        catch(err) {\n          console.log(\"Error creating links: \", err);\n        }\n      });\n    }\n\n    this.engine.repaintCanvas();\n\n  }\n\n  getEngine = () => this.engine;\n\n  getModel = () => this.engine.getModel();\n\n  /**\n   * Initialization methods\n   */\n  initializeEngine = () => {\n\n    this.engine = createEngine({\n      registerDefaultDeleteItemsAction: false,\n      registerDefaultZoomCanvasAction: true\n    });\n\n    // React-diagrams is awesome, however the documentation is subpar. If you want to have it so that clicking a link will \n    // select the link, you need to create a custom state (really an event handler)\n\n    // The custom state is not enough, however. Based on testing, you still create nodes in the links on click. If you want to \n    // have click select the link (as opposed to CTRL+click) without creating a node in the link, you also need to select\n    // specify a max # of nodes per link per this thread: https://github.com/projectstorm/react-diagrams/issues/49\n    this.engine.maxNumberPointsPerLink = 0;\n\n    // Register custom nodes and custom links. In the nodes, we want a custom widget and custom model to hold Gremlin IDs\n    // In the links, we just need a custom field to map the react-diagram id to the gremlin id.\n    this.engine.getNodeFactories().registerFactory(new JSCustomNodeFactory());\n    this.engine.getLinkFactories().registerFactory(new GremlinLinkFactory());\n    this.engine.getStateMachine().pushState(new CustomState());\n    this.engine.getActionEventBus().registerAction(new GremlinDeleteItemsAction({ keyCodes: [46] }, this.nodeDelete, this.linkDelete));\n\n  };\n\n  initializeModel = () => {\n    this.model = new DiagramModel();\n\n    this.model.setGridSize(15);\n    this.model.setLocked(false);\n    this.model.registerListener({\n      eventDidFire: event => {\n        const type = event.function;\n        if (type === 'offsetUpdated') this.adjustGridOffset(event);\n        if (type === 'zoomUpdated') this.adjustGridZoom(event);\n        if (type === 'linksUpdated') this.handleLinksChanged(event);\n      },\n    });\n    this.realignGrid();\n\n    this.engine.setModel(this.model);\n  };\n\n  /**\n   * Diagram locking methods\n   */\n  setLocked = locked => {\n    this.model.setLocked(locked);\n    this.locked = locked;\n  };\n\n  isLocked = () => this.locked;\n\n  /**\n   * Listeners - Really only for link creation / edit and node selection. Node deletion is handled using custom Action\n   * in response to user delete command. Nodes are created separately in Gremlin which is then loaded into the engine \n   * in the background. \n   */\n\n  // When a link is created from interaction with the digraph, append a new listener that will create it \n  // in the DB when it's connected to a targetPort. No supporting source node changes. \n  handleLinksChanged = (event) => {\n    if (event.isCreated){\n\n      // Only create properly formed links... if they don't connect two nodes, we're going to leave them \n      // out of the DB. Also should add some kind of feature to UI to make it obvious this is how this\n      // is handled.\n      event.link.registerListener({\n        eventDidFire: event => {\n          const type = event.function;\n          if (type === 'targetPortChanged') this.linkCreate(event);\n        },\n      });\n    }\n  }\n    \n  linkTargetChanged = (event) => {\n    this.handleLinkUpdate ? this.handleLinkUpdate(event) : console.log(\"No link update method provided.\");\n  }\n\n  handleNodeSelectionChange = (event) => {\n    if (event.isSelected) {\n      this.handleNodeSelect ? this.handleNodeSelect(event.entity.id) : console.log(\"No node selection method provided\");\n    }\n    else {\n      this.handleNodeUnselected ? this.handleNodeUnselected(event.entity.id) : console.log(\"No node unselect method provided\");\n    }\n  }\n\n  handleNodeMoved = (event) => {\n    this.handleNodeMove ? this.handleNodeMove(event.entity) : console.log(\"No node move method provided\");\n  }\n\n  linkCreate = (event) => {\n    this.handleLinkCreate ? this.handleLinkCreate(event) : console.log(\"No link create method provided\");\n  }\n\n  linkDelete = (linkId) => {\n    console.log(\"Delete link: \", linkId);\n    this.handleLinkDelete ? this.handleLinkDelete(linkId) : console.log(\"No link delete method provided\");\n  }\n\n  linkInjectGremlinId = (reactDiagramId, gremlinId) => {\n    const link = this.getLinkFromReactDiagramId(reactDiagramId);\n    link.id = gremlinId;\n  }\n\n  nodeDelete = (nodeId) => {\n    this.handleNodeDelete ? this.handleNodeDelete(nodeId) : console.log(\"No node delete method provided\");\n  }\n\n  /**\n   * Diagram painting methods\n   */\n  repaint = () => this.engine.repaintCanvas();\n\n  realignGrid = () => {\n    this.adjustGridOffset({\n      offsetX: this.model.getOffsetX(),\n      offsetY: this.model.getOffsetY(),\n    });\n\n    this.adjustGridZoom({\n      zoom: this.model.getZoomLevel(),\n    });\n  };\n\n  adjustGridOffset = ({ offsetX, offsetY }) => {\n    document.body.style.setProperty('--offset-x', `${offsetX}px`);\n    document.body.style.setProperty('--offset-y', `${offsetY}px`);\n  };\n\n  adjustGridZoom = ({ zoom }) => {\n    const { gridSize } = this.model.getOptions();\n    document.body.style.setProperty(\n      '--grid-size',\n      `${(gridSize * zoom) / 100}px`,\n    );\n  };\n\n  /**\n   * Fetch react-diagram objects (links and nodes) based on their gremlin ids (since they won't be the same)\n   */\n  getNodeFromGremlinId = (id) => {\n    const node = this.getEngine()\n      .getModel()\n      .getNodes()\n      .find(node => node.id === id);\n    return node;\n  }\n\n  getLinkFromGremlinId = (id) => {\n    const link = this.getEngine()\n      .getModel()\n      .getLinks()\n      .find(link => link.id === id);\n    return link;\n  }\n\n  getLinkFromReactDiagramId = (reactDiagramId) => {\n    const link = this.getEngine()\n      .getModel()\n      .getLinks()\n      .find(link => link.options.id === reactDiagramId);\n    return link\n  }\n\n\n\n  /**\n   * Component creation and configuration methods\n   */\n  handleCreateLink = (id=-1, start_node=-1, end_node=-1) => {\n    \n    const link = new GremlinLinkModel(id);\n\n    const sourceNode = this.getNodeFromGremlinId(start_node);\n    const targetNode = this.getNodeFromGremlinId(end_node);\n    \n    link.setSourcePort(sourceNode.getPort('out'));\n    link.setTargetPort(targetNode.getPort('in'));\n    \n    this.getEngine().getModel().addLink(link);    \n  }\n\n  addLink = (id, start_node, end_node) => {\n    this.handleCreateLink(id, start_node, end_node);\n    this.engine.repaintCanvas();\n  }\n\n  handleCreateNode = (id, name, x, y, options={}) => {\n  \n    // Create node\n    const node = new JSCustomNodeModel(id, name, options);\n\n    // Set x and y (if applicable, otherwise set at center of screen)\n    node.setPosition(x || window.innerWidth / 2, y || window.innerHeight / 2);\n\n    // Register default listener so if the user a) moves, or b) deletes the node, we can take actions in other parts of the application \n    node.registerListener({\n      eventDidFire: event => {\n        const type = event.function;\n        if (type==='positionChanged') this.handleNodeMoved(event);\n        if (type==='selectionChanged') this.handleNodeSelectionChange(event);\n      }\n    });\n\n    this.model.addNode(node);\n  };\n\n  addNode = (id, name, options={}) => {\n    this.handleCreateNode(id, name, options);\n    this.engine.repaintCanvas();\n  }\n\n  handleDeleteNode = (gremlin_id) => {\n    this.getNodeFromGremlinId(gremlin_id).remove();\n    this.engine.repaintCanvas();\n  }\n\n  handleDeleteLink = (gremlin_id) => {\n    this.getLinkFromGremlinId(gremlin_id).remove();\n    this.engine.repaintCanvas();\n  }\n\n  zoomIn = () => {\n    this.getModel().setZoomLevel(this.getModel().getZoomLevel()+5);\n    this.engine.repaintCanvas();\n  }\n\n  zoomOut = () => {\n    this.getModel().setZoomLevel(this.getModel().getZoomLevel()-5);\n    this.engine.repaintCanvas();\n  }\n  \n  zoomToFit = () => {\n    this.engine.zoomToFit();\n  };\n\n  clearAllValues = () => {\n    this.clearLinks();\n    this.clearNodes();\n    this.repaint();\n  };\n\n  clearLinks = () =>\n    this.getEngine()\n      .getModel()\n      .getLinks()\n      .forEach(link => link.remove());\n\n  clearNodes = () =>\n    this.getEngine()\n      .getModel()\n      .getNodes()\n      .forEach(node => node.remove());\n\n  fireAction = event =>\n    this.engine.getActionEventBus().fireAction({\n      event: {\n        ...event,\n        key: '',\n        preventDefault: () => {},\n        stopPropagation: () => {},\n      },\n    });\n  }"],"sourceRoot":""}